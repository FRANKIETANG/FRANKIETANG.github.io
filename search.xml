<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[动态 REM]]></title>
    <url>%2F2018%2F02%2F27%2F%E5%8A%A8%E6%80%81%20REM%2F</url>
    <content type="text"><![CDATA[动态 REMREM 是手机专用的自适应方案。（不是响应式，只针对手机，PC 端就会拒绝访问） 示例代码 什么是 REM这里先来了解一下常用的长度单位。 px -&gt; 像素。 em -&gt; 一个 m 的长度。em == font-size（面试官：一斤鸭梨！明明是一个汉字的长度！） rem -&gt; root em 根元素的 font-size。（根元素就是 &lt;html&gt;，比如说 &lt;html&gt; 的根元素是 16px，那样 rem 就是 16px 。） vh -&gt; viewport height 视口高度，100vh == 视口高度。 vw -&gt; viewport width 视口宽度，100vw == 视口宽度。 所以 em 和 rem 的关系和 JavaScript 和 Java 关系有一拼，也和雷锋和雷峰塔有一拼。 &lt;html&gt; 初始的 font-size 是 16px 。 举个例子： 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .a &#123; font-size: 1rem; &#125; .b &#123; font-size: 2rem; &#125; .c &#123; font-size: 3rem; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p class="a"&gt;123&lt;/p&gt; &lt;p class="b"&gt;456&lt;/p&gt; &lt;p class="c"&gt;789&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 记住，字体大小和 &lt;html&gt; 的 font-size 很有关系。 REM 和 EM 的区别是什么em 的值是不固定的，是看父元素的 font-size 。（因为继承的原因父元素才会影响到 em 值） 建议不要用，很容易有奇奇怪怪的效果。 rem 就很好，什么都听根元素的话。 手机端方案的特点还是要记住一点，有图才做。没图？怼他。 所以说第一点就是，要两张图。一张 PC 端，一张手机端。没有就响应个屁。 然后要确定页面要做多大。（收集市面上常用的手机屏幕有多大） 如果考虑响应式的话可能要对某些手机做适配。（0 - 320 一套 CSS / 321 - 375 一套 / 376 - 414 一套这样。其实挺麻烦。而且很容易让效果变怪，特别是用百分比做页面的时候。） 那手机端就有以下这几种写法： 百分比写法（高度有问题） 整体缩放 动态 REM 的写法先看看一个百分比写法的例子： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; .child &#123; background: #ddd; margin-top: 10px; margin-bottom: 10px; text-align: center; &#125; .child &#123; float: left; width: 40%; margin-left: 5%; margin-right: 5%; &#125; .claerfix::after &#123; content: ''; display: block; clear: both; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="child"&gt;40%&lt;/div&gt; &lt;div class="child"&gt;40%&lt;/div&gt; &lt;div class="child"&gt;40%&lt;/div&gt; &lt;div class="child"&gt;40%&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 明显的一点就是，高度没有变。 接下来举一个缩放（就是 REM ）的例子： 有一个很重要的思路就是 1 rem == html font-size == viewport width 什么意思呢？就是让 html 的 font-size 和页面宽度有关系。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; body &#123; font-size: 16px; /* 不让字也变成 rem */ &#125; .child &#123; background: #ddd; text-align: center; line-height: 0.2rem; &#125; .child &#123; width: 0.4rem; height: 0.2rem; margin: 0.05rem 0.05rem; float: left; &#125; .clearfix::after &#123; content: ''; clear: both; display: block; &#125; &lt;/style&gt; &lt;script&gt; let pageWidth = window.innerWidth // 获取页面宽度 document.write(` &lt;style&gt; html &#123; font-size: $&#123;pageWidth&#125;px; /* 页面宽度等于 font-size */ &#125; &lt;/style&gt; `) &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="child"&gt;40%&lt;/div&gt; &lt;div class="child"&gt;40%&lt;/div&gt; &lt;div class="child"&gt;40%&lt;/div&gt; &lt;div class="child"&gt;40%&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 利用 JavaScript 控制 CSS 来进行等比缩放。 但是有一个问题啊，我能不能写 rem 的时候不用小数呢？ 可以的，只用把 JavaScript 改一下。 12345678let pageWidth = window.innerWidth // 获取页面宽度document.write(` &lt;style&gt; html &#123; font-size: $&#123;pageWidth/10&#125;px; /* 页面宽度等于 font-size */ &#125; &lt;/style&gt;`) 注意不能除 100 ，页面会错乱，因为浏览器内置最小字体大小是 12px 。 另外 REM 可以和其他单位同时存在。 123font-size: 16px;border: 1px solid red;width: 0.5rem; 一些 REM 技巧：px 自动变成 rem不需要用脑子算 rem，电脑帮忙算。 用 sass 写。 1sudo gem install sass --no-user-install 然后用上 PX2REM 。 用 sass 翻译已经写好的 scss。 1sass --watch scss:css 这样就能翻译成一模一样的的代码了。 重点是设计稿的宽度要写好，其他直接填就可以了。]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[说不清楚的 BFC]]></title>
    <url>%2F2018%2F02%2F20%2F%E8%AF%B4%E4%B8%8D%E6%B8%85%E6%A5%9A%E7%9A%84%20BFC%2F</url>
    <content type="text"><![CDATA[说不清楚的 BFCCSS 规范中对 BFC 的描述 9.4.1 块格式化上下文 浮动，绝对定位元素，非块盒的块容器（例如，inline-blocks，table-cells和table-captions）和’overflow’不为’visible’的块盒会为它们的内容建立一个新的块格式化上下文 在一个块格式化上下文中，盒在竖直方向一个接一个地放置，从包含块的顶部开始。两个兄弟盒之间的竖直距离由’margin’属性决定。同一个块格式化上下文中的相邻块级盒之间的竖直margin会合并 在一个块格式化上下文中，每个盒的left外边（left outer edge）挨着包含块的left边（对于从右向左的格式化，right边挨着）。即使存在浮动（尽管一个盒的行盒可能会因为浮动收缩），这也成立。除非该盒建立了一个新的块格式化上下文（这种情况下，该盒自身可能会因为浮动变窄） MDN 对 BFC 的描述 一个块格式化上下文（block formatting context） 是Web页面的可视化CSS渲染出的一部分。它是块级盒布局出现的区域，也是浮动层元素进行交互的区域。 一个块格式化上下文由以下之一创建： 根元素或其它包含它的元素 浮动元素 (元素的 float 不是 none) 绝对定位元素 (元素具有 position 为 absolute 或 fixed) 内联块 (元素具有 display: inline-block) 表格单元格 (元素具有 display: table-cell，HTML表格单元格默认属性) 表格标题 (元素具有 display: table-caption, HTML表格标题默认属性) 具有overflow 且值不是 visible 的块元素， display: flow-root column-span: all 应当总是会创建一个新的格式化上下文，即便具有 column-span: all 的元素并不被包裹在一个多列容器中。 一个块格式化上下文包括创建它的元素内部所有内容，除了被包含于创建新的块级格式化上下文的后代元素内的元素。 块格式化上下文对于定位 (参见 float) 与清除浮动 (参见 clear) 很重要。定位和清除浮动的样式规则只适用于处于同一块格式化上下文内的元素。浮动不会影响其它块格式化上下文中元素的布局，并且清除浮动只能清除同一块格式化上下文中在它前面的元素的浮动。 张鑫旭对 BFC 的描述 BFC全称”Block Formatting Context”, 中文为“块级格式化上下文”。啪啦啪啦特性什么的，一言难尽，大家可以自行去查找，我这里不详述，免得乱了主次，总之，记住这么一句话：BFC元素特性表现原则就是，内部子元素再怎么翻江倒海，翻云覆雨都不会影响外部的元素。所以，避免margin穿透啊，清除浮动什么的也好理解了。 实例代码 那 BFC 到底是什么BFC 是一种方法。 实际上 BFC 只有两个功能： 爸爸管儿子 兄弟之间划清界限 爸爸管儿子用 BFC 包住浮动元素。（注意不是清除浮动） 只要儿子加了浮动元素，爸爸的高度就会坍塌。 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .parent &#123; border: 10px solid red; min-height: 10px; &#125; .child &#123; background: green; float: left; width: 300px; height: 100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="child"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 用 BFC 包住儿子有四种写法。 第一种是跟着儿子浮动。 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .parent &#123; border: 10px solid red; min-height: 10px; float: left; &#125; .child &#123; background: green; float: left; width: 300px; height: 100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="child"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 第二种是父元素绝对定位。 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .parent &#123; border: 10px solid red; min-height: 10px; position: absolute; &#125; .child &#123; background: green; float: left; width: 300px; height: 100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="child"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 效果和上面的一样，这里就不贴图了。 第三种是爸爸加 display:inline-block 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .parent &#123; border: 10px solid red; min-height: 10px; display: inline-block; &#125; .child &#123; background: green; float: left; width: 300px; height: 100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="child"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 效果和上面的一样，这里就不贴图了。 第四种是 overflow 不是 visible 的属性。 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .parent &#123; border: 10px solid red; min-height: 10px; overflow: auto; &#125; .child &#123; background: green; float: left; width: 300px; height: 100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="child"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 这个空白不知道为什么，可能是因为 auto 的缘故吧。 第五种是 display:table-cell 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .parent &#123; border: 10px solid red; min-height: 10px; display: table-cell; &#125; .child &#123; background: green; float: left; width: 300px; height: 100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="child"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 第六种是 display: flow-root 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .parent &#123; border: 10px solid red; min-height: 10px; display: flow-root; &#125; .child &#123; background: green; float: left; width: 300px; height: 100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="child"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 和 overflow: auto; 一样的效果。 值得注意的是，下面这种情况相邻块级盒之间的竖直 margin 会合并。 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .parent &#123; border: 10px solid red; min-height: 10px; display: flow-root; &#125; .child &#123; background: green; width: 300px; height: 100px; margin: 10px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="child"&gt;&lt;/div&gt; &lt;div class="child"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 还有一句话要记住的。 一个块格式化上下文包括创建它的元素内部所有内容，除了被包含于创建新的块级格式化上下文的后代元素内的元素。 这是怎么意思呢？就是儿子的儿子不会被爸爸包住。 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .parent &#123; border: 10px solid red; min-height: 10px; display: flow-root; &#125; .child &#123; float: left; background: green; width: 300px; height: 100px; margin-top: 100px; &#125; .grandson &#123; height: 50px; width: 200px; background: blue; margin-top: 200px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="child"&gt; &lt;div class="grandson"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 实际上只要儿子不要高度就能包起来，这里只是举个例子。 兄弟之间划清界限用 float + div 做左右自适应布局 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .gege &#123; width: 100px; min-height: 600px; border: 5px solid red; float: left; margin-right: 20px; &#125; .didi &#123; min-height: 600px; border: 10px solid green; overflow: auto; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="gege"&gt;gege&lt;/div&gt; &lt;div class="didi"&gt;1234&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; BFC 值得注意的地方BFC 可以模拟清除浮动，但是建议还是用清除浮动，因为用 BFC 必须创造 BFC 的条件。（比如 overflow，天知道计算机会把样式搞成啥样子） BFC 可以用在爸爸不让儿子出去的地方。 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .parent &#123; background: red; overflow: hidden; &#125; .child &#123; height: 100px; background: rgba(0, 255, 0, 0.5); margin-top: 100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="child"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 不过还是建议用 display: flow-root ，副作用小。 实际上用 border-top 也可以做到。所以说没有什么必要用到 BFC。 面试才会问到 BFC。 千万别解释什么是 BFC，一解释就错。 用上面的例子回答什么是 BFC。]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[布局の套路]]></title>
    <url>%2F2018%2F02%2F14%2F%E5%B8%83%E5%B1%80%E3%81%AE%E5%A5%97%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[布局の套路实际上布局的套路来来去去也就那么几种，重点是要看看是否要兼容 IE。 要兼容 IE？那就选 Float 布局。 不用兼容 IE？那就选 Flex 布局。 原则有以下几点。 不到万不得已，不要写死 width 和 height。 尽量用高级语法。（如 calc / flex 这些） 如果是 IE 就全部写死。 以下用 acfun.cn 和 m.acfun.cn 举例。（A 站能复活真的是太好了，我终于又能爬 A 站搞事情了 233。） 可以看到 banner 基本上都在中间第一页的位置，然后加上许多许多小方块。 手机端就是一切从简，菜单栏合成一个按钮，banner 仍然是放在了首页，其他小方块用上了 2×n 的方法。 示例代码 float 儿子全加 float: left 或者 float: right 。 老子加 .clearfix 。 浮动布局不定宽是这样的。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .parent &#123; border: 1px solid green; &#125; .child &#123; float: left; &#125; .child:nth-child(1) &#123; width: 30%; background-color: red; &#125; .child:nth-child(2) &#123; width: 70%; background-color: yellow; &#125; .clearfix::after &#123; content: ''; display: block; clear: both; &#125; .clearfix &#123; zoom: 1; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent clearfix"&gt; &lt;div class="child"&gt;儿子1&lt;/div&gt; &lt;div class="child"&gt;儿子2&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 定宽是这样的。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .parent &#123; border: 1px solid green; width: 1000px; margin: 0 auto; &#125; .child &#123; float: left; &#125; .child:nth-child(1) &#123; width: 200px; background-color: red; &#125; .child:nth-child(2) &#123; width: 800px; background-color: yellow; &#125; .clearfix::after &#123; content: ''; display: block; clear: both; &#125; .clearfix &#123; zoom: 1; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent clearfix"&gt; &lt;div class="child"&gt;儿子1&lt;/div&gt; &lt;div class="child"&gt;儿子2&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 所以随便选一个方法来当做导航栏。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .parent &#123; margin: 0 auto; background: #ddd; &#125; .child1 &#123; float: left; &#125; .child2 &#123; float: right; &#125; .child1:nth-child(1) &#123; width: 100px; background-color: #333; color: white; text-align: center; height: 36px; line-height: 36px; /*（注意行高垂直居中）*/ &#125; .clearfix::after &#123; content: ''; display: block; clear: both; &#125; /*注意下面这句话是解决 ie 不支持*/ .clearfix &#123; zoom: 1; &#125; .nav &#123; line-height: 36px; /*（注意行高垂直居中）*/ &#125; .navItem &#123; float: left; margin: 0 10px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent clearfix"&gt; &lt;div class="child1"&gt;logo&lt;/div&gt; &lt;div class="child2"&gt; &lt;div class="nav"&gt; &lt;div class="navItem"&gt;导航1&lt;/div&gt; &lt;div class="navItem"&gt;导航2&lt;/div&gt; &lt;div class="navItem"&gt;导航3&lt;/div&gt; &lt;div class="navItem"&gt;导航4&lt;/div&gt; &lt;div class="navItem"&gt;导航5&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 这样就做出了一个导航栏。 平均布局这里继续做 benner 和其他小图片。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .parent &#123; margin: 0 auto; background: #ddd; min-width: 800px; &#125; .child1 &#123; float: left; &#125; .child2 &#123; float: right; &#125; .child1:nth-child(1) &#123; width: 100px; background-color: #333; color: white; text-align: center; height: 36px; line-height: 36px; &#125; .clearfix::after &#123; content: ''; display: block; clear: both; &#125; .clearfix &#123; zoom: 1; &#125; .nav &#123; line-height: 36px; &#125; .navItem &#123; float: left; margin: 0 10px; &#125; .banner &#123; width: 800px; height: 300px; background: #888; margin: 0 auto; margin-top: 10px; &#125; .pictures &#123; width: 800px; margin: 0 auto; background: white; &#125; .picture &#123; width: 194px; height: 194px; margin: 4px; background: #999; float: left; &#125; /*ie 不支持*/ /* .picture:nth-child(4n+1) &#123; margin-left: 0; &#125; .picture:nth-child(4n) &#123; margin-right: 0; &#125; */ /*支持 ie*/ .pictures&gt;.ie &#123; background: white; margin-left: -4px; margin-right: -4px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent clearfix"&gt; &lt;div class="child1"&gt;logo&lt;/div&gt; &lt;div class="child2"&gt; &lt;div class="nav"&gt; &lt;div class="navItem"&gt;导航1&lt;/div&gt; &lt;div class="navItem"&gt;导航2&lt;/div&gt; &lt;div class="navItem"&gt;导航3&lt;/div&gt; &lt;div class="navItem"&gt;导航4&lt;/div&gt; &lt;div class="navItem"&gt;导航5&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="banner"&gt;&lt;/div&gt; &lt;div class="pictures clearfix"&gt; &lt;div class="ie clearfix"&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; .pictures 是一定要保留的，起到居中作用。因为下面的 .ie 用了左右负 margin 。 复习一下 flex 的用法。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .parent &#123; margin: 0 auto; background: #ddd; min-width: 800px; &#125; .child1 &#123; float: left; &#125; .child2 &#123; float: right; &#125; .child1:nth-child(1) &#123; width: 100px; background-color: #333; color: white; text-align: center; height: 36px; line-height: 36px; &#125; .clearfix::after &#123; content: ''; display: block; clear: both; &#125; .clearfix &#123; zoom: 1; &#125; .nav &#123; line-height: 36px; &#125; .navItem &#123; float: left; margin: 0 10px; &#125; .banner &#123; width: 800px; height: 300px; background: #888; margin: 0 auto; margin-top: 10px; &#125; .pictures &#123; width: 800px; margin: 0 auto; background: white; display: flex; flex-wrap: wrap; justify-content: space-between; &#125; .picture &#123; width: 194px; height: 194px; margin: 4px 0; background: #999; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent clearfix"&gt; &lt;div class="child1"&gt;logo&lt;/div&gt; &lt;div class="child2"&gt; &lt;div class="nav"&gt; &lt;div class="navItem"&gt;导航1&lt;/div&gt; &lt;div class="navItem"&gt;导航2&lt;/div&gt; &lt;div class="navItem"&gt;导航3&lt;/div&gt; &lt;div class="navItem"&gt;导航4&lt;/div&gt; &lt;div class="navItem"&gt;导航5&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="banner"&gt;&lt;/div&gt; &lt;div class="pictures"&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 这个也能做出同样的效果。 用上 calccalc 这个语法就是相当于交给计算机计算要多少宽度。 下面继续完善页面。（插一个小插曲，class 千万不要用 .ad ，会被屏蔽广告插件给屏蔽掉。） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .parent &#123; margin: 0 auto; background: #ddd; min-width: 800px; &#125; .child1 &#123; float: left; &#125; .child2 &#123; float: right; &#125; .child1:nth-child(1) &#123; width: 100px; background-color: #333; color: white; text-align: center; height: 36px; line-height: 36px; &#125; .clearfix::after &#123; content: ''; display: block; clear: both; &#125; .clearfix &#123; zoom: 1; &#125; .nav &#123; line-height: 36px; &#125; .navItem &#123; float: left; margin: 0 10px; &#125; .banner &#123; width: 800px; height: 300px; background: #888; margin: 0 auto; margin-top: 10px; &#125; .pictures &#123; width: 800px; margin: 0 auto; background: white; display: flex; flex-wrap: wrap; justify-content: space-between; &#125; .picture &#123; width: calc(25% - 8px); /*页面的四分之一减去 8px*/ height: 194px; margin: 4px 0; background: #999; &#125; .art &#123; background: #ddd; width: 800px; margin: 0 auto; &#125; .art&gt;.sider &#123; float: left; border: 1px solid black; width: calc(33.3333% - 20px); /*页面的三分之一减去 20px*/ margin-right: 20px; height: 300px; &#125; .art&gt;.main &#123; float: left; border: 1px solid black; width: 66%; height: 300px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent clearfix"&gt; &lt;div class="child1"&gt;logo&lt;/div&gt; &lt;div class="child2"&gt; &lt;div class="nav"&gt; &lt;div class="navItem"&gt;导航1&lt;/div&gt; &lt;div class="navItem"&gt;导航2&lt;/div&gt; &lt;div class="navItem"&gt;导航3&lt;/div&gt; &lt;div class="navItem"&gt;导航4&lt;/div&gt; &lt;div class="navItem"&gt;导航5&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="banner"&gt;&lt;/div&gt; &lt;div class="pictures"&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="art clearfix"&gt; &lt;div class="sider"&gt;广告1&lt;/div&gt; &lt;div class="main"&gt;广告2&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 广告部分就长这样。 用 flex 做一遍。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .parent &#123; margin: 0 auto; background: #ddd; min-width: 800px; &#125; .child1 &#123; float: left; &#125; .child2 &#123; float: right; &#125; .child1:nth-child(1) &#123; width: 100px; background-color: #333; color: white; text-align: center; height: 36px; line-height: 36px; &#125; .clearfix::after &#123; content: ''; display: block; clear: both; &#125; .clearfix &#123; zoom: 1; &#125; .nav &#123; line-height: 36px; &#125; .navItem &#123; float: left; margin: 0 10px; &#125; .banner &#123; width: 800px; height: 300px; background: #888; margin: 0 auto; margin-top: 10px; &#125; .pictures &#123; width: 800px; margin: 0 auto; background: white; display: flex; flex-wrap: wrap; justify-content: space-between; &#125; .picture &#123; width: calc(25% - 8px); height: 194px; margin: 4px 0; background: #999; &#125; .art &#123; background: #ddd; width: 800px; margin: 0 auto; display: flex; justify-content: space-between; &#125; .art&gt;.sider &#123; border: 1px solid black; width: calc(33.3333% - 20px); height: 300px; &#125; .art&gt;.main &#123; border: 1px solid black; width: 66%; height: 300px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent clearfix"&gt; &lt;div class="child1"&gt;logo&lt;/div&gt; &lt;div class="child2"&gt; &lt;div class="nav"&gt; &lt;div class="navItem"&gt;导航1&lt;/div&gt; &lt;div class="navItem"&gt;导航2&lt;/div&gt; &lt;div class="navItem"&gt;导航3&lt;/div&gt; &lt;div class="navItem"&gt;导航4&lt;/div&gt; &lt;div class="navItem"&gt;导航5&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="banner"&gt;&lt;/div&gt; &lt;div class="pictures"&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="art"&gt; &lt;div class="sider"&gt;广告1&lt;/div&gt; &lt;div class="main"&gt;广告2&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 手机布局写两套 CSS 是最好的解决方法。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; * &#123; box-sizing: border-box; margin: 0; padding: 0; &#125; .parent &#123; margin: 0 auto; background: #ddd; &#125; .child1:nth-child(1) &#123; width: 100px; background-color: #333; color: white; text-align: center; height: 36px; line-height: 36px; float: left; &#125; .clearfix::after &#123; content: ''; display: block; clear: both; &#125; .clearfix &#123; zoom: 1; &#125; .nav &#123; line-height: 36px; &#125; .nav2 &#123; display: none; float: right; width: 36px; height: 36px; line-height: 36px; text-align: center; &#125; @media(max-width: 420px) &#123; .nav2 &#123; display: block; &#125; .nav &#123; display: none; &#125; &#125; .nav2Item &#123; display: none; &#125; .nav2Item.active &#123; display: block; text-align: center; &#125; .navItem &#123; float: left; margin: 0 10px; &#125; .banner &#123; width: 800px; height: 300px; background: #888; margin: 0 auto; margin-top: 10px; &#125; @media(max-width: 420px) &#123; .banner &#123; width: auto; &#125; &#125; .pictures &#123; width: 800px; margin: 0 auto; background: white; &#125; @media(max-width: 420px) &#123; .pictures &#123; width: auto; overflow: hidden; &#125; &#125; .pictures&gt;.xxx &#123; display: flex; flex-wrap: wrap; margin: 0 -4px; &#125; .picture &#123; width: calc(25% - 8px); height: 194px; margin: 4px; background: #999; &#125; @media(max-width: 420px) &#123; .picture &#123; width: calc(50% - 8px); &#125; &#125; .art &#123; background: #ddd; width: 800px; margin: 0 auto; display: flex; justify-content: space-between; &#125; @media(max-width: 420px) &#123; .art &#123; width: auto; flex-direction: column; &#125; &#125; .art&gt;.sider &#123; border: 1px solid black; width: calc(33.3333% - 20px); height: 300px; &#125; @media(max-width: 420px) &#123; .art&gt;.sider &#123; width: auto; height: auto; &#125; &#125; .art&gt;.main &#123; border: 1px solid black; width: 66%; height: 300px; &#125; @media(max-width: 420px) &#123; .art&gt;.main &#123; width: auto; height: auto; &#125; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent clearfix"&gt; &lt;div class="child1"&gt;logo&lt;/div&gt; &lt;div class="child2 clearfix"&gt; &lt;div class="nav"&gt; &lt;div class="navItem"&gt;导航1&lt;/div&gt; &lt;div class="navItem"&gt;导航2&lt;/div&gt; &lt;div class="navItem"&gt;导航3&lt;/div&gt; &lt;div class="navItem"&gt;导航4&lt;/div&gt; &lt;div class="navItem"&gt;导航5&lt;/div&gt; &lt;/div&gt; &lt;div id="nav2" class="nav2"&gt;三&lt;/div&gt; &lt;/div&gt; &lt;div id="nav2Item" class="nav2Item"&gt; &lt;div&gt;导航1&lt;/div&gt; &lt;div&gt;导航2&lt;/div&gt; &lt;div&gt;导航3&lt;/div&gt; &lt;div&gt;导航4&lt;/div&gt; &lt;div&gt;导航5&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="banner"&gt;&lt;/div&gt; &lt;div class="pictures"&gt; &lt;div class="xxx"&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;div class="picture"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="art"&gt; &lt;div class="sider"&gt;广告1&lt;/div&gt; &lt;div class="main"&gt;广告2&lt;/div&gt; &lt;/div&gt; &lt;script&gt; nav2.onclick = function () &#123; nav2Item.classList.toggle('active') &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 手机页面的诀窍就是，把宽高全部 auto 就可以解决一切问题，配合媒体查询使用。 市面上的页面布局大部分的页面都是浮动解决一切问题，基本所有页面都是浮动。（兼容 IE，就是那种很多简历上都要求的 DIV + CSS 布局）]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Flex 布局]]></title>
    <url>%2F2018%2F02%2F13%2FFlex%20%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[Flex 布局最简单，最省事的一种布局。 老子加 display: flex; 老子加 justify-content: space-between; 实例代码 Flex 前的布局http://www.mycelly.com/ 这个是那个年代常用的 12 种布局。 不管你是写什么样子的页面，始终离不开 normal flow float + clear position relative + absolute display inline-block 负 margin Flex 布局 块级布局侧重垂直方向、行内布局侧重水平方向、Flex 布局是与方向无关的。 Flex 布局可以实现空间自动分配、自动对齐。 Flex 适用于简单的线性布局、更复杂的布局要交给 grid 布局。 基本概念 下面举一个简单的例子 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .child &#123; width: 100px; height: 50px; background: white; margin: 10px; &#125; .parent &#123; display: flex; background: #ddd; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="child child1"&gt;1&lt;/div&gt; &lt;div class="child child2"&gt;2&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 长这样。 只要加上了 display: flex; 就会有类似 float: left; 的效果。 flex container 的属性 flex container 的属性 意思 flex-direction 方向 flex-wrap 换行 flex-flow 上面两个的简写 justify-content 主轴方向对齐方式 align-items 侧轴对齐方式 align-content 多行、列内容对齐方式（用得较少） 先看看 flex-direction 的四个例子。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .child &#123; width: 100px; height: 50px; background: white; margin: 10px; &#125; .parent &#123; margin-top: 10px; &#125; .parent1 &#123; display: flex; background: #ddd; flex-direction: row; &#125; .parent2 &#123; display: flex; background: #ddd; flex-direction: row-reverse; &#125; .parent3 &#123; display: flex; background: #ddd; flex-direction: column; &#125; .parent4 &#123; display: flex; background: #ddd; flex-direction: column-reverse; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent parent1"&gt; &lt;div class="child child1"&gt;1&lt;/div&gt; &lt;div class="child child2"&gt;2&lt;/div&gt; &lt;div class="child child3"&gt;3&lt;/div&gt; &lt;div class="child child4"&gt;4&lt;/div&gt; &lt;div class="child child5"&gt;5&lt;/div&gt; &lt;/div&gt; &lt;div class="parent parent2"&gt; &lt;div class="child child1"&gt;1&lt;/div&gt; &lt;div class="child child2"&gt;2&lt;/div&gt; &lt;div class="child child2"&gt;3&lt;/div&gt; &lt;div class="child child2"&gt;4&lt;/div&gt; &lt;div class="child child2"&gt;5&lt;/div&gt; &lt;/div&gt; &lt;div class="parent parent3"&gt; &lt;div class="child child1"&gt;1&lt;/div&gt; &lt;div class="child child2"&gt;2&lt;/div&gt; &lt;div class="child child2"&gt;3&lt;/div&gt; &lt;div class="child child2"&gt;4&lt;/div&gt; &lt;div class="child child2"&gt;5&lt;/div&gt; &lt;/div&gt; &lt;div class="parent parent4"&gt; &lt;div class="child child1"&gt;1&lt;/div&gt; &lt;div class="child child2"&gt;2&lt;/div&gt; &lt;div class="child child2"&gt;3&lt;/div&gt; &lt;div class="child child2"&gt;4&lt;/div&gt; &lt;div class="child child2"&gt;5&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 可以发现如果一个&lt;div&gt; 里有多个 &lt;div&gt; 那都会挤在一行，而 flex-wrap 可以解决这个问题。 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .child &#123; width: 100px; height: 50px; background: white; margin: 10px; &#125; .parent &#123; margin-top: 10px; &#125; .parent1 &#123; display: flex; background: #ddd; flex-direction: row; flex-wrap: wrap; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent parent1"&gt; &lt;div class="child child1"&gt;1&lt;/div&gt; &lt;div class="child child2"&gt;2&lt;/div&gt; &lt;div class="child child3"&gt;3&lt;/div&gt; &lt;div class="child child4"&gt;4&lt;/div&gt; &lt;div class="child child5"&gt;5&lt;/div&gt; &lt;div class="child child6"&gt;6&lt;/div&gt; &lt;div class="child child7"&gt;7&lt;/div&gt; &lt;div class="child child8"&gt;8&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 这两个属性合在一起就是 flex-flow: row wrap; ，可以合在一起写。 justify-content 就是主轴方向对齐方式，这个也很好理解。 1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .child &#123; width: 100px; height: 50px; background: white; margin: 10px; &#125; .parent &#123; margin-top: 10px; &#125; .parent1 &#123; display: flex; background: #ddd; flex-flow: row nowrap; justify-content: space-between; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent parent1"&gt; &lt;div class="child child1"&gt;1&lt;/div&gt; &lt;div class="child child2"&gt;2&lt;/div&gt; &lt;div class="child child3"&gt;3&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; align-items 字面意思就是把子元素对齐。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .child &#123; width: 100px; background: white; margin: 10px; &#125; .parent &#123; margin-top: 10px; &#125; .parent1 &#123; display: flex; background: #ddd; flex-flow: row nowrap; justify-content: space-around; align-items: center; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent parent1"&gt; &lt;div class="child child1"&gt;1 &lt;br&gt;1 &lt;br&gt;1 &lt;br&gt;1 &lt;br&gt;1 &lt;br&gt; &lt;/div&gt; &lt;div class="child child2"&gt;2 &lt;br&gt;2 &lt;br&gt;2 &lt;br&gt; &lt;/div&gt; &lt;div class="child child3"&gt;3&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 这个动画里其实默认是 align-items: stretch; 。 align-content 用的比较少，了解就好。这个是用来控制行与行的空隙的。 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .child &#123; width: 100px; background: white; margin: 5px; height: 70px; &#125; .parent &#123; margin-top: 10px; &#125; .parent1 &#123; display: flex; background: #ddd; flex-flow: row wrap; height: 400px; align-content: space-between; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent parent1"&gt; &lt;div class="child child1"&gt;1&lt;/div&gt; &lt;div class="child child2"&gt;2&lt;/div&gt; &lt;div class="child child3"&gt;3&lt;/div&gt; &lt;div class="child child4"&gt;4&lt;/div&gt; &lt;div class="child child5"&gt;5&lt;/div&gt; &lt;div class="child child6"&gt;6&lt;/div&gt; &lt;div class="child child7"&gt;7&lt;/div&gt; &lt;div class="child child8"&gt;8&lt;/div&gt; &lt;div class="child child9"&gt;9&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; flex item 的属性 flex item 的属性 意思 flex-grow 增长比例（空间过多） flex-shrink 收缩比例（空间不够时） flex-basis 默认大小（一般不用） flex 上面是三个的缩写 order 顺序（代替双飞翼） align-self 自身的对齐方式 flex-grow 就是按比例分配，但是是按行算。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .child &#123; background: white; margin: 5px; height: 70px; &#125; .parent &#123; margin-top: 10px; &#125; .parent1 &#123; display: flex; background: #ddd; &#125; .child:nth-child(1) &#123; flex-grow: 2; &#125; .child:nth-child(2) &#123; flex-grow: 1; &#125; .child:nth-child(3) &#123; flex-grow: 3; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent parent1"&gt; &lt;div class="child child1"&gt;213472819371&lt;/div&gt; &lt;div class="child child2"&gt;273821973981&lt;/div&gt; &lt;div class="child child3"&gt;218973482112&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; flex-shrink 很少用，了解就好。 flex-basis 设置原始大小，也很少用。 123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .child &#123; background: white; margin: 5px; height: 70px; &#125; .parent &#123; margin-top: 10px; &#125; .parent1 &#123; display: flex; background: #ddd; &#125; .child:nth-child(1) &#123; flex-basis: 300px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent parent1"&gt; &lt;div class="child child1"&gt;2134728 1 9371&lt;/div&gt; &lt;div class="child child2"&gt;27382 197 3981&lt;/div&gt; &lt;div class="child child3"&gt;21897 348 2112&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; flex 就不举例子了，也就上面三个功能合在一起写的样子。 order 可以改变顺序。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .child &#123; background: white; margin: 5px; height: 70px; &#125; .parent &#123; margin-top: 10px; &#125; .parent1 &#123; display: flex; background: #ddd; &#125; .child:nth-child(1) &#123; flex-grow: 2; order: 3; &#125; .child:nth-child(2) &#123; flex-grow: 1; order: 2; &#125; .child:nth-child(3) &#123; flex-grow: 3; order: 1; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent parent1"&gt; &lt;div class="child child1"&gt;1&lt;/div&gt; &lt;div class="child child2"&gt;2&lt;/div&gt; &lt;div class="child child3"&gt;3&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; align-self 控制单个子元素。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .child &#123; background: white; margin: 5px; width: 100px; &#125; .parent &#123; margin-top: 10px; &#125; .parent1 &#123; display: flex; background: #ddd; justify-content: space-around; align-items: flex-start; &#125; .child:nth-child(3) &#123; align-self: center; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent parent1"&gt; &lt;div class="child child1"&gt;11111 &lt;br&gt;1111 &lt;br&gt;111 &lt;br&gt;11 &lt;br&gt;1 &lt;br&gt; &lt;/div&gt; &lt;div class="child child2"&gt;222 &lt;br&gt;22 &lt;br&gt;2 &lt;br&gt; &lt;/div&gt; &lt;div class="child child3"&gt;3&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 怎么用 Flex 布局写点东西手机页面布局（torbar + main + tabs）1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; box-sizing: border-box; &#125; ul &#123; list-style: none; &#125; .container &#123; height: 100vh; display: flex; flex-direction: column; &#125; header &#123; height: 100px; background: green; &#125; footer ul &#123; height: 100px; background: yellow; &#125; main &#123; flex-grow: 1; overflow: auto; &#125; footer&gt;ul &#123; display: flex; &#125; footer&gt;ul&gt;li &#123; background: red; width: 25%; height: 100%; border: 1px solid black; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="container"&gt; &lt;header&gt;header&lt;/header&gt; &lt;main&gt; &lt;!--很多字--&gt; &lt;/main&gt; &lt;footer&gt; &lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/footer&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 产品列表（ul&gt;li*9）1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; box-sizing: border-box; &#125; ul &#123; list-style: none; &#125; ul &#123; display: flex; flex-wrap: wrap; width: 350px; margin: auto; border: 1px solid black; justify-content: space-between; &#125; li &#123; width: 100px; height: 100px; background: #ddd; border: 1px solid red; margin: 10px 0; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; PC 页面布局12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; header &#123; height: 50px; background: #ddd; &#125; footer &#123; height: 50px; background: #ddd; &#125; .content &#123; display: flex; &#125; .content&gt;#aside1 &#123; width: 120px; background: #444; &#125; .content&gt;main &#123; height: 400px; flex: 1; background: red; &#125; .content&gt;#aside2 &#123; width: 100px; background: green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;header&gt;&lt;/header&gt; &lt;div class="content"&gt; &lt;aside id="aside1"&gt;&lt;/aside&gt; &lt;main&gt;&lt;/main&gt; &lt;aside id="aside2"&gt;&lt;/aside&gt; &lt;/div&gt; &lt;footer&gt;&lt;/footer&gt;&lt;/body&gt;&lt;/html&gt; 完美居中1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .parent &#123; height: 400px; background: #ddd; display: flex; justify-content: center; align-items: center; &#125; .child &#123; border: 1px solid red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="child"&gt; abcdefg &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 另一种布局 Gird 布局同时也是另一种布局，没用过但可以了解一下。 网格布局 - MDN 网格布局的基本概念 - MDN CSS 网格布局学习指南]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[响应式怎么搞]]></title>
    <url>%2F2018%2F02%2F12%2F%E5%93%8D%E5%BA%94%E5%BC%8F%E6%80%8E%E4%B9%88%E6%90%9E%2F</url>
    <content type="text"><![CDATA[响应式怎么搞手机 PC 用同一套 CSS，类似于 Bootstrap 这种 UI 框架一样。（ Build responsive, mobile-first projects on the web. ）专注移动端。 示例代码 媒体查询媒体查询始终离不开 @media 这个东西，是用来判断当前窗口是什么情况的。 比如像下面这个例子，屏幕宽度小于 800px 变红色。 12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; @media (max-width: 800px) &#123; body &#123; background: red; &#125; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 好了，响应式就那么多内容。下面做复杂点。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; @media (max-width: 320px) &#123; body &#123; background: red; &#125; &#125; @media (min-width: 321px) and (max-width: 375px) &#123; body &#123; background: orange; &#125; &#125; @media (min-width: 376px) and (max-width: 425px) &#123; body &#123; background: green; &#125; &#125; @media (min-width: 426px) and (max-width: 768px) &#123; body &#123; background: blue; &#125; &#125; @media (min-width: 769px) &#123; body &#123; background: purple; &#125; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 关于媒体查询有几点是值得注意的： 可以利用 &lt;link&gt; 标签的 media 来决定是否引用 CSS 。 1&lt;link rel="stylesheet" href="style.css" media="(max-width: 320px)"&gt; 没图不做前端一定要拿到图才能写页面，要不然很难写的。 接下来举一个响应式页面的例子。 https://www.smashingmagazine.com/ 手机和电脑的页面菜单栏不一样，电脑的菜单栏是长条的，手机的菜单栏是一个按钮。 试着简单实现一下这个导航栏的例子。 先做手机端和 PC 端都可以，看心情。但是会有 Mobile first 或者 Desktop first 这个概念，比如 Bootstrap 这个就是 Mobile first -&gt; 先设计手机端。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; * &#123; margin: 0; padding: 0; &#125; a &#123; color: inherit; text-decoration: none; &#125; ol, ul &#123; list-style: none; &#125; .logo &#123; width: 60px; height: 60px; background: grey; border-radius: 30px; &#125; .clearfix::after &#123; content: ''; display: block; clear: both; &#125; header &#123; padding: 10px; position: relative; &#125; .mobile-nav &#123; display: none; background: gray; margin-top: 10px; &#125; .mobile-nav.active &#123; display: flex; justify-content: space-between; &#125; header button &#123; position: absolute; right: 20px; top: 30px; &#125; .desktop-nav &#123; display: none; &#125; @media (min-width: 451px) &#123; header button &#123; display: none; &#125; .mobile-nav, .mobile-nav.active &#123; display: none; &#125; .desktop-nav &#123; display: block; &#125; header &#123; display: flex; align-items: center; &#125; header .desktop-nav &#123; display: flex; margin-left: 20px; &#125; header .desktop-nav li &#123; margin: 0 20px; &#125; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;header&gt; &lt;div class="logo"&gt;&lt;/div&gt; &lt;button id="xx"&gt;菜单&lt;/button&gt; &lt;ul id="yy" class="mobile-nav"&gt; &lt;li&gt; &lt;a href="#"&gt;导航1&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#"&gt;导航2&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#"&gt;导航3&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#"&gt;导航4&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#"&gt;导航5&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul class="desktop-nav"&gt; &lt;li&gt; &lt;a href="#"&gt;导航1&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#"&gt;导航2&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#"&gt;导航3&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#"&gt;导航4&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#"&gt;导航5&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/header&gt; &lt;script&gt; xx.onclick = function () &#123; yy.classList.toggle('active') &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 这样就做出来了一个比较简单的响应式。 当然现在大部分的网页都是通过后端来判断 UserAgent 来加载页面，你看淘宝就是一个例子。（taobao.com 和 m.taobao.com） 这种两套 HTML 是比较常见的，因为如果是做响应式的话，HTML 的代码会非常多，所以拆成两个页面写两套代码会比较好。当然也会和工作方面有关，因为很有可能做手机端和做 PC 端是两个部门，各做各的。 而且善用 display: block; 也很重要。可以看看大部分的响应式都是利用 display: block; 来实现的，例如这个博客。 meta viewport1&lt;meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"&gt; 这一句是必须要加的，是禁止缩放的意思，不允许手机伪装成 980px 缩放页面。 可以试试不加这一句话然后在 console 试试 document.documentElement.clientWidth 看看宽度是多少。 meta:vp 可以直接生成。 移动端的特点Flex 布局用得比较多。 交互方式也不一样。 没有 hover 有 touch 事件（不能监听 click 事件） 没有 resize（不能放大和缩小） 没有滚动条]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[icon 的 N 种搞法]]></title>
    <url>%2F2018%2F02%2F11%2Ficon%20%E7%9A%84%20N%20%E7%A7%8D%E6%90%9E%E6%B3%95%2F</url>
    <content type="text"><![CDATA[icon 的 N 种搞法icon 是怎么搞出来的。 示例代码 img 搞法黑话叫切图。 在 iconfont 把微信微博 QQ 的 icon 下载为 PNG 格式。 放到 GIMP 那里对齐成这样，保存。 值得注意的是 GIMP 要保存成 .xcf 格式，Photoshop 保存成 .psd 格式。 或者 Export 成 PNG 格式。 如果是 .xcf 裁剪单独 icon 操作如下。 不过我个人更倾向于把所有 icon 放在一起。 把所有 icon 做成下面这个样子。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .box &#123; float: left; position: relative; left: 50%; &#125; .clearfix &#123; zoom: 1; &#125; .clearfix::after &#123; content: ''; clear: both; visibility: hidden; &#125; .icons &#123; width: 100px; height: 100px; overflow: hidden; &#125; .box div &#123; float: left; margin: 0 10px; position: relative; right: 50%; &#125; .qq img &#123; position: relative; right: 0px; &#125; .weixin img &#123; position: relative; right: 400px; &#125; .weibo img &#123; position: relative; right: 200px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="box clearfix"&gt; &lt;div class="icons qq"&gt; &lt;img src="./xxx.png" alt="qq"&gt; &lt;/div&gt; &lt;div class="icons weixin"&gt; &lt;img src="./xxx.png" alt="weixin"&gt; &lt;/div&gt; &lt;div class="icons weibo"&gt; &lt;img src="./xxx.png" alt="weibo"&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 反正我是很不喜欢切图的，还不如直接用 icon 来的快。 因为 GIMP 切出来的图有点问题，我直接切成雪碧图了 背景流搞法就是利用背景图来做 icon，优点嘛，就是不受 div 影响，不会拉伸啥的。利用 background-position 来移位置。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .box &#123; text-align: center; &#125; .icons .icon-qq &#123; margin: 5px 25px; border: 1px solid red; display: inline-block; width: 100px; height: 100px; background: transparent url('./img/xxx.png') no-repeat; background-position: 0px 0px; &#125; .icons .icon-weibo &#123; margin: 5px 25px; border: 1px solid red; display: inline-block; width: 100px; height: 100px; background: transparent url('./img/xxx.png') no-repeat; background-position: -200px 0px; &#125; .icons .icon-weixin &#123; margin: 5px 25px; border: 1px solid red; display: inline-block; width: 100px; height: 100px; background: transparent url('./img/xxx.png') no-repeat; background-position: -400px 0px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="box icons"&gt; &lt;div class="icon-qq"&gt;&lt;/div&gt; &lt;div class="icon-weibo"&gt;&lt;/div&gt; &lt;div class="icon-weixin"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 其实雪碧图不一定要用 Photoshop 或者 GIMP 来切，通常上会有 CSS Sprites Generator 或者用 CSS Sprites cli 。基本上 Google 一大堆教程，只要不是傻子很快就能学会的。 iconfont 搞法用 iconfont 整三个图标添加到项目去 点击生成在线链接，然后引入。 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; @font-face &#123; font-family: 'iconfont'; /* project id 565963 */ src: url('//at.alicdn.com/t/font_565963_8sd26i2z2ci0be29.eot'); src: url('//at.alicdn.com/t/font_565963_8sd26i2z2ci0be29.eot?#iefix') format('embedded-opentype'), url('//at.alicdn.com/t/font_565963_8sd26i2z2ci0be29.woff') format('woff'), url('//at.alicdn.com/t/font_565963_8sd26i2z2ci0be29.ttf') format('truetype'), url('//at.alicdn.com/t/font_565963_8sd26i2z2ci0be29.svg#iconfont') format('svg'); &#125; .icons &#123; font-family: iconfont; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="icons"&gt; &amp;#xe622;&amp;#xe623;&amp;#xe655; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 当然也可以用 CSS 引入。（注意的是 &amp;#xe622 要换成 \e622 ，因为 &amp;#x 等于 \） 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; @font-face &#123; font-family: 'iconfont'; /* project id 565963 */ src: url('//at.alicdn.com/t/font_565963_8sd26i2z2ci0be29.eot'); src: url('//at.alicdn.com/t/font_565963_8sd26i2z2ci0be29.eot?#iefix') format('embedded-opentype'), url('//at.alicdn.com/t/font_565963_8sd26i2z2ci0be29.woff') format('woff'), url('//at.alicdn.com/t/font_565963_8sd26i2z2ci0be29.ttf') format('truetype'), url('//at.alicdn.com/t/font_565963_8sd26i2z2ci0be29.svg#iconfont') format('svg'); &#125; .icons &#123; font-family: iconfont; &#125; .xxx::before &#123; content: '\e622'; &#125; .yyy::before &#123; content: '\e623'; &#125; .zzz::before &#123; content: '\e655'; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="icons xxx"&gt;&lt;/div&gt; &lt;div class="icons yyy"&gt;&lt;/div&gt; &lt;div class="icons zzz"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 下面来看看 CSS Font class 的写法。 这个的好处是，CSS icon 是一种字体，可以用 font-size 来调整字体。 123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;link rel="stylesheet" href="//at.alicdn.com/t/font_565963_8sd26i2z2ci0be29.css"&gt; &lt;style&gt; .iconfont &#123; font-size: 100px; color: yellow; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;span class="iconfont icon-weixin"&gt;&lt;/span&gt; &lt;span class="iconfont icon-qq"&gt;&lt;/span&gt; &lt;span class="iconfont icon-weibo"&gt;&lt;/span&gt;&lt;/body&gt;&lt;/html&gt; 还有一种使用 JS 来引入 icon，是这样的。（实际上就是 SVG ） 在 iconfont 里基本上有颜色的图标都是 SVG。 可以打开那个 JS 文件，可以发现是用 JS 写 SVG。而且引入这个 JS 文件可以发现 SVG 已经躺在 HTML 页面里了。 按照文档就可以愉快的使用了。 123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;script src="//at.alicdn.com/t/font_566506_su1rg4kx92ne9udi.js"&gt;&lt;/script&gt; &lt;style type="text/css"&gt; .icon &#123; width: 1em; height: 1em; vertical-align: -0.15em; fill: currentColor; overflow: hidden; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;svg style="width: 100px; height: 100px;" class="icon" aria-hidden="true"&gt; &lt;use xlink:href="#icon-bianfu"&gt;&lt;/use&gt; &lt;/svg&gt; &lt;svg class="icon" aria-hidden="true"&gt; &lt;use xlink:href="#icon-bianselong"&gt;&lt;/use&gt; &lt;/svg&gt; &lt;svg class="icon" aria-hidden="true"&gt; &lt;use xlink:href="#icon-baitu"&gt;&lt;/use&gt; &lt;/svg&gt; &lt;svg class="icon" aria-hidden="true"&gt; &lt;use xlink:href="#icon-daxiang"&gt;&lt;/use&gt; &lt;/svg&gt;&lt;/body&gt;&lt;/html&gt; 而且如果是没用颜色的 icon（像上面的 QQ 微信微博），可以用 CSS 来改颜色或者描边（如 fill: red; 和 stroke: black; stroke-width: 10px;） 最后一种搞法：CSS 就是干这种搞法比较高阶，通常新手是玩不来的。 CSS ICON – project by Wenting Zhang 比如说画一个放大镜为例子 1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .magnifier &#123; display: inline-block; width: 20px; height: 20px; border: 1px solid red; border-radius: 50%; position: relative; &#125; .magnifier::after &#123; content: ''; display: inline-block; width: 10px; border-top: 1px solid red; position: absolute; bottom: 0; left: 100%; transform: rotate(45deg); margin-left: -3px; margin-bottom: -1px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;span class="magnifier"&gt;&lt;/span&gt;&lt;/body&gt;&lt;/html&gt; 所以，万图皆可 CSS （笑） 所以可以参考一下 Wenting Zhang 的 icon 学一学。]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[堆叠上下文]]></title>
    <url>%2F2018%2F02%2F09%2F%E5%A0%86%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87%2F</url>
    <content type="text"><![CDATA[堆叠上下文http://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/ 堆叠顺序举个例子，先看看下面这个代码。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; .parent&#123; width: 200px; height: 200px; border: 10px solid rgba(255,1,1,0.5); padding: 15px; margin: 15px; background: yellow; text-indent: -20px; color: blue; &#125; .child&#123; height: 50px; background: purple; margin-top: -20px; color: green; &#125; .float&#123; width: 30px; height: 70px; background: orange; float: left; color: red; &#125; .relative&#123; width: 100px; height: 100px; background: teal; position: relative; margin-top: -10px; z-index: 1; &#125; .relative2&#123; width: 100px; height: 100px; background: olive; position: relative; margin-top: -50px; &#125; .relative3&#123; width: 100px; height: 100px; background: aqua; position: relative; margin-top: 20px; z-index: -1; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; ████ &lt;div class="float"&gt; ████ &lt;/div&gt; &lt;div class="child"&gt; ████ ████ ████ ████ &lt;/div&gt; &lt;div class="relative"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="parent"&gt; &lt;div class="relative"&gt;&lt;/div&gt; &lt;div class="relative2"&gt;&lt;/div&gt; &lt;div class="relative3"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 变成下面这张图。 顺序如下 负 z-index background border div / 块级元素 浮动元素 文字 / 内联 （浮动元素文字 &lt; 父元素文字 &lt; 子元素文字） position （同时 z-index 是 0） 正 z-index 注意 z-index 只能对加了 position 的属性生效。 z-index: auto 等于 z-index: 0 。 不管是 relative 还是 absolute 他们也是按照 z-index 的顺序排序的。 堆叠上下文注意这个例子 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; .parent&#123; width: 200px; height: 200px; border: 5px solid rgba(255,0,0,1); padding: 15px; margin: 15px; background: #000; position: relative; z-index: 0; /*注意这里，本来是z-index: auto*/ &#125; .child&#123; height: 20px; background: purple; color: black; &#125; .float&#123; width: 50px; height: 30px; background: blue; float: left; color: red; &#125; .relative&#123; width: 100px; height: 100px; background: orange; position: relative; &#125; .fu&#123; width: 100px; height: 100px; background: green; position: relative; z-index: -1; margin-top: -50px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;span&gt;████&lt;/span&gt; &lt;div class="child"&gt;&lt;/div&gt; &lt;div class="relative"&gt;&lt;/div&gt; &lt;div class="fu"&gt;&lt;/div&gt; &lt;div class="float"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 效果像这样。 绿色方块跑上来了，但是被黄色方块盖住了。 不要橙色方块 1234567.relative&#123; width: 100px; height: 100px; background: orange; position: relative; display: none;&#125; 发现紫色方块也盖不住。 所以说，如果把父级块级元素被定位了，那负 z-index 就会浮上来，但是在子级块级元素的后面。 这，就是堆叠上下文。 重要！ 可以这样理解，background 那个盒子已经成为了一个新的部门，脱离了主部门，所以 background 那个盒子和主盒子不是一个部门，而负 z-index 属于主部门，所以就跟着主部门浮上来了。 这个负 z-index 是有可能会变的 https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context MDN： 文档中的层叠上下文由满足以下任意一个条件的元素形成： 根元素 (HTML), z-index 值不为 “auto”的 绝对/相对定位， 一个 z-index 值不为 “auto”的 flex 项目 (flex item)，即：父元素 display: flex|inline-flex， opacity 属性值小于 1 的元素（参考 the specification for opacity）， transform 属性值不为 “none”的元素， mix-blend-mode 属性值不为 “normal”的元素， filter值不为“none”的元素， perspective值不为“none”的元素， isolation 属性被设置为 “isolate”的元素， position: fixed 在 will-change 中指定了任意 CSS 属性，即便你没有直接指定这些属性的值（参考 这篇文章） -webkit-overflow-scrolling 属性被设置 “touch”的元素 张鑫旭的解释： 层叠上下文元素有如下特性： 层叠上下文的层叠水平要比普通元素高（原因后面会说明）； 层叠上下文可以阻断元素的混合模式（见此文第二部分说明）； 层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的层叠上下文。 每个层叠上下文和兄弟元素独立，也就是当进行层叠变化或渲染的时候，只需要考虑后代元素。 每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。 翻译成真实世界语言就是： 当官的比老百姓更有机会面见圣上； 领导下去考察，会被当地官员阻隔只看到繁荣看不到真实民情； 一个家里，爸爸可以当官，孩子也是可以同时当官的。但是，孩子这个官要受爸爸控制。 自己当官，兄弟不占光。有什么福利或者变故只会影响自己的孩子们。 每个当官的都有属于自己的小团体，当家眷管家发生摩擦磕碰的时候（包括和其他官员的家眷管家），都是要优先看当官的也就是主子的脸色。 所以说上面这个现象可以用 MDN 的这句话解释 z-index 值不为 “auto” 的绝对/相对定位， MDN 的几句话比较重要，不用记，用问题再查。 再举个几个例子 opacity 属性值小于 1 的元素（参考 the specification for opacity） 说白了就是，所见即所得。 堆叠上下文对 z-index 的影响123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; .parent&#123; width: 200px; height: 200px; border: 5px solid rgba(255,0,0,1); padding: 15px; margin: 15px; background: #000; position: relative; z-index: 1; &#125; .relative&#123; width: 100px; height: 100px; background: orange; position: relative; border: 1px solid red; &#125; .a1, .b1&#123; background: green; &#125; .b1&#123; background: blue; margin-top: -90px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="a relative"&gt;a &lt;div class="a1"&gt;a1&lt;/div&gt; &lt;/div&gt; &lt;div class="b relative"&gt;b &lt;div class="b1"&gt;b1&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 通过上面 MDN 介绍的堆叠上下文，很轻易的得出。 根元素 (HTML), 谁后出现，谁盖住谁。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; .parent&#123; width: 200px; height: 200px; border: 5px solid rgba(255,0,0,1); padding: 15px; margin: 15px; background: #000; position: relative; z-index: 1; &#125; .relative&#123; width: 100px; height: 100px; background: orange; position: relative; border: 1px solid red; &#125; .a1, .b1&#123; background: green; position: relative; &#125; .a1&#123; z-index: 2; &#125; .b1&#123; background: blue; margin-top: -90px; z-index: 0; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="a relative"&gt;a &lt;div class="a1"&gt;a1&lt;/div&gt; &lt;/div&gt; &lt;div class="b relative"&gt;b &lt;div class="b1"&gt;b1&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 但是如果这个基础上加上 z-index 就会变成这样。 这个还是很好理解的，但是如果在 a1 和 b1 加上 z-index: 1 ，又会变成 HTML 产生的堆叠上下文。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; .parent&#123; width: 200px; height: 200px; border: 5px solid rgba(255,0,0,1); padding: 15px; margin: 15px; background: #000; position: relative; z-index: 1; &#125; .relative&#123; width: 100px; height: 100px; background: orange; position: relative; border: 1px solid red; &#125; .a1, .b1&#123; background: green; position: relative; &#125; .a1&#123; z-index: 2; &#125; .b1&#123; background: blue; margin-top: -90px; z-index: 0; &#125; .a&#123; position: relative; z-index: 1; &#125; .b&#123; position: relative; z-index: 1; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="a relative"&gt;a &lt;div class="a1"&gt;a1&lt;/div&gt; &lt;/div&gt; &lt;div class="b relative"&gt;b &lt;div class="b1"&gt;b1&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; b1 和 a1 是平级的，但是 b1 干过了 a1 。]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[宽度与高度]]></title>
    <url>%2F2018%2F02%2F07%2F%E5%AE%BD%E5%BA%A6%E4%B8%8E%E9%AB%98%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[宽度与高度CSS 最好不要写 height 和 width 。 div 的高度 文档流（Normal Flow） 块级元素的宽高 一个 div 里面什么都不写，大家都知道这个盒子高度肯定是零。 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; div&#123; border: 1px solid red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; ​ 但是如果里面有字呢？细心的话会发现，字的上下有一个行高。实际上这个行高是字体设计师的建议行高 。每一种字体的建议行高都是不一样的。想下面这个例子默认字体 Sans 行高是 1.45（29/20） 。 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; div&#123; border: 1px solid red; font-size: 20px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; 1 &lt;br&gt; 2 &lt;br&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 而通过下面这个例子可以看出，块级元素的高是由 line-height 确定的。 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; div&#123; border: 1px solid red; font-size: 200px; line-height: 20px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; 1 &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 从上面几个例子可以看出，div 的高度是由内联元素或者行高来确定的。 下面来看一个只用中国会发生的问题。 性对齐联，名对齐式。 当然很直接的一个方法就是在姓名之间加空格，但是空格无论你打多少个都只会显示一个空格而已，所以就要用到空格占位符。 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; div&#123; border: 1px solid red; font-size: 20px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; 姓&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;名 &lt;br&gt; 联系方式 &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 这样写其实是有风险的，因为每个字体的空格宽度都是不一样的。所以我们要用下面这个写法。 1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; div&#123; border: 1px solid red; font-size: 20px; &#125; span&#123; border: 1px solid green; display: inline-block; width: 5em; text-align: justify; /*对齐的核心 CSS*/ line-height: 20px; /*一定要写死*/ height: 20px; /*一定要写死*/ overflow: hidden; /*隐藏蓝线*/ &#125; span::after&#123; /*这里的作用是把文字下面加多一行文字*/ content: ''; display: inline-block; width: 100%; /*这一行的文字宽度和上面一样*/ border: 1px solid blue; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;span&gt;姓名&lt;/span&gt; &lt;br&gt; &lt;span&gt;联系方式&lt;/span&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 还有一点要注意的是，元素和元素之间的回车也会是一个空格。 123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; ul&#123; margin: 0; padding: 0; list-style: none; border: 1px solid green; &#125; ul li&#123; /* display: inline-block; 这样写是肯定有空隙的 */ float: left; /*浮动没有空隙*/ border: 1px solid red; &#125; .clearfix:after&#123; content: ''; display: block; clear: both; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;ul class="clearfix"&gt; &lt;!--每个 item 之间都有一个回车，空格就是这个回车搞出来的--&gt; &lt;li&gt;item1&lt;/li&gt; &lt;li&gt;item2&lt;/li&gt; &lt;li&gt;item3&lt;/li&gt; &lt;li&gt;item4&lt;/li&gt; &lt;li&gt;item5&lt;/li&gt; &lt;li&gt;item6&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 说了那么多，那文档流到底是个啥玩意？ 自动换行，就叫文档流。 为什么会超出行呢？ 因为浏览器会把连起来的字当成一个单词。 怎么可以使一个字断开呢？用 word-break: break-all; 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; div&#123; border: 1px solid red; word-break: break-all; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div&gt;hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 多行文字溢出 文字溢出省略（多行） 123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; div&#123; border: 1px solid red; white-space: nowrap; /*不换行*/ overflow: hidden; text-overflow: ellipsis; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; 很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字 &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 这个只是单行文本，那多行文本呢？ 1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; div&#123; border: 1px solid red; overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 3; -webkit-box-orient: vertical; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; 很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字 &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 不会搜就可以了。 文字垂直居中123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; div&#123; border: 1px solid red; line-height: 24px; padding: 25px; text-align: center; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; 很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字很多字 &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 切记不要写死 height 。 margin 合并举个例子 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; body&#123; border: 1px solid black; &#125; .son&#123; border: 10px solid red; padding: 10px; margin: 10px; &#125; .dad&#123; outline: 1px solid green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="dad"&gt; &lt;div class="son"&gt; 111 &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 如果父元素没有什么挡住子元素，外边距就会合并。 这一点的确要注意，因为有可能写着写着代码高度突然变高的原因就是因为外边距合并。 消除合并的方法 border padding overflow: hidden; 总结与其他实例主要有两点： 有内联元素的时候高度是如何确定的？ 有块级元素的时候高度是如何确定的？ 那有内联元素和块级元素呢？ 12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; body&#123; border: 1px solid black; &#125; .son&#123; border: 10px solid red; padding: 10px; margin: 10px; &#125; .dad&#123; outline: 5px solid green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="dad"&gt; text1 &lt;div class="son"&gt; 111 &lt;/div&gt; text2 &lt;div class="son"&gt; 111 &lt;/div&gt; text3 &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 可以看出会自动包裹内联元素，也解决了外边距合并。 所以说，div 的高度是它里面有多少东西有关的。 脱离文档流是什么呢？ 就是高度不要算上我 123456789101112131415161718192021222324252627282930313233343536&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; body&#123; border: 1px solid black; &#125; .son&#123; border: 10px solid red; padding: 10px; margin: 10px; &#125; .dad&#123; outline: 5px solid green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="dad"&gt; text1 &lt;div class="son" style="float: left; background: blue;"&gt; &lt;!--&lt;div class="son" style="position: absolute; background: blue;"&gt;--&gt; &lt;!--&lt;div class="son" style="position: fixed; background: blue;"&gt;--&gt; 111 &lt;/div&gt; text2 &lt;div class="son"&gt; 111 &lt;/div&gt; text3 &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 而且这个盒子已经是脱离了，不管怎么移动都不会影响到其他元素。 这里再说说垂直居中 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; body&#123; border: 1px solid black; &#125; .son&#123; border: 5px solid red; width: 100px; padding: 10px; margin: 0 auto; &#125; .dad&#123; outline: 3px solid green; padding: 100px 0; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="dad"&gt; &lt;div class="son"&gt; 111 &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 这是一种比较常见的垂直居中，但是有的时候会有高度固定的垂直居中的需求。（例如全屏居中） 12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; body&#123; margin: 0; &#125; .son&#123; border: 5px solid red; width: 100px; padding: 10px; margin: auto; position: absolute; top: 0; left: 0; right: 0; bottom: 0; height: 50px; /*这里一定要定高，非常麻烦*/ &#125; .dad&#123; border: 3px solid green; height: 100vh; box-sizing: border-box; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="dad"&gt; &lt;div class="son"&gt; 111 &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 如果中间文字不定高呢？只能用 flex 了。 123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; body&#123; margin: 0; &#125; .son&#123; border: 5px solid red; width: 100px; padding: 10px; &#125; .dad&#123; border: 3px solid green; height: 100vh; box-sizing: border-box; display: flex; justify-content: center; align-items: center; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="dad"&gt; &lt;div class="son"&gt; 111 &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 如果 div 盒子外有文档 123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; body&#123; margin: 0; &#125; .son&#123; border: 5px solid red; width: 100px; padding: 10px; &#125; .dad&#123; height: 100vh; box-sizing: border-box; display: flex; justify-content: center; align-items: center; background: rgba(0,0,0,0.5); color: white; position: fixed; width: 100%; top: 0; left: 0; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; sadas gdsajadgas shakdhasdjkha sadhjkash &lt;div class="dad"&gt; &lt;div class="son"&gt; 111 &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; span 和 div 的高度不会互相影响 1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; span&#123; border: 1px solid red; padding: 20px; margin: 20px; &#125; div&#123; border: 1px solid green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;span&gt;111&lt;/span&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 一比一的 div 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; div&#123; padding-top: 100%; border: 1px solid green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS 学习思路]]></title>
    <url>%2F2018%2F02%2F05%2FCSS%20%E5%AD%A6%E4%B9%A0%E6%80%9D%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[CSS 学习思路CSS 是怎么来的先想一个问题，怎么把一个页面的背景有颜色，并且有一个&lt;h1&gt;的标题并且居中，标题是红色。 在没有 CSS 的时候，HTML 是有自己的一套办法的。 1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt;&lt;/head&gt;&lt;body bgcolor="yellow"&gt; &lt;h1&gt;&lt;center&gt;&lt;font color="red"&gt;标题&lt;/font&gt;&lt;/center&gt;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 上面的 bgcolor=&quot;yellow&quot; 、 &lt;center&gt; 和 color=&quot;red&quot; 都是 HTML 的内置方法 这样内联写 CSS 不够美观，而且很难看。 那用 CSS 写的确是很方便，就像指哪打哪一样。 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; body &#123; background-color: yellow; &#125; h1 &#123; color: red; text-align: center; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;标题&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 做到一样的效果，但是逻辑更加清晰了。 当然这样写也不太好，CSS 写在 HTML 挤在一堆会看的眼疼的（想起大学在社团写的第一个页面，CSS 和 HTML 写在一起先写完 HTML 的标签，然后又滚上去 &lt;style&gt; 里面写 CSS ，体验真的很不友好 hhh） 解决办法也很明显： &lt;link&gt; 引入 CSS。 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/2.10.0/github-markdown.css"&gt;&lt;/head&gt;&lt;body class="markdown-body"&gt; &lt;h1&gt;大标题&lt;/h1&gt; &lt;h2&gt;小标题&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;项目1&lt;/li&gt; &lt;li&gt;项目2&lt;/li&gt; &lt;li&gt;项目3&lt;/li&gt; &lt;li&gt;项目4&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 在 &lt;link&gt; 也可以加上媒体查询 12&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/2.10.0/github-markdown.css" media="print"&gt;&lt;!-- 打印的时候使用 github-markdown-css --&gt; 打印前的普通样子 按上打印之后自动加上样式 CSS 为什么难学因为效果基本靠抄（像我这种半吊子，直接就上 codepen.io 一搜一抄就好），抄完就不管了（肯定有很多人想我这样…），要么就用现成的（Bootstrap / elementUI）。结果就像现在这样只会 JS 不会 CSS 。 CSS经常会有很多地方冲突，举几个例子： 各属性之间互相影响 margin &amp; border 先看看这个例子 123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; .demo1 &#123; border: 1px solid red; height: 100px; margin: 10px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="demo1"&gt;&lt;/div&gt; &lt;div style="border-top: 0.1px solid green"&gt;&lt;/div&gt; &lt;div class="demo1"&gt;&lt;/div&gt; &lt;div class="demo1"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 可以看到下面两个 div 盒子之间的 margin 是合在一起的（外边距合并），而上两个盒子之间加一个盒子加上 border 浏览器就会以为多了一个盒子。（其实我觉得这个也不难理解，因为中间这个盒子如果不加 border 加文本也会变成一个盒子，上下自动添加 margin 。） 但是特别的东西来了，看看下面这个代码。 123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; .demo1 &#123; border: 1px solid red; height: 100px; margin: 10px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="demo1"&gt;&lt;/div&gt; &lt;div style="display: table;"&gt;&lt;/div&gt; &lt;div class="demo1"&gt;&lt;/div&gt; &lt;div style="display: inline;"&gt;&lt;/div&gt; &lt;div class="demo1"&gt;&lt;/div&gt; &lt;div style="display:flex;"&gt;&lt;/div&gt; &lt;div class="demo1"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 这个 display:table; 居然可以被当成是一个盒子（而 display: inline; 不能当成盒子， display:flex; 又可以当成盒子。） 所以从这些例子可以看出只要加了 border 就会影响到 margin，而且经过上面的这些实验也发现不止 border 会有影响，像 display 的某些属性也会影响到 margin 。 12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; .parent &#123; border-top: 1px solid green; /*这一句可以删掉看看效果*/ background-color: yellow; &#125; .child &#123; height: 100px; border: 1px solid red; margin-top: 100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="child"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 可以影响到 margin 的属性其实还有很多，可以一个一个去试试。 小圆点 &amp; display 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; li &#123; display: block; &#125; /* li &#123; display: list-item; &#125; */ /* li &#123; display: inline; &#125; */ &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;ul&gt; &lt;li&gt;item1&lt;/li&gt; &lt;li&gt;item2&lt;/li&gt; &lt;li&gt;item3&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; ​ 对 li 设置 display 的其他属性会覆盖掉 li 的原生 CSS display: list-item （我猜的）。这个很难理解只能死背。 position: absolute &amp; display: inline 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; .parent &#123; background: yellow; height: 100px; position: relative; &#125; .child &#123; display: inline; border: 1px solid red; position: absolute; bottom: 0; right: 0; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="child"&gt;内联样式&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 这里的主要问题是 display: inline 在 position: absolute 的影响下竟然变成了 display: block 。 各元素之间互相影响 position: fixed &amp; transform 1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; .parent &#123; background: yellow; height: 100px; position: relative; transform: scale(0.9); /*注意这里*/ &#125; /*脑补很多代码*/ .xxxx&#123;&#125; .xxxx&#123;&#125; .xxxx&#123;&#125; .xxxx&#123;&#125; .child &#123; display: inline; border: 1px solid red; position: fixed; /*注意这里*/ bottom: 0; left: 0; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="child"&gt;内联样式&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 这个就很明显了，用了 position: fixed 那 child 的 div 应该是在左下角，但是加了 transform: scale(0.9) 就变成了想绝对定位的东西，这个的确是挺难理解的。 ​ float 影响 inline 元素 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; .parent &#123; background: yellow; height: 100px; &#125; .float &#123; background: rgba(255,0,0,0.5); width: 100px; height: 60px; float: left; &#125; .child &#123; width: 300px; height: 50px; background: white &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="float"&gt;浮动&lt;/div&gt; &lt;div class="child"&gt;我是文字&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; ​ 为什么浮动不会影响 child 里面的文字呢？这个也是很难理解的。 虽然方老师说 CSS 很难理解，但是对于文科出身的我其实没事么难度（倒是 JS 挺难学的…）。 CSS 的套路但是应付平时工作的话只用记点套路就好了，常用的东西来来去去就那么点东西。 套路 布局（指的是两栏三栏布局） 可以分 PC 端和 Mobile 端。而 PC 端分为 IE8 和 chrome，IE8 用 Float 布局，chrome 和 Mobile 端用 Flex 布局就好。 Float 布局 两栏 1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; .c &#123; width: 960px; margin: 0 auto; &#125; .l &#123; float: left; width: 280px; height: 500px; background-color: #f1f1f1; box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12)!important; &#125; .r &#123; float: left; width: 630px; height: 1000px; margin-left: 50px; background-color: #f1f1f1; box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12)!important; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="c"&gt; &lt;div class="l"&gt;1111&lt;/div&gt; &lt;div class="r"&gt;2222&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 三栏 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; .c &#123; width: 960px; margin: 0 auto; &#125; .l &#123; float: left; width: 200px; height: 700px; background-color: #f1f1f1; box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12)!important; &#125; .m &#123; float: left; width: 500px; height: 1000px; margin-left: 30px; background-color: #f1f1f1; box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12)!important; &#125; .r &#123; float: left; width: 200px; height: 500px; margin-left: 30px; background-color: #f1f1f1; box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12)!important; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="c"&gt; &lt;div class="l"&gt;1111&lt;/div&gt; &lt;div class="m"&gt;3333&lt;/div&gt; &lt;div class="r"&gt;2222&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; Flex 布局 两栏 1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; .c &#123; width: 960px; margin: 0 auto; display: flex; flex-flow: row; &#125; .l &#123; width: 280px; height: 500px; background-color: #f1f1f1; box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12)!important; &#125; .r &#123; flex: 1; height: 1000px; margin-left: 50px; background-color: #f1f1f1; box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12)!important; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="c"&gt; &lt;div class="l"&gt;1111&lt;/div&gt; &lt;div class="r"&gt;2222&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 三栏 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; .c &#123; width: 960px; margin: 0 auto; display: flex; flex-flow: row; &#125; .l &#123; width: 200px; height: 700px; background-color: #f1f1f1; box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12)!important; &#125; .m &#123; flex: 0.7; height: 1000px; margin-left: 30px; background-color: #f1f1f1; box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12)!important; &#125; .r &#123; flex: 0.3; height: 500px; margin-left: 30px; background-color: #f1f1f1; box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12)!important; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="c"&gt; &lt;div class="l"&gt;1111&lt;/div&gt; &lt;div class="m"&gt;3333&lt;/div&gt; &lt;div class="r"&gt;2222&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 水平居中 子元素宽度不确定（ margin-left 和 margin-right 要计算） 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; .child&#123; margin-left: 20px; margin-right: 20px; background: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="child"&gt;加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 子元素 300px 的宽度 12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; .child&#123; margin-left: auto; margin-right: auto; width: 300px; height: 100px; background: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="child"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; .parent&#123; text-align: center; &#125; .child&#123; display: inline-block; width: 300px; height: 100px; background: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="child"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 垂直居中 子元素高度确定 123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; .parent&#123; border: 1px solid black; padding-top: 20px; padding-bottom: 20px; &#125; .child&#123; margin-left: auto; margin-right: auto; width: 300px; height: 100px; background: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="child"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 子元素高度不确定 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; .parent&#123; border: 1px solid black; padding-top: 20px; padding-bottom: 20px; &#125; .child&#123; margin-left: auto; margin-right: auto; width: 300px; background: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="child"&gt;加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试加字试试&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 父元素高度确定（烂代码，尽量避免） 兼容 IE8 123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; .parent&#123; display: table-cell; vertical-align: middle; height: 500px; border: 1px solid black; &#125; .child&#123; margin: 100px; width: 300px; height: 100px; background: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="child"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 其他用 Flex 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt; &lt;style&gt; .parent&#123; display: flex; align-items: center; border: 1px solid black; height: 500px; &#125; .child&#123; margin-left: auto; margin-right: auto; width: 300px; height: 100px; background: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="parent"&gt; &lt;div class="child"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 工具 CSS 3 Generator 随便点开一个就好，这里就不细说了。 CSS 资料http://cndevdocs.com/ CSS 实际上是性价比很低的一个东西，大多数公司不需要 CSS 那么厉害的前端。]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
</search>
