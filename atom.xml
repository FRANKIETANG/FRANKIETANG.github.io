<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>付林恒的博客</title>
  
  <subtitle>要做最咸的鱼</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-07T14:05:10.695Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Frankie Tang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>补基础：React-Redux-ES6-webpack-babel</title>
    <link href="http://yoursite.com/2017/11/05/%E8%A1%A5%E5%9F%BA%E7%A1%80%EF%BC%9AReact-Redux-ES6-webpack-babel/"/>
    <id>http://yoursite.com/2017/11/05/补基础：React-Redux-ES6-webpack-babel/</id>
    <published>2017-11-05T13:19:16.000Z</published>
    <updated>2017-11-07T14:05:10.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="补基础：React-Redux-ES6-webpack-babel"><a href="#补基础：React-Redux-ES6-webpack-babel" class="headerlink" title="补基础：React-Redux-ES6-webpack-babel"></a>补基础：React-Redux-ES6-webpack-babel</h1><p><a href="https://www.docschina.org/" target="_blank" rel="external">印记中文</a></p><p>先看一遍中文文档，第二遍中英文对着看，第三遍才看英文文档</p><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p><a href="https://facebook.github.io/react/" target="_blank" rel="external">React 官方文档</a></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span></pre></td><td class="code"><pre><span class="line">/**</span><span class="line"> * JSX : xml <span class="keyword">in</span> JavaScript</span><span class="line"> * <span class="number">1</span>、<span class="keyword">tag</span>Name</span><span class="line"> * <span class="number">2</span>、attributes(props)</span><span class="line"> * <span class="number">3</span>、children</span><span class="line"> */</span><span class="line">/**</span><span class="line"> * 组件化: </span><span class="line"> * <span class="number">1</span>、函数式组件props =&gt; JSX ; </span><span class="line"> * <span class="number">2</span>、类组件:class A extends Component;</span><span class="line"> */ </span><span class="line">/**</span><span class="line"> * 数据源 : <span class="keyword">state</span>  + props</span><span class="line"> * 更新数据: <span class="built_in">set</span>State</span><span class="line"> * 方案: 当数据越来越复杂的时候，我们需要一个数据解决方案 ==&gt; redux</span><span class="line"> * 发起数据变更(click etc.) ==&gt; action</span><span class="line"> * 生成新的数据结构(<span class="keyword">state</span>[store])  ==&gt; redux的reducer生成react的<span class="keyword">state</span></span><span class="line"> * 渲染(render) ==&gt; react来做</span><span class="line"> */</span></pre></td></tr></table></figure><h3 id="DOM-对比"><a href="#DOM-对比" class="headerlink" title="DOM 对比"></a>DOM 对比</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统方式</span></span><span class="line">&lt;<span class="keyword">div</span> data-id=<span class="string">'1'</span>&gt;</span><span class="line">hello world</span><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><span class="line"></span><span class="line"><span class="comment">// vue </span></span><span class="line">&lt;<span class="keyword">div</span> data-id=&#123;&#123;id&#125;&#125;&gt;</span><span class="line">&#123;&#123;name&#125;&#125;</span><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><span class="line">&#123;</span><span class="line">  data: ()=&gt; &#123;</span><span class="line">      <span class="keyword">return</span> &#123;</span><span class="line">          name: <span class="string">'hello world'</span>,</span><span class="line">          id: <span class="number">1</span></span><span class="line">      &#125;</span><span class="line">  &#125;</span><span class="line">&#125;</span><span class="line"><span class="comment">// 注意 vue 是一个 MVVM 框架</span></span><span class="line"><span class="comment">// 特点就是数据和模板分离</span></span><span class="line"></span><span class="line"><span class="comment">// 实际上 react 也可以认为是一个 MVVM 框架</span></span><span class="line">var JSX = &lt;<span class="keyword">div</span> data-id=<span class="string">'1'</span>&gt;</span><span class="line">hello world</span><span class="line">&lt;/<span class="keyword">div</span>&gt;;</span><span class="line">render(JSX,document.getElementById(<span class="string">'root'</span>));</span><span class="line"><span class="comment">// 数据和模板绑定在一起</span></span><span class="line"></span><span class="line">Virtual dom</span><span class="line"></span><span class="line">&lt;<span class="keyword">div</span> width=<span class="string">'100px'</span>&gt;a&lt;/<span class="keyword">div</span>&gt;</span><span class="line">==&gt;</span><span class="line">tagname: <span class="keyword">div</span></span><span class="line">attributes:&#123;width: <span class="string">'100px'</span>&#125;</span><span class="line">children: a</span><span class="line"></span><span class="line">==&gt; IOS / Android</span><span class="line">tagname: UIButton</span><span class="line">attributes:&#123;display: flex&#125;</span><span class="line">children: ...</span></pre></td></tr></table></figure><h3 id="用-react-问候世界"><a href="#用-react-问候世界" class="headerlink" title="用 react 问候世界"></a>用 react 问候世界</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> react, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span> <span class="comment">// 基础库</span></span><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>  <span class="comment">// 平台库 这是 web 库</span></span><span class="line"><span class="comment">// 为什么要引两个库呢？</span></span><span class="line"><span class="comment">// 为了跨平台</span></span><span class="line"><span class="comment">// 比如在 ios/android 用上 react-native</span></span><span class="line"><span class="comment">// import from 'react-natiev'</span></span><span class="line">render(</span><span class="line">&lt;h1&gt;Hello, world&lt;<span class="regexp">/h1&gt;              /</span><span class="regexp">/ 要塞的代码</span></span><span class="line"><span class="regexp">document.getElementById('root')    /</span><span class="regexp">/ 容器</span></span><span class="line"><span class="regexp">)</span></span><span class="line"><span class="regexp"></span></span><span class="line"><span class="regexp">/</span><span class="regexp">/ 接下来看看用 webpack 编译后的代码</span></span><span class="line"><span class="regexp">_react2.default.createElement(</span></span><span class="line"><span class="regexp">  'h1',</span></span><span class="line"><span class="regexp">  null,</span></span><span class="line"><span class="regexp">  'Hello, world!'</span></span><span class="line"><span class="regexp"></span></span><span class="line"><span class="regexp">/</span>*</span><span class="line"> 也就是说 react 会把 JSX 分成三个部分</span><span class="line"> * tagname</span><span class="line"> * attributes</span><span class="line"> * children</span><span class="line">*<span class="regexp">/</span></span></pre></td></tr></table></figure><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span></pre></td><td class="code"><pre><span class="line">// 这种模板语法就叫做 JSX</span><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; from <span class="string">'react'</span></span><span class="line"><span class="keyword">import</span> &#123; render &#125; from <span class="string">'react-dom'</span></span><span class="line">const RootDom = document.getElementById(<span class="string">'root'</span>)</span><span class="line"><span class="keyword">let</span> JSX = &lt;div name=<span class="string">"frankie"</span>&gt;</span><span class="line">Hello world&lt;span&gt;你好&lt;/span&gt;</span><span class="line">&lt;/div&gt;</span><span class="line">render(JSX, RootDom)</span><span class="line"></span><span class="line">// 以下是编译出来的结果</span><span class="line">/*</span><span class="line">var JSX = _react2.<span class="keyword">default</span>.createElement(</span><span class="line">  <span class="string">'div'</span>,</span><span class="line">  &#123; name: <span class="string">'jirengu'</span> &#125;,</span><span class="line">  <span class="string">'Hello world'</span>,</span><span class="line">  _react2.<span class="keyword">default</span>.createElement(</span><span class="line">    <span class="string">'span'</span>,</span><span class="line">    null,</span><span class="line">    <span class="string">'\u4F60\u597D'</span></span><span class="line">  )</span><span class="line">);</span><span class="line">*/</span><span class="line"></span><span class="line">// 结构就相当于这个</span><span class="line">/*</span><span class="line">tagname: <span class="string">'div'</span></span><span class="line">attributes: &#123;</span><span class="line">  name: <span class="string">'frankie'</span></span><span class="line">&#125;</span><span class="line">children: <span class="string">'hello world'</span>,&#123;</span><span class="line">  tagname: <span class="string">'span'</span></span><span class="line">  attributes: null</span><span class="line">  children: <span class="string">'你好'</span></span><span class="line">&#125;</span><span class="line">*/</span></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 值得注意的地方</span></span><span class="line"><span class="comment">// JSX 可以防止 XSS 漏洞</span></span><span class="line"><span class="comment">// 比如写在 JSX 里会直接输出，写在 HTML 会把 &amp;gt; 转成 &gt;</span></span><span class="line"></span><span class="line">render() &#123;</span><span class="line">  <span class="keyword">let</span> b = <span class="string">'First &amp;gt; Second'</span></span><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;b&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><span class="line">&#125; </span><span class="line"></span><span class="line"><span class="comment">// 如果要不转译该怎么办？</span></span><span class="line"><span class="comment">/*</span></span><span class="line"><span class="comment">dangerouslySetInnerHTML函数</span></span><span class="line"><span class="comment">dangerouslySetInnerHTML是React提供的替换浏览器DOM中的innerHTML接口的一个函数。一般而言，使用JS代码设置HTML文档的内容是危险的，因为这样很容易把你的用户信息暴露给跨站脚本攻击.所以，你虽然可以直接在React中设置html的内容，但你要使用 dangerouslySetInnerHTML 并向该函数传递一个含有__html键的对象，用来提醒你自己这样做很危险。例如：</span></span><span class="line"><span class="comment">function createMarkup() &#123;</span></span><span class="line"><span class="comment">  return &#123;__html: 'First &amp;middot; Second'&#125;;</span></span><span class="line"><span class="comment">&#125;</span></span><span class="line"><span class="comment"></span></span><span class="line"><span class="comment">function MyComponent() &#123;</span></span><span class="line"><span class="comment">  return &lt;div dangerouslySetInnerHTML=&#123;createMarkup()&#125; /&gt;;</span></span><span class="line"><span class="comment">&#125;</span></span><span class="line"><span class="comment">*/</span></span><span class="line"></span><span class="line"><span class="comment">// 实际上，JSX 里面输入 false ，null ，undefined 都是不渲染的</span></span><span class="line"></span><span class="line">render() &#123;</span><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;false&#125; &#123;null&#125; &#123;undefined&#125; &#123;0&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><span class="line">&#125; </span><span class="line"></span><span class="line"><span class="comment">// 那如果有个空格在中间呢？</span></span><span class="line"></span><span class="line">render() &#123;</span><span class="line">  <span class="keyword">let</span> b = <span class="string">'First         Second'</span>  <span class="comment">// 这里这个空格会打印么？ 不会的</span></span><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;b&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><span class="line">&#125; </span><span class="line"></span><span class="line"><span class="comment">// 还有一些属性啊，比如 onChange onClick 都要用驼峰命名</span></span></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/22500730?refer=study-fe" target="_blank" rel="external">XSS是什么</a> <a href="https://zhuanlan.zhihu.com/p/22521378?refer=study-fe" target="_blank" rel="external">CSRF是什么</a></p><h3 id="JS-in-JSX（动态化）"><a href="#JS-in-JSX（动态化）" class="headerlink" title="JS-in-JSX（动态化）"></a>JS-in-JSX（动态化）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记住要用大括号来包裹变量</span></span><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><span class="line"><span class="keyword">const</span> RootDom= <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>);</span><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><span class="line"><span class="keyword">let</span> jsx1 = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;a&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><span class="line"><span class="keyword">let</span> b = &#123; <span class="attr">id</span> : <span class="number">2</span> &#125;;</span><span class="line"><span class="keyword">let</span> jsx2 = <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;b.id&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><span class="line"><span class="keyword">let</span> jsx3 = [<span class="string">'i'</span>,<span class="string">'love'</span>,<span class="string">'react'</span>].map(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><span class="line">&#125;);</span><span class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><span class="line"><span class="xml">    &#123;jsx1&#125;&#123;jsx2&#125;&#123;jsx3&#125;</span></span><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>, RootDom);</span><span class="line"><span class="comment">// 事实上 render 还有第三个参数 callback</span></span></pre></td></tr></table></figure><h3 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span><span class="line">48</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">React</span>,&#123;<span class="type">Component</span>&#125; from <span class="symbol">'reac</span>t';</span><span class="line"><span class="keyword">import</span> &#123;render&#125; from <span class="symbol">'react</span>-dom';</span><span class="line">const <span class="type">RootDom</span> = document.getElementById(<span class="symbol">'roo</span>t');</span><span class="line"></span><span class="line"><span class="comment">/*</span></span><span class="line"><span class="comment"> * pure functional components </span></span><span class="line"><span class="comment"> * it must never modify its own props</span></span><span class="line"><span class="comment"> */</span></span><span class="line"> </span><span class="line">const <span class="type">A</span> = (props) =&gt; &#123;</span><span class="line">    <span class="keyword">return</span> &lt;div&gt;&#123; props.gender &#125; + &#123; props.name &#125;&lt;/div&gt;</span><span class="line">&#125;;</span><span class="line">render(&lt;<span class="type">A</span> gender=<span class="symbol">'male</span> name=<span class="symbol">'franki</span>e'/&gt;,<span class="type">RootDom</span>);</span><span class="line"></span><span class="line"><span class="comment">// tagname  A, ==&gt; 不是传统的html标签，而是个函数</span></span><span class="line"><span class="comment">// attributes &#123;   ==&gt; 函数的情况下 attributes === props</span></span><span class="line"><span class="comment">//     gender: 'male',</span></span><span class="line"><span class="comment">//     name: "frankie"</span></span><span class="line"><span class="comment">// &#125;</span></span><span class="line"><span class="comment">// children: null</span></span><span class="line"></span><span class="line"><span class="comment">/*</span></span><span class="line"><span class="comment"> * class components</span></span><span class="line"><span class="comment"> * - Adding Local State to a Class</span></span><span class="line"><span class="comment"> * - Adding Lifecycle Methods to a Class</span></span><span class="line"><span class="comment"> */</span></span><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">FisstComponent</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><span class="line">    constructor() &#123;</span><span class="line">        <span class="keyword">super</span>()</span><span class="line">        <span class="keyword">this</span>.state = &#123;</span><span class="line">            b: <span class="number">1</span></span><span class="line">        &#125;</span><span class="line">    &#125;</span><span class="line">    render() &#123;</span><span class="line">        <span class="keyword">return</span>(</span><span class="line">         &lt;div&gt;</span><span class="line">          <span class="type">I</span> am a component</span><span class="line">          &#123;<span class="keyword">this</span>.state.b&#125;</span><span class="line">         &lt;/div&gt;</span><span class="line">        )</span><span class="line">    &#125;</span><span class="line"> &#125;</span><span class="line"> render(&lt;<span class="type">FirstComponent</span> /&gt;,<span class="type">RootDom</span>);</span><span class="line"> </span><span class="line"> <span class="comment">// class 组件必须有 render 方法</span></span><span class="line"> <span class="comment">// class 组件必须继承 Component</span></span><span class="line"> </span><span class="line"> <span class="comment">// 组件为什么要大写？区分 HTML 和 组件</span></span></pre></td></tr></table></figure><h3 id="life-cycle"><a href="#life-cycle" class="headerlink" title="life-cycle"></a>life-cycle</h3><p><a href="https://facebook.github.io/react/docs/state-and-lifecycle.html" target="_blank" rel="external">https://facebook.github.io/react/docs/state-and-lifecycle.html</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span><span class="line">48</span><span class="line">49</span><span class="line">50</span><span class="line">51</span><span class="line">52</span><span class="line">53</span><span class="line">54</span><span class="line">55</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写代码的时候更具有控制力</span></span><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><span class="line"><span class="keyword">const</span> RootDom= <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>);</span><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstComponent</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><span class="line">    <span class="keyword">constructor</span>()&#123;</span><span class="line">        <span class="keyword">super</span>();</span><span class="line">        <span class="keyword">this</span>.state = &#123;</span><span class="line">            b:<span class="number">1</span></span><span class="line">        &#125;</span><span class="line">    &#125;</span><span class="line">    <span class="comment">// shouldComponentUpdate / componentWillReceiveProps / componentDidMount 用得比较多</span></span><span class="line">shouldComponentUpdate()&#123;   <span class="comment">// 组件是不是应该被更新</span></span><span class="line"><span class="built_in">console</span>.log(<span class="string">'shouldComponentUpdate'</span>);</span><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><span class="line">&#125;</span><span class="line">componentWillUnmount()&#123;   <span class="comment">// 组件将会移除</span></span><span class="line"><span class="built_in">console</span>.log(<span class="string">'componentWillUnmount'</span>)</span><span class="line">&#125;</span><span class="line">componentDidUpdate()&#123;   <span class="comment">// 组件更新好了</span></span><span class="line"><span class="built_in">console</span>.log(<span class="string">'componentDidUpdate'</span>)</span><span class="line">&#125;</span><span class="line">componentWillUpdate()&#123;   <span class="comment">// 组件将会更新</span></span><span class="line"><span class="built_in">console</span>.log(<span class="string">'componentWillUpdate'</span>)</span><span class="line">&#125;</span><span class="line">componentWillReceiveProps()&#123;   <span class="comment">// 组件获得了新的 props</span></span><span class="line"><span class="built_in">console</span>.log(<span class="string">'componentWillReceiveProps'</span>)</span><span class="line">&#125;</span><span class="line">componentWillMount()&#123;   <span class="comment">// 组件将被加载</span></span><span class="line"><span class="built_in">console</span>.log(<span class="string">'componentWillMount'</span>)</span><span class="line">&#125;</span><span class="line">componentDidMount()&#123;   <span class="comment">// 组件加载完成</span></span><span class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">b</span>:<span class="number">1</span>&#125;)</span><span class="line"><span class="built_in">console</span>.log(<span class="string">'componentDidMount'</span>)</span><span class="line">&#125;</span><span class="line">    render()&#123;   <span class="comment">// 组件将被渲染</span></span><span class="line">    <span class="built_in">console</span>.log(<span class="string">'render'</span>)</span><span class="line">    <span class="keyword">let</span> a = <span class="string">'10/26'</span></span><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><span class="line"><span class="xml">           I am a component</span></span><span class="line"><span class="xml">           &#123;a &#125;</span></span><span class="line"><span class="xml">                &#123;this.state.b&#125;</span></span><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><span class="line">    &#125;</span><span class="line"> &#125;;</span><span class="line"></span><span class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">FirstComponent</span> /&gt;</span>,RootDom);</span></span><span class="line"><span class="xml"></span></span><span class="line"><span class="xml">// componentWillMount</span></span><span class="line"><span class="xml">// render</span></span><span class="line"><span class="xml">// componentDidMount</span></span><span class="line"><span class="xml">// shouldComponentUpdate</span></span><span class="line"><span class="xml">// componentWillUpdate</span></span><span class="line"><span class="xml">// render</span></span><span class="line"><span class="xml">// componentDidUpdate</span></span></pre></td></tr></table></figure><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;A a='1'&gt; ==&gt; props = &#123;a:'1'&#125;</span></span><span class="line"></span><span class="line"><span class="keyword">import</span> <span class="type">React</span>,&#123;<span class="type">Component</span>&#125; from <span class="symbol">'reac</span>t';</span><span class="line"><span class="keyword">import</span> &#123;render&#125; from <span class="symbol">'react</span>-dom';</span><span class="line">const <span class="type">RootDom</span>= document.getElementById(<span class="symbol">'roo</span>t');</span><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><span class="line">  render() &#123;</span><span class="line">    <span class="keyword">return</span> &lt;div&gt;&#123;<span class="keyword">this</span>.props.gender&#125; + &#123;<span class="keyword">this</span>.props.name&#125;&lt;/div&gt;</span><span class="line">  &#125;</span><span class="line">&#125;</span><span class="line"><span class="comment">/** props.children</span></span><span class="line"><span class="comment"> * React uses this.props.children to access a component's children nodes.</span></span><span class="line"><span class="comment"> * ==== ! props should be pure === // 不应该做任何修改</span></span><span class="line"><span class="comment"> */</span></span><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildComponent</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><span class="line">    render()&#123;</span><span class="line">        <span class="keyword">return</span> (</span><span class="line">        &lt;div&gt;</span><span class="line">            &#123;<span class="keyword">this</span>.props.children&#125;   <span class="comment">// 如果 render 写成传统的 html 标签，那“我是个孩子”就是 &#123;this.props.children&#125;</span></span><span class="line">            &lt;<span class="type">Welcome</span> gender=<span class="symbol">'mal</span>e' name=<span class="symbol">'franki</span>e' /&gt;</span><span class="line">        &lt;/div&gt;</span><span class="line">        );</span><span class="line">    &#125;</span><span class="line"> &#125;;</span><span class="line">render(&lt;<span class="type">ChildComponent</span>&gt;我是个孩子&lt;/<span class="type">ChildComponent</span>&gt;,<span class="type">RootDom</span>);</span><span class="line"></span><span class="line"> <span class="comment">// 设置默认值 defaultProps</span></span><span class="line"> <span class="comment">// 方法 1</span></span><span class="line"> <span class="type">Welcome</span>.defaultProps = &#123;</span><span class="line">  gender: <span class="symbol">'mal</span>e',</span><span class="line">  name: <span class="symbol">'franki</span>e'</span><span class="line"> &#125;</span><span class="line"> <span class="comment">// 方法 2</span></span><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><span class="line">static defaultProps = &#123;</span><span class="line">       gender: <span class="symbol">'mal</span>e',</span><span class="line">     name: <span class="symbol">'franki</span>e'</span><span class="line">&#125;</span><span class="line"> &#125;</span></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型检测</span></span><span class="line"><span class="keyword">import</span> <span class="type">PropTypes</span> from <span class="symbol">'prop</span>-types';</span><span class="line"></span><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><span class="line">static defaultProps = &#123;</span><span class="line">      gender: <span class="type">PropTypes</span>.string,</span><span class="line">    name: <span class="type">PropTypes</span>.string</span><span class="line">&#125;</span><span class="line">render()&#123;</span><span class="line">     <span class="keyword">return</span> &lt;div&gt;&#123;<span class="keyword">this</span>.props.gender&#125; + &#123;<span class="keyword">this</span>.props.name&#125;&lt;/div&gt; </span><span class="line">&#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">// 假设这里传了数字怎么办？</span></span><span class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">Welcome</span> gender=<span class="symbol">'023</span>4' name=<span class="symbol">'023</span>4'/&gt;,<span class="type">RootDom</span>)</span></pre></td></tr></table></figure><p><a href="https://reactjs.org/docs/typechecking-with-proptypes.html" target="_blank" rel="external">https://reactjs.org/docs/typechecking-with-proptypes.html</a></p><h3 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span></pre></td><td class="code"><pre><span class="line">// <span class="built_in">set</span>State 是一个异步的操作</span><span class="line">// 改变数据只有一种方法 <span class="built_in">set</span>State</span><span class="line">import React,&#123;Component&#125; <span class="keyword">from</span> 'react';</span><span class="line">import &#123;render&#125; <span class="keyword">from</span> 'react-dom';</span><span class="line">const RootDom= document.getElementById('root');</span><span class="line">/**</span><span class="line"> * 数据源: <span class="keyword">state</span> + props</span><span class="line"> * props: parent ==&gt; child 【pure不能修改】</span><span class="line"> * <span class="keyword">state</span>: 自身维护的数据状态</span><span class="line"> */</span><span class="line">class PropState extends Component&#123;</span><span class="line">    constructor()&#123;</span><span class="line">        super();</span><span class="line">        this.<span class="keyword">state</span>=&#123;a:'I am <span class="keyword">state</span>'&#125;</span><span class="line">    &#125;</span><span class="line">    click()&#123;</span><span class="line">        /**</span><span class="line">         * <span class="built_in">set</span>State ==&gt; 本组件重新render</span><span class="line">         */</span><span class="line">    this.<span class="built_in">set</span>State(&#123;</span><span class="line">    a:'我更新啦 哈哈哈'</span><span class="line">    &#125;)</span><span class="line">    &#125;</span><span class="line">    render()&#123;</span><span class="line">        return <span class="variable">&lt;div onClick=&#123;()=&gt;</span>this.click()&#125;&gt;</span><span class="line">                &#123;this.<span class="keyword">state</span>.a&#125;</span><span class="line">                <span class="variable">&lt;A name= &#123;this.state.a&#125; /&gt;</span></span><span class="line">              &lt;/div&gt;</span><span class="line">    &#125;</span><span class="line"> &#125;;</span><span class="line">const A = (props) =&gt; &#123;</span><span class="line">    return <span class="variable">&lt;div&gt;</span>&#123;props.name&#125;&lt;/div&gt;</span><span class="line">&#125;</span><span class="line">render(<span class="variable">&lt;PropState/&gt;</span>,RootDom);</span></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定时器</span></span><span class="line"><span class="comment">// 记住在 numount 要取消定时器，要不然很容易会造成内存泄露</span></span><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><span class="line"><span class="keyword">constructor</span>() &#123;</span><span class="line">      <span class="keyword">super</span>()</span><span class="line">      <span class="keyword">this</span>.state = &#123;</span><span class="line">          count: <span class="number">0</span>,</span><span class="line">          time: (<span class="keyword">new</span> <span class="built_in">Date</span>()).toLocaleTimeString()</span><span class="line">      &#125;</span><span class="line">&#125;</span><span class="line">tick() &#123;</span><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><span class="line">            count: <span class="number">1</span>,</span><span class="line">            time: (<span class="keyword">new</span> <span class="built_in">Date</span>()).toLocaleTimeString()</span><span class="line">        &#125;)</span><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.count)  <span class="comment">// 0,因为 setState() 是异步函数    </span></span><span class="line">&#125;</span><span class="line">componentWillMount() &#123;</span><span class="line"><span class="keyword">this</span>.interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.tick(),<span class="number">1000</span>)</span><span class="line">&#125;</span><span class="line">componentWillUnmount() &#123;</span><span class="line">      clearInterval(<span class="keyword">this</span>.interval)</span><span class="line">&#125;</span><span class="line">shouldComponentUpate(nextProps, nextState) &#123;</span><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><span class="line">&#125;</span><span class="line">render() &#123;</span><span class="line">      <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>the time is &#123;this.state.time&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><span class="line">&#125;</span><span class="line">&#125;</span><span class="line"> </span><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Timer</span> /&gt;</span>,RootDom)</span></span></pre></td></tr></table></figure><h3 id="值得注意的地方"><a href="#值得注意的地方" class="headerlink" title="值得注意的地方"></a>值得注意的地方</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定 this 的方法</span></span><span class="line"><span class="comment">// 箭头函数和 constructor 都可以</span></span><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><span class="line">constructor() &#123;</span><span class="line">      <span class="keyword">super</span>()</span><span class="line">      <span class="keyword">this</span>.state = &#123;</span><span class="line">          name: <span class="symbol">'franki</span>e'</span><span class="line">      &#125;</span><span class="line">      <span class="comment">// 构造函数绑 this</span></span><span class="line">      <span class="comment">// this.handleClick = this.handleClick.bind(this)</span></span><span class="line">&#125;</span><span class="line"><span class="comment">// 箭头函数绑 this</span></span><span class="line">handleClick = () =&gt; &#123;</span><span class="line">      alert(<span class="keyword">this</span>.state.name)</span><span class="line">&#125;</span><span class="line">render() &#123;</span><span class="line">      <span class="keyword">return</span> (&lt;div&gt;my name is &#123;<span class="keyword">this</span>.state.name&#125;&lt;/div&gt;)</span><span class="line">&#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">// 最后一种 ReactDOM.render(&lt;Name onClick=&#123;this.handleClick.bind(this)&#125;/&gt;,RootDom)</span></span><span class="line"><span class="comment">// 这种是不建议的，会触发 componentWillReceiveProps 和 shouldComponentUpdate，假如在定时器里，子组件就会一直 render</span></span><span class="line"><span class="comment">// 也不能在 render 里用箭头函数</span></span><span class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">Name</span> onClick=&#123;<span class="keyword">this</span>.handleClick&#125;/&gt;,<span class="type">RootDom</span>)</span></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span><span class="line">48</span><span class="line">49</span><span class="line">50</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 阻止事件冒泡</span></span><span class="line"><span class="comment">/*</span></span><span class="line"><span class="comment">先考虑一个东西</span></span><span class="line"><span class="comment">写在 React 的 div 和原生的 div 是不一样的</span></span><span class="line"><span class="comment">那它们的 event 是一样的吗？</span></span><span class="line"><span class="comment">// </span></span><span class="line"><span class="comment">&lt;div onclick=""&gt;&lt;/div&gt;</span></span><span class="line"><span class="comment">function test(event)&#123;</span></span><span class="line"><span class="comment">  return false</span></span><span class="line"><span class="comment">&#125;</span></span><span class="line"><span class="comment">// react</span></span><span class="line"><span class="comment">handleClick = (event) =&gt; &#123;</span></span><span class="line"><span class="comment">  </span></span><span class="line"><span class="comment">&#125;</span></span><span class="line"><span class="comment"></span></span><span class="line"><span class="comment">其实是不一样的</span></span><span class="line"><span class="comment">react 的 event 是被封装过的，叫做 SyntheticEvent 能实现百分之九十的 event 原生事件 </span></span><span class="line"><span class="comment">通过 ev.nativeEvent === event 封装</span></span><span class="line"><span class="comment">ev.nativeEvent.stopImmediatePropagation()</span></span><span class="line"><span class="comment"></span></span><span class="line"><span class="comment">handleClick = (event) =&gt; &#123;</span></span><span class="line"><span class="comment">  setTimeout(()=&gt; &#123;</span></span><span class="line"><span class="comment">    console.log(event.type)</span></span><span class="line"><span class="comment">  &#125;)</span></span><span class="line"><span class="comment">  console.log(event.type)</span></span><span class="line"><span class="comment">&#125;</span></span><span class="line"><span class="comment"></span></span><span class="line"><span class="comment">react 的 event 是不能异步执行的</span></span><span class="line"><span class="comment">react 的 event 有一个事件值，触发完成之后就会销毁</span></span><span class="line"><span class="comment">*/</span></span><span class="line"></span><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><span class="line">constructor() &#123;</span><span class="line">      <span class="keyword">super</span>()</span><span class="line">      <span class="keyword">this</span>.state = &#123;</span><span class="line">          name: <span class="symbol">'franki</span>e'</span><span class="line">      &#125;</span><span class="line">&#125;</span><span class="line">handleClick() &#123;</span><span class="line">      alert(<span class="keyword">this</span>.state.name)</span><span class="line">      <span class="comment">// 可以直接调用</span></span><span class="line">        <span class="comment">// event.stopPropagation()</span></span><span class="line">        <span class="comment">// event.preventDefault()</span></span><span class="line">&#125;</span><span class="line">render() &#123;</span><span class="line">      <span class="keyword">return</span> (&lt;div&gt;my name is &#123;<span class="keyword">this</span>.state.name&#125;&lt;/div&gt;)</span><span class="line">&#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">Name</span> onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)&#125;/&gt;,<span class="type">RootDom</span>)</span></pre></td></tr></table></figure><h3 id="ref-和-DOM"><a href="#ref-和-DOM" class="headerlink" title="ref 和 DOM"></a>ref 和 DOM</h3><p><a href="https://reactjs.org/docs/refs-and-the-dom.html" target="_blank" rel="external">https://reactjs.org/docs/refs-and-the-dom.html</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span><span class="line">48</span><span class="line">49</span><span class="line">50</span><span class="line">51</span><span class="line">52</span><span class="line">53</span><span class="line">54</span><span class="line">55</span><span class="line">56</span><span class="line">57</span><span class="line">58</span><span class="line">59</span><span class="line">60</span><span class="line">61</span><span class="line">62</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用 ref 操作 DOM</span></span><span class="line"><span class="comment">// react 不建议直接操作 DOM 元素，性能不好</span></span><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> <span class="title">extends</span> <span class="title">Component</span> </span>&#123;</span><span class="line"><span class="keyword">constructor</span>() &#123;</span><span class="line">      <span class="keyword">super</span>()</span><span class="line">      <span class="keyword">this</span>.state = &#123;</span><span class="line">          name: <span class="string">'frankie'</span></span><span class="line">      &#125;</span><span class="line">&#125;</span><span class="line">handleClick = (event) =&gt; &#123;</span><span class="line">      <span class="comment">// var el = document.getElementById('content')</span></span><span class="line">      <span class="comment">// this.refs.style.color = 'red'  这是旧的</span></span><span class="line">      <span class="keyword">this</span>.contentRef.style.color = <span class="string">'red'</span></span><span class="line">&#125;</span><span class="line">render() &#123;</span><span class="line">      <span class="keyword">return</span> (</span><span class="line">      <span class="comment">// &lt;div ref="content"&gt;  这是旧的</span></span><span class="line">      &lt;div onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</span><span class="line">            &lt;div ref=&#123;(content) =&gt; &#123;<span class="keyword">this</span>.contentRef = content&#125;&#125;&gt;</span><span class="line">            my name <span class="keyword">is</span> &#123;<span class="keyword">this</span>.state.name&#125;</span><span class="line">            &lt;/div&gt;</span><span class="line">      &lt;/div&gt;)</span><span class="line">&#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line">ReactDOM.render(&lt;Name /&gt;,RootDom)</span><span class="line"></span><span class="line"><span class="comment">/*</span></span><span class="line"><span class="comment">其实上面这种做法 React 是不推荐的</span></span><span class="line"><span class="comment">class Name extends Component &#123;</span></span><span class="line"><span class="comment">constructor() &#123;</span></span><span class="line"><span class="comment">      super()</span></span><span class="line"><span class="comment">      this.state = &#123;</span></span><span class="line"><span class="comment">      color: '',</span></span><span class="line"><span class="comment">          name: 'frankie'</span></span><span class="line"><span class="comment">      &#125;</span></span><span class="line"><span class="comment">&#125;</span></span><span class="line"><span class="comment">handleClick(event)&#123;</span></span><span class="line"><span class="comment">this.setState(&#123;</span></span><span class="line"><span class="comment">          color: 'red'</span></span><span class="line"><span class="comment">&#125;)</span></span><span class="line"><span class="comment">&#125;</span></span><span class="line"><span class="comment">render() &#123;</span></span><span class="line"><span class="comment">      return (</span></span><span class="line"><span class="comment">      /*</span></span><span class="line"><span class="comment">      直接在标签上使用style属性时，</span></span><span class="line"><span class="comment">      要写成style=&#123;&#123;&#125;&#125;是两个大括号，</span></span><span class="line"><span class="comment">      外层大括号是告知jsx这里是js语法，</span></span><span class="line"><span class="comment">      和真实DOM不同的是，属性值不能是字符串而必须为对象，</span></span><span class="line"><span class="comment">      需要注意的是属性名同样需要驼峰命名法。即margin-top要写成marginTop。</span></span><span class="line"><span class="comment">      */</span></span><span class="line">      &lt;div style=&#123;&#123;color: <span class="keyword">this</span>.state.color&#125;&#125; onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)&#125;&gt;</span><span class="line">            &lt;div ref=&#123;(content) =&gt; &#123;<span class="keyword">this</span>.contentRef = content&#125;&#125;&gt;</span><span class="line">            my name <span class="keyword">is</span> &#123;<span class="keyword">this</span>.state.name&#125;</span><span class="line">            &lt;/div&gt;</span><span class="line">      &lt;/div&gt;)</span><span class="line">&#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line">ReactDOM.render(&lt;Name /&gt;,RootDom)</span><span class="line"></span><span class="line">*/</span></pre></td></tr></table></figure><h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span><span class="line">48</span><span class="line">49</span><span class="line">50</span><span class="line">51</span><span class="line">52</span><span class="line">53</span><span class="line">54</span><span class="line">55</span><span class="line">56</span><span class="line">57</span><span class="line">58</span><span class="line">59</span><span class="line">60</span><span class="line">61</span><span class="line">62</span><span class="line">63</span><span class="line">64</span><span class="line">65</span><span class="line">66</span><span class="line">67</span><span class="line">68</span><span class="line">69</span><span class="line">70</span><span class="line">71</span><span class="line">72</span><span class="line">73</span><span class="line">74</span><span class="line">75</span><span class="line">76</span><span class="line">77</span><span class="line">78</span><span class="line">79</span><span class="line">80</span><span class="line">81</span><span class="line">82</span><span class="line">83</span><span class="line">84</span><span class="line">85</span><span class="line">86</span><span class="line">87</span><span class="line">88</span><span class="line">89</span><span class="line">90</span><span class="line">91</span><span class="line">92</span><span class="line">93</span><span class="line">94</span><span class="line">95</span><span class="line">96</span><span class="line">97</span><span class="line">98</span><span class="line">99</span><span class="line">100</span><span class="line">101</span><span class="line">102</span><span class="line">103</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><span class="line"><span class="keyword">constructor</span>() &#123;</span><span class="line">      <span class="keyword">super</span>()</span><span class="line">      <span class="keyword">this</span>.state = &#123;</span><span class="line">             <span class="keyword">let</span> arr = [&#123;</span><span class="line">              id: <span class="string">'1'</span>,</span><span class="line">              name: <span class="string">'dalao1'</span></span><span class="line">            &#125;, &#123;</span><span class="line">              id: <span class="string">'2'</span>,</span><span class="line">              name: <span class="string">'dalao2'</span></span><span class="line">            &#125;, &#123;</span><span class="line">              id: <span class="string">'3'</span>,</span><span class="line">              name: <span class="string">'dalao3'</span></span><span class="line">            &#125;]         </span><span class="line">      &#125;</span><span class="line">&#125;</span><span class="line">render() &#123;</span><span class="line">      <span class="keyword">return</span> (</span><span class="line">      &lt;div onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</span><span class="line">&lt;ul&gt;</span><span class="line">&#123;arr.map(<span class="function">(<span class="params">item, i</span>) =&gt;</span> &#123;</span><span class="line"><span class="comment">// return &lt;li key=&#123;i&#125;&gt;&#123;item.name&#125;&lt;/li&gt;</span></span><span class="line"><span class="comment">// 这个 key 的作用是见下面</span></span><span class="line">                  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><span class="line">&#125;)&#125;</span><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><span class="line"><span class="regexp">      &lt;/</span>div&gt;)</span><span class="line">&#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Name</span> /&gt;</span>,RootDom)</span></span><span class="line"><span class="xml"></span></span><span class="line"><span class="xml">/*</span></span><span class="line"><span class="xml">key 的作用 react 做 diff 算法的时候使用</span></span><span class="line"><span class="xml">如果 key 能保持稳定，DOM 内容不变就可以避免重新渲染</span></span><span class="line"><span class="xml">key 不要用 index 不要用随机数</span></span><span class="line"><span class="xml"></span></span><span class="line"><span class="xml">class Name extends React.Component &#123;</span></span><span class="line"><span class="xml">constructor() &#123;</span></span><span class="line"><span class="xml">      super()</span></span><span class="line"><span class="xml">      this.state = &#123;</span></span><span class="line"><span class="xml">             people : [&#123;</span></span><span class="line"><span class="xml">              id: '1',</span></span><span class="line"><span class="xml">              name: 'dalao1'</span></span><span class="line"><span class="xml">            &#125;, &#123;</span></span><span class="line"><span class="xml">              id: '2',</span></span><span class="line"><span class="xml">              name: 'dalao2'</span></span><span class="line"><span class="xml">            &#125;, &#123;</span></span><span class="line"><span class="xml">              id: '3',</span></span><span class="line"><span class="xml">              name: 'dalao3'</span></span><span class="line"><span class="xml">            &#125;]         </span></span><span class="line"><span class="xml">      &#125;</span></span><span class="line"><span class="xml">&#125;</span></span><span class="line"><span class="xml">handleClick(event) &#123;</span></span><span class="line"><span class="xml">// 这里要用深拷贝</span></span><span class="line"><span class="xml">let people = this.state.people</span></span><span class="line"><span class="xml">let newPeople = people.map((person =&gt; &#123;</span></span><span class="line"><span class="xml">          let newPerson = &#123;...person&#125;  // 这里相当于浅拷贝</span></span><span class="line"><span class="xml">          if (newPerson.id == '2') &#123;</span></span><span class="line"><span class="xml">              newPerson.name += 'haha'</span></span><span class="line"><span class="xml">          &#125;</span></span><span class="line"><span class="xml">          return newPeople  // 返回了新的地址相当于深拷贝</span></span><span class="line"><span class="xml">&#125;))</span></span><span class="line"><span class="xml">this.setState(&#123;</span></span><span class="line"><span class="xml">people : newPeople</span></span><span class="line"><span class="xml">&#125;)</span></span><span class="line"><span class="xml">&#125;</span></span><span class="line"><span class="xml">render() &#123;</span></span><span class="line"><span class="xml">      return (</span></span><span class="line">      &lt;div onClick=&#123;this.handleClick.bind(this)&#125;&gt;</span><span class="line">&lt;ul&gt;</span><span class="line">&#123;this.state.people.map((item, i) =&gt; &#123;</span><span class="line">// return &lt;Person key=&#123;Math.random() * 100&#125; item=&#123;item&#125;&gt;&lt;/Person&gt;</span><span class="line">// 如果像上面一样，因为 key 是不一样的，所以 react 以为这个组件没有使用过，要重新构造一份</span><span class="line">return &lt;Person key=&#123;i&#125; item=&#123;item&#125;&gt;&lt;/Person&gt;</span><span class="line">&#125;)&#125;</span><span class="line">&lt;/ul&gt;</span><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>)</span></span><span class="line"><span class="xml">&#125;</span></span><span class="line"><span class="xml">&#125;</span></span><span class="line"><span class="xml"></span></span><span class="line"><span class="xml">class Person extends React.Component&#123;</span></span><span class="line"><span class="xml">shouldComponentUpdate(nextProps, nextState) &#123;</span></span><span class="line"><span class="xml">      return nextProps.item.name !== this.props.item.name</span></span><span class="line"><span class="xml">      // 如果不用深拷贝，nextProps.item.name === this.props.item.name 是 true，相等的原因是因为 item 是引用类型</span></span><span class="line"><span class="xml">&#125;</span></span><span class="line"><span class="xml">  render()&#123;</span></span><span class="line"><span class="xml">  console.log('render' + this.props.item.id)</span></span><span class="line"><span class="xml">  /* </span></span><span class="line"><span class="xml">  这里打印的是</span></span><span class="line"><span class="xml">  render1</span></span><span class="line"><span class="xml">  render2</span></span><span class="line"><span class="xml">  render3</span></span><span class="line"><span class="xml">  避免 1 3 渲染的方法是</span></span><span class="line"><span class="xml">  key 值要稳定</span></span><span class="line"><span class="xml">  深拷贝</span></span><span class="line"><span class="xml">  */</span></span><span class="line"><span class="xml">      return <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;this.props.item.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><span class="line"><span class="xml">  &#125;</span></span><span class="line"><span class="xml">&#125;</span></span><span class="line"><span class="xml"></span></span><span class="line"><span class="xml">ReactDOM.render(<span class="tag">&lt;<span class="name">Name</span> /&gt;</span>,mountNode)</span></span><span class="line"><span class="xml">*/</span></span></pre></td></tr></table></figure><p><a href="https://segmentfault.com/a/1190000006752076" target="_blank" rel="external">JavaScript 深入了解基本类型和引用类型的值</a></p><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span><span class="line">48</span><span class="line">49</span><span class="line">50</span><span class="line">51</span><span class="line">52</span><span class="line">53</span><span class="line">54</span><span class="line">55</span><span class="line">56</span><span class="line">57</span><span class="line">58</span><span class="line">59</span><span class="line">60</span><span class="line">61</span><span class="line">62</span><span class="line">63</span><span class="line">64</span><span class="line">65</span><span class="line">66</span><span class="line">67</span><span class="line">68</span><span class="line">69</span><span class="line">70</span><span class="line">71</span><span class="line">72</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><span class="line"><span class="comment">方法有：三元 if else 组件 方法 &amp;&amp;判断</span></span><span class="line"><span class="comment">*/</span></span><span class="line"></span><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><span class="line">  render()&#123;</span><span class="line">  let isLogin = <span class="keyword">this</span>.props.isLogin</span><span class="line">  let comp = <span class="literal">null</span></span><span class="line">  <span class="keyword">if</span>(isLogin)&#123;</span><span class="line">          comp = &lt;<span class="type">Logout</span> /&gt;</span><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><span class="line">          comp = &lt;<span class="type">Login</span> /&gt;</span><span class="line">  &#125;</span><span class="line">      <span class="keyword">return</span>(&lt;div&gt;</span><span class="line">      &#123;comp&#125;</span><span class="line">      <span class="comment">// &#123;isLogin ? &lt;Logout /&gt; : &lt;Login /&gt;&#125;  // 主要用三元运算</span></span><span class="line">      &lt;/div&gt;)</span><span class="line">  &#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><span class="line">  render()&#123;</span><span class="line">      <span class="keyword">return</span> &lt;div&gt;login&lt;/div&gt;</span><span class="line">  &#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logout</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><span class="line">  render()&#123;</span><span class="line">      <span class="keyword">return</span> &lt;div&gt;logout&lt;/div&gt;</span><span class="line">  &#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">Name</span> isLogin=&#123;<span class="literal">true</span>&#125;/&gt;,mountNode)</span><span class="line"></span><span class="line"><span class="comment">/*</span></span><span class="line"><span class="comment">可以封装成一个组件</span></span><span class="line"><span class="comment">function SignIn(isLogin) &#123;</span></span><span class="line"><span class="comment">  if(isLogin)&#123;</span></span><span class="line"><span class="comment">      return &lt;Logout/&gt;</span></span><span class="line"><span class="comment">  &#125;else&#123;</span></span><span class="line"><span class="comment">      return &lt;Login/&gt;</span></span><span class="line"><span class="comment">  &#125;</span></span><span class="line"><span class="comment">&#125;</span></span><span class="line"><span class="comment"></span></span><span class="line"><span class="comment">// 在 render 写</span></span><span class="line"><span class="comment">render()&#123;</span></span><span class="line"><span class="comment">  return(&lt;SignIn isLogin=&#123;isLogin&#125;/&gt;)</span></span><span class="line"><span class="comment">&#125;</span></span><span class="line"><span class="comment">*/</span></span><span class="line"></span><span class="line"><span class="comment">/*</span></span><span class="line"><span class="comment">也可以做成一个方法</span></span><span class="line"><span class="comment">getLogIn(isLogin) &#123;</span></span><span class="line"><span class="comment">  if(isLogin)&#123;</span></span><span class="line"><span class="comment">    return &lt;Logout /&gt;</span></span><span class="line"><span class="comment">  &#125;else&#123;</span></span><span class="line"><span class="comment">    return &lt;login/&gt;</span></span><span class="line"><span class="comment">  &#125;</span></span><span class="line"><span class="comment">&#125;</span></span><span class="line"><span class="comment"></span></span><span class="line"><span class="comment">render()&#123;</span></span><span class="line"><span class="comment">  return(&lt;div&gt;</span></span><span class="line"><span class="comment">  &#123;this.getLogin(isLogin)&#125;</span></span><span class="line"><span class="comment">  &lt;/div&gt;)</span></span><span class="line"><span class="comment">&#125;</span></span><span class="line"><span class="comment">*/</span></span><span class="line"></span><span class="line"><span class="comment">/*</span></span><span class="line"><span class="comment">还有一种用 &amp;&amp; 判断</span></span><span class="line"><span class="comment">&#123;isLogin &amp;&amp; &lt;Logout/&gt;&#125;</span></span><span class="line"><span class="comment">&#123;isLogin &amp;&amp; &lt;LoginIn/&gt;&#125;</span></span><span class="line"><span class="comment">*/</span></span></pre></td></tr></table></figure><h3 id="HOC"><a href="#HOC" class="headerlink" title="HOC"></a>HOC</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span><span class="line">48</span><span class="line">49</span><span class="line">50</span><span class="line">51</span><span class="line">52</span><span class="line">53</span><span class="line">54</span><span class="line">55</span><span class="line">56</span><span class="line">57</span><span class="line">58</span><span class="line">59</span><span class="line">60</span><span class="line">61</span><span class="line">62</span><span class="line">63</span><span class="line">64</span><span class="line">65</span><span class="line">66</span><span class="line">67</span><span class="line">68</span><span class="line">69</span><span class="line">70</span><span class="line">71</span><span class="line">72</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><span class="line"><span class="comment">传一个组件出一个组件</span></span><span class="line"><span class="comment">其实可以理解为一个给基础组件加方法的处理器</span></span><span class="line"><span class="comment">比如说有两个组件 Ad1 Ad2 他们有 abc 三个方法</span></span><span class="line"><span class="comment"></span></span><span class="line"><span class="comment">Ad1Component&#123;</span></span><span class="line"><span class="comment">  a()&#123;&#125;;b()&#123;&#125;;c()&#123;&#125;;</span></span><span class="line"><span class="comment">&#125;</span></span><span class="line"><span class="comment">Ad2Component&#123;</span></span><span class="line"><span class="comment">  a()&#123;&#125;;b()&#123;&#125;;c()&#123;&#125;;</span></span><span class="line"><span class="comment">&#125;</span></span><span class="line"><span class="comment"></span></span><span class="line"><span class="comment">那我们可以把方法抽离出一个 Basic 组件</span></span><span class="line"><span class="comment">BasicComponent&#123;</span></span><span class="line"><span class="comment">  a()&#123;&#125;;b()&#123;&#125;;c()&#123;&#125;;</span></span><span class="line"><span class="comment">&#125;</span></span><span class="line"><span class="comment"></span></span><span class="line"><span class="comment">然后写到 HOC 转换</span></span><span class="line"><span class="comment">function wrapper(WrapperComponent)&#123;</span></span><span class="line"><span class="comment">  return BasicComponent&#123;</span></span><span class="line"><span class="comment">    a()&#123;&#125;;b()&#123;&#125;;c()&#123;&#125;;</span></span><span class="line"><span class="comment">    render()&#123;</span></span><span class="line"><span class="comment">      return &lt;WrapperComponent /&gt;</span></span><span class="line"><span class="comment">    &#125;</span></span><span class="line"><span class="comment">  &#125;</span></span><span class="line"><span class="comment">&#125;</span></span><span class="line"><span class="comment">*/</span></span><span class="line"></span><span class="line"><span class="comment">// 写个例子</span></span><span class="line"><span class="comment">// 在 input 组件的名字改变的时候加上一些日志的方法但是不能 input 组件上写（为什么会有这个需求？因为有可能这个组件不是你自己写的）</span></span><span class="line"><span class="comment">/*</span></span><span class="line"><span class="comment">想到一个方法用 prototype 但是会影响原型链</span></span><span class="line"><span class="comment"> function logProps(InputComponent) &#123;</span></span><span class="line"><span class="comment">    InputComponent.prototype.componentWillReceiveProps = function(nextProps, nextState) &#123;</span></span><span class="line"><span class="comment">      console.log('============')</span></span><span class="line"><span class="comment">      console.log('Current props: ', this.props);</span></span><span class="line"><span class="comment">      console.log('Next props: ', nextProps);</span></span><span class="line"><span class="comment">    &#125;;</span></span><span class="line"><span class="comment">    return InputComponent;</span></span><span class="line"><span class="comment">&#125;</span></span><span class="line"><span class="comment">*/</span></span><span class="line"></span><span class="line"><span class="comment">// 正确的方法应该是利用 HOC 封装方法</span></span><span class="line"></span><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><span class="line">    componentWillReceiveProps() &#123;</span><span class="line"></span><span class="line">    &#125;</span><span class="line">    render() &#123;</span><span class="line">        <span class="keyword">return</span> &lt;div&gt;&#123;<span class="keyword">this</span>.props.name&#125;&lt;/div&gt;</span><span class="line">    &#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line">function logProps(<span class="type">WrappedComponent</span>) &#123;</span><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;  <span class="comment">// 匿名组件，要实现的共有方法都在这里做</span></span><span class="line">      componentWillReceiveProps(nextProps) &#123;    </span><span class="line">        console.log(<span class="symbol">'Current</span> props: ', <span class="keyword">this</span>.props);</span><span class="line">        console.log(<span class="symbol">'Next</span> props: ', nextProps);</span><span class="line">      &#125;</span><span class="line">      render() &#123;</span><span class="line">        <span class="keyword">return</span> &lt;<span class="type">WrappedComponent</span> &#123;...<span class="keyword">this</span>.props&#125; /&gt;;</span><span class="line">      &#125;</span><span class="line">    &#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line">const <span class="type">EnhancedComponent</span> = logProps(<span class="type">InputComponent</span>);</span><span class="line"></span><span class="line"> let name = <span class="symbol">'dala</span>o';</span><span class="line"> setInterval(() =&gt; &#123;</span><span class="line">    name += ' hah';</span><span class="line">    <span class="type">ReactDOM</span>.render(&lt;<span class="type">EnhancedComponent</span> name=&#123;name&#125; /&gt;, document.getElementById(<span class="symbol">'roo</span>t'));</span><span class="line"> &#125;, <span class="number">1000</span>)</span></pre></td></tr></table></figure><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p><a href="http://www.redux.org.cn/" target="_blank" rel="external">Redux 官方文档</a></p><p><a href="https://github.com/slashhuang/redux-annotation" target="_blank" rel="external">https://github.com/slashhuang/redux-annotation</a></p><p><img src="https://ooo.0o0.ooo/2017/11/04/59fd9c6002509.jpg" alt=""></p><h3 id="第一个简单的例子"><a href="#第一个简单的例子" class="headerlink" title="第一个简单的例子"></a>第一个简单的例子</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="external">Object.assign()</a></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><span class="line"><span class="keyword">const</span> initState = &#123;&#125;</span><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><span class="line"><span class="keyword">return</span> action</span><span class="line">&#125;</span><span class="line"><span class="keyword">const</span> store = createStore(reducer, initState)</span><span class="line">store.dispatch(&#123;</span><span class="line"><span class="keyword">type</span>: <span class="string">'init'</span>,</span><span class="line">payload: <span class="string">'hello world'</span></span><span class="line">&#125;)</span><span class="line"><span class="built_in">console</span>.log(store.getState())</span><span class="line"></span><span class="line"><span class="comment">// redux 的整体架构</span></span><span class="line"><span class="comment">// action (动作) ===&gt; 发起 AJAX</span></span><span class="line"><span class="comment">// reducer (Handler处理器) ===&gt; JSON 处理</span></span><span class="line"><span class="comment">// state (最后的状态) ===&gt; JSON 保存起来</span></span><span class="line"></span><span class="line"><span class="comment">// 通常从后端拉数据的流程是这样的</span></span><span class="line"><span class="comment">// AJAX ===&gt; JSON ===&gt; UI</span></span><span class="line"></span><span class="line"><span class="comment">// 所以上面这个代码拆分开来就是</span></span><span class="line"><span class="keyword">const</span> action = &#123;</span><span class="line">  <span class="keyword">type</span>: <span class="string">'init'</span>,</span><span class="line">  payload: <span class="string">'hello world'</span>,</span><span class="line">&#125;</span><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;  <span class="comment">// state 是前一次保存的数据状态</span></span><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, action);  <span class="comment">// 生成下一个数据状态</span></span><span class="line">&#125;</span><span class="line"><span class="keyword">const</span> store = createStore(reducer, initState)</span><span class="line">store.dispatch(action)</span><span class="line"><span class="built_in">console</span>.log(store.getState())</span></pre></td></tr></table></figure><h3 id="createStore-源码"><a href="#createStore-源码" class="headerlink" title="createStore 源码"></a>createStore 源码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span><span class="line">48</span><span class="line">49</span><span class="line">50</span><span class="line">51</span><span class="line">52</span><span class="line">53</span><span class="line">54</span><span class="line">55</span><span class="line">56</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要注意的是第一个参数和第二个参数（reducer, 初始化的 state）</span></span><span class="line">export <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">createStore</span><span class="params">(reducer, preloadedState, enhancer)</span></span></span><span class="line"><span class="function"></span></span><span class="line"><span class="function">/*</span></span><span class="line"><span class="function">判断...</span></span><span class="line"><span class="function">*/</span></span><span class="line"><span class="function"></span></span><span class="line"><span class="function"><span class="title">var</span> <span class="title">currentReducer</span> = <span class="title">reducer</span></span>;  <span class="comment">// 当前的处理器</span></span><span class="line"><span class="keyword">var</span> currentState = preloadedState;   <span class="comment">// 当前的state ===&gt; 初始化的 state</span></span><span class="line"><span class="keyword">var</span> currentListeners = []; </span><span class="line"><span class="keyword">var</span> nextListeners = currentListeners;</span><span class="line"><span class="keyword">var</span> isDispatching = <span class="keyword">false</span>;  <span class="comment">// 不执行</span></span><span class="line"></span><span class="line"><span class="comment">/*</span></span><span class="line"><span class="comment">往下看</span></span><span class="line"><span class="comment">*/</span></span><span class="line"></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><span class="line"><span class="keyword">return</span> currentState;  <span class="comment">// 直接 return currentState</span></span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">/*</span></span><span class="line"><span class="comment">往下看</span></span><span class="line"><span class="comment">*/</span></span><span class="line"></span><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span><span class="params">(action)</span> </span>&#123;</span><span class="line"></span><span class="line">    <span class="keyword">try</span> &#123;</span><span class="line">      isDispatching = <span class="keyword">true</span>;</span><span class="line">      currentState = currentReducer(currentState, action);  </span><span class="line">      <span class="comment">// 用当前的 reducer 处理当前的 state 和 action</span></span><span class="line">      <span class="comment">// 只要 dispatch(action) 就会处理一遍生成一个 state</span></span><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><span class="line">      isDispatching = <span class="keyword">false</span>;</span><span class="line">    &#125;</span><span class="line"></span><span class="line">    <span class="keyword">var</span> listeners = currentListeners = nextListeners;</span><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; listeners.length; i++) &#123;</span><span class="line">      <span class="keyword">var</span> listener = listeners[i];</span><span class="line">      listener();</span><span class="line">    &#125;</span><span class="line"></span><span class="line">    <span class="keyword">return</span> action;  <span class="comment">// 返回一个 action</span></span><span class="line">  &#125;</span><span class="line">  </span><span class="line"><span class="comment">/*</span></span><span class="line"><span class="comment">往下看</span></span><span class="line"><span class="comment">*/</span></span><span class="line"></span><span class="line">  <span class="keyword">return</span> _ref2 = &#123;</span><span class="line">    dispatch: dispatch,</span><span class="line">    subscribe: subscribe,</span><span class="line">    getState: getState,</span><span class="line">    replaceReducer: replaceReducer</span><span class="line">  &#125;, _ref2[$$observable] = observable, _ref2;</span><span class="line">  <span class="comment">// 最后也是返回出来</span></span></pre></td></tr></table></figure><h3 id="回看例子分析-createStore-源码"><a href="#回看例子分析-createStore-源码" class="headerlink" title="回看例子分析 createStore 源码"></a>回看例子分析 createStore 源码</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span><span class="line">48</span><span class="line">49</span><span class="line">50</span><span class="line">51</span><span class="line">52</span><span class="line">53</span><span class="line">54</span><span class="line">55</span><span class="line">56</span><span class="line">57</span><span class="line">58</span><span class="line">59</span><span class="line">60</span><span class="line">61</span><span class="line">62</span><span class="line">63</span><span class="line">64</span><span class="line">65</span><span class="line">66</span><span class="line">67</span><span class="line">68</span><span class="line">69</span><span class="line">70</span><span class="line">71</span><span class="line">72</span><span class="line">73</span><span class="line">74</span><span class="line">75</span><span class="line">76</span><span class="line">77</span><span class="line">78</span><span class="line">79</span><span class="line">80</span><span class="line">81</span><span class="line">82</span><span class="line">83</span><span class="line">84</span><span class="line">85</span><span class="line">86</span><span class="line">87</span><span class="line">88</span><span class="line">89</span><span class="line">90</span><span class="line">91</span><span class="line">92</span><span class="line">93</span><span class="line">94</span><span class="line">95</span><span class="line">96</span><span class="line">97</span><span class="line">98</span><span class="line">99</span><span class="line">100</span><span class="line">101</span><span class="line">102</span><span class="line">103</span></pre></td><td class="code"><pre><span class="line">import &#123; createStore &#125; from <span class="string">'redux'</span></span><span class="line">const initState = &#123;&#125;</span><span class="line">const action = &#123;</span><span class="line">  <span class="built_in">type</span>: <span class="string">'init'</span>,</span><span class="line">  payload: <span class="string">'hello world'</span>,</span><span class="line">&#125;</span><span class="line">const reducer = (state, action) =&gt; &#123;   // currentState = currentReducer(currentState, action);  </span><span class="line">  <span class="keyword">return</span> Object.assign(&#123;&#125;, state, action);  // 当前的数据状态</span><span class="line">&#125;</span><span class="line">debugger</span><span class="line">const store = createStore(reducer, initState)  // reducer = (state, action) =&gt; &#123;...&#125;, initState = &#123;&#125;</span><span class="line">debugger</span><span class="line">store.dispatch(action)  // 所以 store 有 dispatch 方法</span><span class="line">console.<span class="built_in">log</span>(store.getState())  // <span class="keyword">return</span> currentState</span><span class="line">// Object &#123;<span class="built_in">type</span>: <span class="string">"init"</span>, payload: <span class="string">"hello world"</span>&#125;</span><span class="line"></span><span class="line">// debugger 看过程</span><span class="line">// var currentReducer = reducer;  // currentReducer = <span class="function"><span class="keyword">function</span> <span class="title">reducer</span><span class="params">(state, action)</span></span>, reducer = <span class="function"><span class="keyword">function</span> <span class="title">reducer</span><span class="params">(state, action)</span></span></span><span class="line">// var currentState = preloadedState;  // currentState = Object &#123;&#125;, preloadedState = Object &#123;&#125;</span><span class="line">  </span><span class="line">/*</span><span class="line">跳到 dispatch <span class="keyword">return</span> 一个 API 集合</span><span class="line">*/</span><span class="line"></span><span class="line">/*</span><span class="line">下一个 debugger</span><span class="line">currentState = currentReducer(currentState, action); 进去看一下</span><span class="line"><span class="keyword">return</span> Object.assign(&#123;&#125;, state, action);  做一个覆盖</span><span class="line">currentState 变成了 Object &#123;<span class="built_in">type</span>: <span class="string">"init"</span>, payload: <span class="string">"hello world"</span>&#125;</span><span class="line">*/</span><span class="line"></span><span class="line">/*</span><span class="line">看一下 console.<span class="built_in">log</span>(store.getState())</span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getState</span><span class="params">()</span></span> &#123;</span><span class="line">    <span class="keyword">return</span> currentState; // 返回 currentState</span><span class="line">&#125;</span><span class="line">*/</span><span class="line"></span><span class="line"><span class="comment">--------------------------------------------------------------------</span></span><span class="line"></span><span class="line">// 修改一下代码</span><span class="line">import &#123; createStore &#125; from <span class="string">'redux'</span></span><span class="line">const initState = &#123;&#125;</span><span class="line">const action = &#123;</span><span class="line">  <span class="built_in">type</span>: <span class="string">'init'</span>,</span><span class="line">  payload: <span class="string">'hello world'</span>,</span><span class="line">&#125;</span><span class="line">const reducer = (state, action) =&gt; &#123;</span><span class="line">  <span class="keyword">return</span> Object.assign(&#123;&#125;, state, action);</span><span class="line">&#125;</span><span class="line">const store = createStore(reducer, initState)</span><span class="line">debugger</span><span class="line">store.subscribe(() =&gt; &#123;</span><span class="line">  console.<span class="built_in">log</span>(<span class="string">'我注册啦'</span>)</span><span class="line">&#125;)</span><span class="line">store.dispatch(action)</span><span class="line">console.<span class="built_in">log</span>(store.getState())</span><span class="line"></span><span class="line">// store.subscribe 进去看看</span><span class="line">/*</span><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">subscribe</span><span class="params">(listener)</span></span> &#123;</span><span class="line"></span><span class="line">//...</span><span class="line"></span><span class="line">    nextListeners.push(listener);    // nextListeners 是一个长度为零的数组，把 listener push 进去</span><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unsubscribe</span><span class="params">()</span></span> &#123;</span><span class="line">    // ...</span><span class="line">    &#125;;</span><span class="line">  &#125;</span><span class="line">*/</span><span class="line"></span><span class="line">// store.dispatch(action) 进去看看</span><span class="line">/*</span><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span><span class="params">(action)</span></span> &#123;</span><span class="line">    //...</span><span class="line">// 这里会读当前的观察者数组</span><span class="line">    var listeners = currentListeners = nextListeners;</span><span class="line">    <span class="keyword">for</span> (var i = <span class="number">0</span>; i &lt; listeners.length; i++) &#123;</span><span class="line">      var listener = listeners[i];</span><span class="line">      listener();</span><span class="line">    &#125;</span><span class="line"></span><span class="line">    <span class="keyword">return</span> action;</span><span class="line">  &#125;</span><span class="line">  </span><span class="line">  <span class="comment">---------------------</span></span><span class="line">  </span><span class="line">  在 console 打 listeners 会打印出 [<span class="function"><span class="keyword">function</span>]</span></span><span class="line"><span class="function">  <span class="title">listeners</span>[0] 是</span></span><span class="line"><span class="function">  <span class="title">function</span> <span class="params">()</span></span> &#123;</span><span class="line">  console.<span class="built_in">log</span>(<span class="string">'我注册啦'</span>);</span><span class="line">  &#125;</span><span class="line">*/</span><span class="line"></span><span class="line">/*</span><span class="line">需要注意的一点是</span><span class="line">  // When a store is created, an <span class="string">"INIT"</span> action is dispatched so that every</span><span class="line">  // reducer returns their initial state. This effectively populates</span><span class="line">  // the initial state tree.</span><span class="line">  dispatch(&#123; <span class="built_in">type</span>: ActionTypes.INIT &#125;)</span><span class="line">  也就是说，每调用一遍 createStore 就会执行一遍 dispatch(&#123; <span class="built_in">type</span>: ActionTypes.INIT &#125;)</span><span class="line">  所以初始化的 action 是 <span class="built_in">type</span>: <span class="string">"@@redux/INIT"</span></span><span class="line">*/</span></pre></td></tr></table></figure><h3 id="怎么改变-dom"><a href="#怎么改变-dom" class="headerlink" title="怎么改变 dom"></a>怎么改变 dom</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// HTML</span></span><span class="line">    &lt;div id=<span class="string">'root'</span>&gt;</span><span class="line">        <span class="number">1</span></span><span class="line">    &lt;/div&gt;</span><span class="line"><span class="comment">// JS</span></span><span class="line"><span class="keyword">import</span> &#123; createStore &#125; from <span class="string">'redux'</span></span><span class="line"><span class="keyword">const</span> ROOTDOM = <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><span class="line"><span class="keyword">const</span> initState = &#123;&#125;</span><span class="line"><span class="keyword">const</span> action = &#123;</span><span class="line">  type: <span class="string">'init'</span>,</span><span class="line">  payload: <span class="string">'hello world'</span>,</span><span class="line">&#125;</span><span class="line"><span class="keyword">const</span> reducer = (state, action) =&gt; &#123;  </span><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, action); </span><span class="line">&#125;</span><span class="line"><span class="keyword">const</span> store = createStore(reducer, initState) </span><span class="line">store.subscribe(() =&gt; &#123;</span><span class="line">  ROOTDOM.innerHTML = JSON.stringify(store.getState())</span><span class="line">&#125;)</span><span class="line">let counter = <span class="number">0</span></span><span class="line">ROOTDOM.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><span class="line">  counter++</span><span class="line">  <span class="keyword">const</span> action = &#123;</span><span class="line">      type: <span class="string">'click'</span>,</span><span class="line">      payload: counter</span><span class="line">  &#125;</span><span class="line">  store.dispatch(action)</span><span class="line">&#125;)</span></pre></td></tr></table></figure><h3 id="实现一个MVVM"><a href="#实现一个MVVM" class="headerlink" title="实现一个MVVM"></a>实现一个MVVM</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// HTML</span></span><span class="line">&lt;input id=<span class="string">"name"</span>/&gt;</span><span class="line">数据预览区</span><span class="line">&lt;div id=<span class="string">"preview"</span>&gt;&lt;/div&gt;</span><span class="line">&lt;div id=<span class="string">'root'</span>&gt;</span><span class="line"><span class="number">1</span></span><span class="line">&lt;/div&gt;</span><span class="line"><span class="comment">// JS</span></span><span class="line"><span class="keyword">import</span> &#123; createStore &#125; from <span class="string">'redux'</span>;</span><span class="line"><span class="keyword">const</span> initState = &#123;&#125;;</span><span class="line"><span class="keyword">const</span> action = &#123;</span><span class="line">type: <span class="string">'init'</span>,</span><span class="line">payload: <span class="string">'hello world'</span>,</span><span class="line">&#125;;</span><span class="line"><span class="keyword">const</span> reducer = (state, action) =&gt; &#123;</span><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, state, action);</span><span class="line">&#125;;</span><span class="line"><span class="keyword">const</span> store = createStore(reducer, initState);</span><span class="line"><span class="keyword">const</span> INPUTDOM = <span class="built_in">document</span>.getElementById(<span class="string">'name'</span>);</span><span class="line"><span class="keyword">const</span> PREVIEWDOM = <span class="built_in">document</span>.getElementById(<span class="string">'preview'</span>);</span><span class="line"><span class="keyword">const</span> digestUI = () =&gt; &#123;</span><span class="line">PREVIEWDOM.innerHTML = store.getState().payload;</span><span class="line"><span class="keyword">if</span> (PREVIEWDOM.innerHTML.length &gt; <span class="number">20</span>) &#123;</span><span class="line">alert(<span class="string">'length is 20'</span>)</span><span class="line">&#125;</span><span class="line">&#125;;</span><span class="line"><span class="keyword">const</span> inputChange = () =&gt;&#123;</span><span class="line">let val = INPUTDOM.value;</span><span class="line"><span class="keyword">const</span> action = &#123;</span><span class="line">type: <span class="string">'input_change'</span>,</span><span class="line">payload: val,</span><span class="line">&#125;;</span><span class="line">store.dispatch(action);</span><span class="line">&#125;;</span><span class="line">let counter = <span class="number">0</span>;</span><span class="line">INPUTDOM.addEventListener(<span class="string">'input'</span>, inputChange)</span><span class="line">store.subscribe(digestUI);</span><span class="line"></span><span class="line"><span class="comment">// 可以看出好处就是行为都是分离的</span></span></pre></td></tr></table></figure><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span><span class="line">48</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// redux中的applyMiddleware中间件</span></span><span class="line"><span class="comment">// Middleware makes it easier for software developers</span></span><span class="line"><span class="comment">// to implement 【communication and input/output】,</span></span><span class="line"><span class="comment">// so they can focus on the 【specific purpose of their application】.</span></span><span class="line"><span class="comment">// 更专注 service 服务 input/output service 输入和输出</span></span><span class="line"><span class="comment">// ajax ==&gt; json(乱得一笔) =service转换(中间件)=&gt; UI(整理成好的)</span></span><span class="line"><span class="comment">// express/Koa</span></span><span class="line"></span><span class="line"><span class="comment">// 前端</span></span><span class="line"><span class="comment">// ajax ==http==&gt;</span></span><span class="line"><span class="comment">// httpRequest(head,cookie,body)</span></span><span class="line"><span class="comment">// middlewares(解析cookie, 拿到post请求的数据)</span></span><span class="line"><span class="comment">// 数据就是好的一笔的数据</span></span><span class="line"><span class="comment">// 后端(node.js)</span></span><span class="line"></span><span class="line"><span class="comment">// 看一个例子</span></span><span class="line"><span class="comment">// 注意下面这些很多箭头的叫做高阶函数</span></span><span class="line"><span class="comment">// 例如 const highFunction = a =&gt; b =&gt; c =&gt; console.log(a+b+c); highFunction(1)(2)(3) // 6 // 一个函数执行完之后返回值是一个函数</span></span><span class="line"><span class="comment">// 多参函数 ===&gt; 单参函数</span></span><span class="line"></span><span class="line"><span class="comment">// 如果在 createStore 用上 enhancer 逻辑就会被 applyMiddleware 控制</span></span><span class="line"><span class="comment">// return enhancer(createStore)(reducer, preloadedState)</span></span><span class="line"></span><span class="line"><span class="comment">// 前一个 next 指向下一个 action=&gt; &#123; next(action) &#125;; 最后一个 next 指向 dispatch </span></span><span class="line"></span><span class="line"><span class="comment">// 没有中间件 action ==&gt; ==dispatch==&gt; reducer ==&gt; nextState;</span></span><span class="line"><span class="comment">// 有中间件 action ==middlewares==&gt; ==dispatch==&gt; reducer ==&gt; nextState;</span></span><span class="line"></span><span class="line"><span class="comment">// applyMiddleware 的思想是把一堆函数封装成一个函数</span></span><span class="line"></span><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><span class="line"><span class="keyword">const</span> logger1 = <span class="function"><span class="params">store</span> =&gt;</span> next =&gt; <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><span class="line">    <span class="built_in">console</span>.log(<span class="string">'current dipatch'</span> + <span class="built_in">JSON</span>.stringify(action));</span><span class="line">    next(action);</span><span class="line">&#125;;</span><span class="line"><span class="keyword">const</span> logger2 = <span class="function"><span class="params">store</span> =&gt;</span> next =&gt; <span class="function"><span class="params">action</span>=&gt;</span> &#123;</span><span class="line">    next(action);</span><span class="line">&#125;;</span><span class="line"><span class="keyword">const</span> logger3 = <span class="function"><span class="params">store</span> =&gt;</span> next =&gt; <span class="function"><span class="params">action</span>=&gt;</span> &#123;</span><span class="line">    next(action);</span><span class="line">&#125;;</span><span class="line"></span><span class="line"><span class="keyword">const</span> enhancer = applyMiddleware(logger1, logger2, logger3);</span><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state, action</span>) =&gt;</span> state;</span><span class="line"><span class="keyword">const</span> store = createStore(reducer, &#123;&#125;, enhancer);</span><span class="line">store.dispatch(&#123;<span class="keyword">type</span>:<span class="number">1</span>&#125;);</span><span class="line">store.dispatch(&#123;<span class="keyword">type</span>:<span class="number">2</span>&#125;);</span><span class="line">store.dispatch(&#123;<span class="keyword">type</span>:<span class="number">3</span>&#125;);</span></pre></td></tr></table></figure><p>action 的另一种写法 <a href="https://github.com/acdlite/flux-standard-action" target="_blank" rel="external">https://github.com/acdlite/flux-standard-action</a></p><p><a href="https://stackoverflow.com/questions/32646920/whats-the-at-symbol-in-the-redux-connect-decorator" target="_blank" rel="external">What’s the ‘@’ (at symbol) in the Redux @connect decorator?</a></p><p><a href="http://taobaofed.org/blog/2016/08/18/react-redux-connect/" target="_blank" rel="external">React 实践心得：react-redux 之 connect 方法详解</a></p><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ES6 教程</a></p><p><a href="https://frankietang.github.io/2017/10/14/%E6%91%B8%E5%88%B0%20ES6%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B/" target="_blank" rel="external">摸到 ES6 的门把手</a></p><p>Stage 0 - Strawman（展示阶段）</p><ul><li>Stage 1 - Proposal（征求意见阶段）</li><li>Stage 2 - Draft（草案阶段）</li><li>Stage 3 - Candidate（候选人阶段）</li><li>Stage 4 - Finished（定案阶段）</li></ul><p>配 babel 的时候有用 </p><h3 id="Set-和-Map-的数据结构"><a href="#Set-和-Map-的数据结构" class="headerlink" title="Set 和 Map 的数据结构"></a>Set 和 Map 的数据结构</h3><p><a href="https://github.com/ruanyf/es6tutorial/blob/2ac6e76b38f117f2acf6c465ab70709275b4241a/docs/set-map.md" target="_blank" rel="external">set-map</a></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向 Set 加入值的时候，不会发生类型转换，所以5和"5"是两个不同的值。Set 内部判断两个值是否不同，使用的算法叫做“Same-value equality”，它类似于精确相等运算符（===），主要的区别是NaN等于自身，而精确相等运算符认为NaN不等于自身。</span></span><span class="line">let s = new Set()</span><span class="line">s.size <span class="comment">// 0</span></span><span class="line">s.add(<span class="number">1</span>) <span class="comment">// &#123;1&#125;</span></span><span class="line">s.size <span class="comment">// 1</span></span><span class="line">s.add(<span class="number">1</span>) <span class="comment">// &#123;1&#125;</span></span><span class="line">s.size <span class="comment">// 1</span></span><span class="line">s.add('<span class="number">1</span>') <span class="comment">// &#123;1,'1'&#125;</span></span><span class="line">s.size <span class="comment">// 2</span></span><span class="line"></span><span class="line"><span class="comment">// 如何快速去除数组里的重复元素</span></span><span class="line">[...new Set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>])]  <span class="comment">// (5) [1, 2, 3, 4, 5]</span></span></pre></td></tr></table></figure><h3 id="Decorators"><a href="#Decorators" class="headerlink" title="Decorators"></a>Decorators</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对类做一个封装</span></span><span class="line"><span class="comment">// 懂了，大概就是在 class 上面绑定方法可以直接调用</span></span><span class="line"></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">target</span>)</span>&#123;</span><span class="line">  target.prototype.divide = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123;<span class="keyword">return</span> a/b&#125;</span><span class="line">  <span class="keyword">return</span> target</span><span class="line">&#125;</span><span class="line"></span><span class="line">@divide</span><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Math</span></span>&#123;</span><span class="line">  add(a,b)&#123;</span><span class="line">    <span class="keyword">return</span> a+b</span><span class="line">  &#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Math</span>()</span><span class="line"><span class="built_in">console</span>.log(m.divide(<span class="number">6</span>,<span class="number">3</span>)) <span class="comment">// 2</span></span><span class="line"></span><span class="line"><span class="comment">// 再封装多一个判断</span></span><span class="line"></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">needAdd</span>)</span>&#123;</span><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;</span><span class="line">    <span class="keyword">if</span>(needAdd)&#123;</span><span class="line">      target.prototype.divide = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123;<span class="keyword">return</span> a/b&#125;</span><span class="line">    &#125;</span><span class="line">  &#125;</span><span class="line">  <span class="keyword">return</span> target</span><span class="line">&#125;</span><span class="line"></span><span class="line">@divide(<span class="literal">true</span>)</span><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Math</span></span>&#123;</span><span class="line">  add(a,b)&#123;</span><span class="line">    <span class="keyword">return</span> a+b</span><span class="line">  &#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Math</span>()</span><span class="line"><span class="built_in">console</span>.log(m.divide(<span class="number">6</span>,<span class="number">3</span>)) <span class="comment">// 2</span></span></pre></td></tr></table></figure><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p><a href="https://webpack.js.org/" target="_blank" rel="external">webpack 官方文档</a></p><h3 id="webpack-与-react"><a href="#webpack-与-react" class="headerlink" title="webpack 与 react"></a>webpack 与 react</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主要是配 loaders</span></span><span class="line">&#123;</span><span class="line"><span class="symbol">    test:</span> /\.js[x]?$/,        <span class="comment">// 符合 js 或者 jsx</span></span><span class="line"><span class="symbol">    loader:</span> <span class="string">"babel-loader"</span>,   <span class="comment">// 运行 babel-loader</span></span><span class="line"><span class="symbol">    exclude:</span> /node_modules/</span><span class="line">&#125;,</span></pre></td></tr></table></figure><p>说实话 webpack 这东西翻翻文档就好，不用死记硬背的。要什么功能直接 Google ，<code>npm i -D &lt;package&gt;</code></p><p><a href="https://juejin.im/post/59bb37fa6fb9a00a554f89d2" target="_blank" rel="external">webpack：从入门到真实项目配置</a></p><h2 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h2><p><a href="http://babeljs.io/" target="_blank" rel="external">babel 官方文档</a></p><h3 id="babel-1"><a href="#babel-1" class="headerlink" title="babel"></a>babel</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为 react 用的是 JSX 所以需要用到 babel</span></span><span class="line"><span class="comment">// 不止 JSX 还有高阶组件(HOC) 要用到 es7 的 Decorator</span></span><span class="line"><span class="comment">// 把这一堆代码转换成 JS</span></span><span class="line"><span class="comment">// 以下是配法 </span></span><span class="line">&#123;</span><span class="line">  <span class="string">"presets"</span>: [</span><span class="line">     <span class="string">"stage-0"</span>, <span class="comment">// 草案 0</span></span><span class="line">     <span class="string">"es2015"</span>,  <span class="comment">// es6</span></span><span class="line">     <span class="string">"react"</span>    <span class="comment">// react</span></span><span class="line">  ],</span><span class="line">   <span class="string">"plugins"</span>: [<span class="string">"transform-decorators-legacy"</span>]  <span class="comment">// 翻译 Decorator</span></span><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;补基础：React-Redux-ES6-webpack-babel&quot;&gt;&lt;a href=&quot;#补基础：React-Redux-ES6-webpack-babel&quot; class=&quot;headerlink&quot; title=&quot;补基础：React-Redux-ES6-webpac
      
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>deepin shadowsocks-qt5 全局翻了个墙</title>
    <link href="http://yoursite.com/2017/10/25/deepin%20shadowsocks-qt5%20%E5%85%A8%E5%B1%80%E7%BF%BB%E4%BA%86%E4%B8%AA%E5%A2%99/"/>
    <id>http://yoursite.com/2017/10/25/deepin shadowsocks-qt5 全局翻了个墙/</id>
    <published>2017-10-24T16:58:53.000Z</published>
    <updated>2017-11-11T14:11:32.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="deepin-shadowsocks-qt5-全局翻了个墙"><a href="#deepin-shadowsocks-qt5-全局翻了个墙" class="headerlink" title="deepin shadowsocks-qt5 全局翻了个墙"></a>deepin shadowsocks-qt5 全局翻了个墙</h1><p>最近真的是非常时期 <code>git push</code> <code>git pull</code> <code>git clone</code> 全部显示了</p><p>Connection closed by 192.30.255.113 port 22</p><p>以下是解决办法</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span></pre></td><td class="code"><pre><span class="line">sudo apt-get install shadowsocks-qt5</span><span class="line">sudo apt-get install proxychains</span><span class="line"><span class="comment">// 配置 /etc/proxychains.conf</span></span><span class="line"><span class="comment">// 不要 socks4 127.0.0.1 9095 加上</span></span><span class="line">socks5 <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">1080</span></span><span class="line"><span class="comment">// 然后在每一条命令都加上</span></span><span class="line">proxychains</span></pre></td></tr></table></figure><p>关于怎么配 shadowsocks-qt5 网上一搜一大把，祝各位看到这篇文章能早日肉身翻墙吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;deepin-shadowsocks-qt5-全局翻了个墙&quot;&gt;&lt;a href=&quot;#deepin-shadowsocks-qt5-全局翻了个墙&quot; class=&quot;headerlink&quot; title=&quot;deepin shadowsocks-qt5 全局翻了个墙&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="fq" scheme="http://yoursite.com/tags/fq/"/>
    
  </entry>
  
  <entry>
    <title>补基础：函数</title>
    <link href="http://yoursite.com/2017/10/24/%E8%A1%A5%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/10/24/补基础：函数/</id>
    <published>2017-10-23T17:19:56.000Z</published>
    <updated>2017-11-05T14:42:01.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="补基础：函数"><a href="#补基础：函数" class="headerlink" title="补基础：函数"></a>补基础：函数</h1><blockquote><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="external">函数</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments" target="_blank" rel="external">实参</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/length" target="_blank" rel="external">length</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="external">call</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="external">apply</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="external">bind</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function*" target="_blank" rel="external">Generator Function</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Generator" target="_blank" rel="external">Generator</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#iterator" target="_blank" rel="external">迭代器协议</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" target="_blank" rel="external">for of</a></li></ul></blockquote><h2 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span></pre></td><td class="code"><pre><span class="line">function fn() &#123;</span><span class="line">  console.log(1)</span><span class="line">&#125;</span><span class="line"></span><span class="line">fn() // 1</span><span class="line"></span><span class="line">// 传东西</span><span class="line">function fn(num, fn) &#123;</span><span class="line">  console.log(fn(num))</span><span class="line">&#125;</span><span class="line"></span><span class="line">fn(1, function(a)&#123;</span><span class="line">  return a + 1</span><span class="line">&#125;) // 2</span></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// whether fn is function</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;</span><span class="line"></span><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> fn === <span class="string">'function'</span>)</span><span class="line"><span class="built_in">console</span>.log(fn <span class="keyword">instanceof</span> <span class="built_in">Function</span>)</span><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(fn) === <span class="string">'[object Function]'</span>)</span></pre></td></tr></table></figure><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数调用和没调用的区别</span></span><span class="line">function fn2() &#123;</span><span class="line">  <span class="keyword">return</span> <span class="number">2</span></span><span class="line">&#125;</span><span class="line"></span><span class="line">fn2()</span><span class="line"></span><span class="line"><span class="keyword">let</span> obj = &#123;</span><span class="line">  <span class="function"><span class="keyword">fn</span>: fn2</span></span><span class="line"><span class="function">&#125;</span></span><span class="line"><span class="function"></span></span><span class="line"><span class="function">console.<span class="built_in">log</span><span class="params">(obj.<span class="keyword">fn</span>)</span>     <span class="comment">// 返回是一个函数</span></span></span><span class="line"><span class="function">console.<span class="built_in">log</span><span class="params">(obj.<span class="keyword">fn</span>()</span>)   <span class="comment">// 返回函数的结果</span></span></span></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数的借用</span></span><span class="line"><span class="keyword">let</span> user = &#123;</span><span class="line">  name: <span class="string">'xiaohong'</span>,</span><span class="line">  sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello my name is '</span> + <span class="keyword">this</span>.name)</span><span class="line">  &#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line">uesr.sayHi()  <span class="comment">// hello my name is xiaohong</span></span><span class="line"></span><span class="line"><span class="comment">// 怎么借用方法</span></span><span class="line"><span class="keyword">let</span> user2 = &#123;<span class="attr">name</span>: <span class="string">'xiaohei'</span>&#125;</span><span class="line"><span class="comment">// to-do</span></span><span class="line">user.sayHi.call(user2)</span><span class="line"><span class="comment">// hello my name is xiaohong</span></span><span class="line"></span><span class="line"></span><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><span class="line">&#125;, <span class="number">1000</span>)</span><span class="line"></span><span class="line"><span class="comment">// 怎么写成一行呢？</span></span><span class="line">setTimeout(<span class="built_in">console</span>.log.bind(<span class="literal">null</span>, <span class="string">'hello'</span>), <span class="number">1000</span>)</span><span class="line"></span><span class="line"><span class="comment">// 举个实用场景</span></span><span class="line"><span class="comment">// var collection = document.getElementsByClassName('a')</span></span><span class="line"><span class="comment">// 但是 collection 没有 forEach 方法</span></span><span class="line"><span class="comment">// Array.prototype.forEach.call(collection)</span></span></pre></td></tr></table></figure><h2 id="形参-parameters-vs-实参-arguments"><a href="#形参-parameters-vs-实参-arguments" class="headerlink" title="形参(parameters) vs 实参(arguments)"></a>形参(parameters) vs 实参(arguments)</h2><p>实参是实际传进来的参数</p><p>形参是定义时候的参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span></pre></td><td class="code"><pre><span class="line">// arguments</span><span class="line">function fn(a, b) &#123;</span><span class="line">console.log(a, b)</span><span class="line">  console.log(arguments)</span><span class="line">  console.log(arguments.length)</span><span class="line">&#125;</span><span class="line"></span><span class="line">function fn(a, b, ...args) &#123;</span><span class="line">console.log(a, b)</span><span class="line">  console.log(args)   // [3,4]</span><span class="line">  let args1 = Array.prototype.slice.call(arguments, 2)</span><span class="line">  console.log(args1)  // [3,4]</span><span class="line">&#125;</span><span class="line"></span><span class="line">fn(1,2,3,4)</span><span class="line">// 1 2</span><span class="line">// &#123; &apos;0&apos;: 1, &apos;1&apos;: 2, &apos;2&apos;: 3, &apos;3&apos;: 4 &#125;</span><span class="line">// 4</span><span class="line"></span><span class="line">let arr = [1,2,3]</span><span class="line">arr.push(1,2,3,4,5)</span><span class="line">console.log(arr)</span><span class="line"></span><span class="line">Array.prototype.push = function() &#123;</span><span class="line">// arguments</span><span class="line">  let args = Array.prototype.slice.call(arguments)</span><span class="line">&#125;</span></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// parameters</span></span><span class="line">function fn(<span class="selector-tag">a</span>, b) &#123;</span><span class="line">  console.log(arguments.length)</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="function"><span class="title">fn</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span></span></span><span class="line">console.log(fn.length) <span class="comment">// 2 形参个数 = 函数名.length</span></span><span class="line"></span><span class="line"><span class="comment">// 实现一个功能</span></span><span class="line">function sum(<span class="selector-tag">a</span>, <span class="selector-tag">b</span>, c) &#123;</span><span class="line">  return <span class="selector-tag">a</span> + <span class="selector-tag">b</span> + c</span><span class="line">&#125;</span><span class="line"></span><span class="line">console.log(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><span class="line"></span><span class="line"><span class="comment">// fn 是一个函数</span></span><span class="line">function curry(fn) &#123;</span><span class="line"><span class="selector-tag">var</span> len = fn.length</span><span class="line">  return function f1() &#123;</span><span class="line">      let args = Array<span class="selector-class">.prototype</span><span class="selector-class">.slice</span><span class="selector-class">.call</span>(arguments)</span><span class="line">      <span class="keyword">if</span>(args<span class="selector-class">.length</span> &lt; len) &#123;</span><span class="line">          return function() &#123;</span><span class="line">              let args2 = Array<span class="selector-class">.prototype</span><span class="selector-class">.slice</span><span class="selector-class">.call</span>(arguments)</span><span class="line">              return f1.apply(this, args.concat(args2))</span><span class="line">          &#125;</span><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><span class="line">          return fn.apply(null,args)</span><span class="line">      &#125;</span><span class="line">  &#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line">let sumWithCurry = curry(sum) </span><span class="line"><span class="function"><span class="title">sumWithCurry</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span></span>   <span class="comment">// 6 len = 3, args.length = 3 sum.apply(null,[1,2,3])</span></span><span class="line"><span class="function"><span class="title">sumWithCurry</span><span class="params">(<span class="number">1</span>)</span><span class="params">(<span class="number">2</span>,<span class="number">3</span>)</span></span>  <span class="comment">// 6</span></span><span class="line"></span><span class="line"><span class="comment">// 先运行 sumWithCurry(1) 然后吃掉后面的函数 利用 concat </span></span><span class="line"></span><span class="line"><span class="function"><span class="title">sumWithCurry</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span><span class="params">(<span class="number">3</span>)</span></span>  <span class="comment">// 6</span></span></pre></td></tr></table></figure><p><a href="https://github.com/n0ruSh/the-art-of-reading/issues/5" target="_blank" rel="external">柯里化</a></p><h2 id="生成器-Generator"><a href="#生成器-Generator" class="headerlink" title="生成器(Generator)"></a>生成器(Generator)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span><span class="line">48</span><span class="line">49</span><span class="line">50</span><span class="line">51</span><span class="line">52</span><span class="line">53</span><span class="line">54</span><span class="line">55</span><span class="line">56</span><span class="line">57</span><span class="line">58</span><span class="line">59</span><span class="line">60</span><span class="line">61</span><span class="line">62</span><span class="line">63</span><span class="line">64</span><span class="line">65</span><span class="line">66</span><span class="line">67</span><span class="line">68</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 function 加一个 * 号就可以变成一个 Generator 函数</span></span><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><span class="line">  <span class="keyword">yield</span> <span class="number">4</span>;</span><span class="line">  <span class="comment">// console.log('hello')</span></span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> fn)     <span class="comment">// function</span></span><span class="line"><span class="built_in">console</span>.log(fn())          <span class="comment">// &#123;&#125;</span></span><span class="line"><span class="keyword">let</span> iterator = fn()</span><span class="line"><span class="built_in">console</span>.log(iterator.next())  <span class="comment">// &#123;value: 3, done: false&#125;</span></span><span class="line"><span class="built_in">console</span>.log(iterator.next())  <span class="comment">// &#123;value: 4, done: false&#125;</span></span><span class="line"><span class="built_in">console</span>.log(iterator.next())  <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><span class="line"><span class="comment">// 3 -&gt; 4 -&gt; done</span></span><span class="line"></span><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> fn()) &#123;  <span class="comment">// for of 遍历方法，可以遍历数组</span></span><span class="line">  <span class="built_in">console</span>.log(i)</span><span class="line">&#125;</span><span class="line"><span class="comment">// 3</span></span><span class="line"><span class="comment">// 4</span></span><span class="line"></span><span class="line"><span class="comment">// 看看是怎么做到的</span></span><span class="line"><span class="keyword">let</span> arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><span class="line"><span class="keyword">let</span> iterator = arr[<span class="built_in">Symbol</span>.iterator]()</span><span class="line"><span class="built_in">console</span>.log(iterator.next()) <span class="comment">// &#123;value: 2, done: false&#125;</span></span><span class="line"><span class="built_in">console</span>.log(iterator.next()) <span class="comment">// &#123;value: 3, done: false&#125;</span></span><span class="line"><span class="built_in">console</span>.log(iterator.next()) <span class="comment">// &#123;value: 4, done: false&#125;</span></span><span class="line"><span class="built_in">console</span>.log(iterator.next()) <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><span class="line"><span class="comment">// 只要符合迭代器 就可以用 for of 方法</span></span><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j <span class="keyword">of</span> iterator) &#123;</span><span class="line">  <span class="built_in">console</span>.log(j)</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">// 也可以遍历对象</span></span><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>.prototype, <span class="built_in">Symbol</span>.iterator, &#123;</span><span class="line">  enumerable: <span class="literal">false</span>,</span><span class="line">  writable: <span class="literal">false</span>,</span><span class="line">  configurable: <span class="literal">false</span>,</span><span class="line">  value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><span class="line">      <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><span class="line">      <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(self); <span class="comment">// ['a', 'd']</span></span><span class="line">      <span class="keyword">let</span> index = <span class="number">0</span>;</span><span class="line">      <span class="keyword">return</span> &#123;</span><span class="line">          next: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><span class="line">              <span class="keyword">return</span> &#123;</span><span class="line">                  value: self[keys[index++]],  <span class="comment">// 加点注释啥的 + 'suffix'</span></span><span class="line">                  done: index &gt; keys.length</span><span class="line">              &#125;</span><span class="line">          &#125;</span><span class="line">      &#125;</span><span class="line">  &#125;</span><span class="line">&#125;)</span><span class="line"></span><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="string">'b'</span>, <span class="attr">c</span>: <span class="string">'d'</span>&#125;</span><span class="line"></span><span class="line"><span class="keyword">let</span> iterator2 = obj[<span class="built_in">Symbol</span>.iterator]()</span><span class="line"><span class="built_in">console</span>.log(iterator2.next()) <span class="comment">// &#123;value: 'b', done: false&#125;</span></span><span class="line"><span class="built_in">console</span>.log(iterator2.next()) <span class="comment">// &#123;value: 'd', done: false&#125;</span></span><span class="line"><span class="built_in">console</span>.log(iterator2.next()) <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><span class="line"></span><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> val <span class="keyword">of</span> obj) &#123;</span><span class="line">  <span class="built_in">console</span>.log(val)</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="keyword">let</span> obj2 = &#123;<span class="attr">name</span>: <span class="string">'xiaohong'</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">sex</span>: <span class="string">'male'</span>&#125;</span><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j <span class="keyword">of</span> obj2) &#123;  <span class="comment">// 只要支持迭代器协议就可以了</span></span><span class="line">  <span class="built_in">console</span>.log(j)</span><span class="line">&#125;</span></pre></td></tr></table></figure><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 彩蛋 和 Promise 的比较</span></span><span class="line"></span><span class="line"><span class="comment">// Promise</span></span><span class="line"><span class="keyword">new</span> Promise()</span><span class="line">.<span class="keyword">then</span>()</span><span class="line">.<span class="keyword">then</span>()</span><span class="line">.<span class="keyword">then</span>()</span><span class="line"></span><span class="line"><span class="comment">// yield + generator</span></span><span class="line"><span class="keyword">let</span> a = <span class="keyword">yield</span> promise1</span><span class="line"><span class="keyword">let</span> b = <span class="keyword">yield</span> promise2</span><span class="line"><span class="keyword">let</span> c = <span class="keyword">yield</span> promise3</span><span class="line"><span class="comment">// 看起来像是同步，实际上是异步</span></span></pre></td></tr></table></figure><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span></pre></td><td class="code"><pre><span class="line">// 彩蛋<span class="number">2</span> 为什么不支持 <span class="keyword">for</span> <span class="keyword">of</span> 遍历对象</span><span class="line">// 原因有可能是这样的</span><span class="line">// 数组不关心索引，对象关心</span><span class="line"></span><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>] = &#123;</span><span class="line">  <span class="string">'0'</span> : <span class="string">'a'</span>,</span><span class="line">  <span class="string">'1'</span> : <span class="string">'b'</span>,</span><span class="line">  <span class="string">'2'</span> : <span class="string">'c'</span>,</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="keyword">let</span> obj = &#123;</span><span class="line">  <span class="string">'a'</span>: <span class="string">'b'</span>,</span><span class="line">  <span class="string">'c'</span>: <span class="string">'d'</span></span><span class="line">&#125;</span></pre></td></tr></table></figure><p>其实有两个新方法，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/values" target="_blank" rel="external">Object.values()</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries" target="_blank" rel="external">Object.entries()</a> 可以遍历，Object.values() 只返回 value ，Object.entries() 返回全部</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 彩蛋3 Symbol 是用来干嘛的？</span></span><span class="line"><span class="comment">// 避免相等的值重复</span></span><span class="line">let <span class="selector-tag">a</span> = <span class="string">'a'</span></span><span class="line">let <span class="selector-tag">b</span> = <span class="string">'a'</span></span><span class="line"></span><span class="line">let obj = &#123;&#125;</span><span class="line">obj[a]</span><span class="line">obj[b]</span></pre></td></tr></table></figure><p><a href="http://www.infoq.com/cn/articles/es6-in-depth-symbols" target="_blank" rel="external">深入浅出ES6（八）：Symbols</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;补基础：函数&quot;&gt;&lt;a href=&quot;#补基础：函数&quot; class=&quot;headerlink&quot; title=&quot;补基础：函数&quot;&gt;&lt;/a&gt;补基础：函数&lt;/h1&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>补基础：对象与数组的遍历方式</title>
    <link href="http://yoursite.com/2017/10/22/%E8%A1%A5%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%AF%B9%E8%B1%A1%E4%B8%8E%E6%95%B0%E7%BB%84%E7%9A%84%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/10/22/补基础：对象与数组的遍历方式/</id>
    <published>2017-10-22T13:40:50.000Z</published>
    <updated>2017-11-05T14:42:01.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="补基础：对象与数组的遍历方式"><a href="#补基础：对象与数组的遍历方式" class="headerlink" title="补基础：对象与数组的遍历方式"></a>补基础：对象与数组的遍历方式</h1><blockquote><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames" target="_blank" rel="external">Object.getOwnPropertyNames</a></li></ul><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="external">Object.defineProperty</a></li></ul><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor" target="_blank" rel="external">Object.getOwnPropertyDescriptor</a></li></ul><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors" target="_blank" rel="external">getOwnPropertyDescriptors</a></li></ul></blockquote><h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><span class="line"></span><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++)&#123;</span><span class="line">  <span class="built_in">console</span>.log(arr[i])</span><span class="line">&#125;</span><span class="line"></span><span class="line">arr.forEach(<span class="function">(<span class="params">it, index, self</span>) =&gt;</span> &#123;</span><span class="line">  <span class="built_in">console</span>.log(it, index, self)</span><span class="line">&#125;)</span><span class="line"><span class="comment">// 1 0 [1,2,3]</span></span><span class="line"><span class="comment">// 2 1 [1,2,3]</span></span><span class="line"><span class="comment">// 3 2 [1,2,3]</span></span><span class="line"><span class="comment">// 等于</span></span><span class="line">arr.forEach(<span class="built_in">console</span>.log)</span></pre></td></tr></table></figure><h2 id="对象的遍历"><a href="#对象的遍历" class="headerlink" title="对象的遍历"></a>对象的遍历</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="string">'b'</span>, <span class="attr">c</span>: <span class="string">'d'</span>&#125;</span><span class="line"></span><span class="line"><span class="comment">// 打印出</span></span><span class="line"><span class="comment">// key a -&gt; b</span></span><span class="line"><span class="comment">// key c -&gt; d</span></span><span class="line"></span><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><span class="line">  <span class="built_in">console</span>.log(<span class="string">`key <span class="subst">$&#123;key&#125;</span> -&gt; <span class="subst">$&#123;obj[key]&#125;</span>`</span>)</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">// 要注意的是，for in 会遍历原型链上的属性</span></span><span class="line"><span class="comment">// 但是并没有打印到 console.log(obj.toString) 这个值</span></span><span class="line"><span class="comment">// 没有打印 key toString -&gt; [Function: toString]</span></span><span class="line"></span><span class="line"><span class="built_in">Object</span>.prototype.test = <span class="string">'mytest'</span></span><span class="line"></span><span class="line"><span class="comment">// key a -&gt; b</span></span><span class="line"><span class="comment">// key c -&gt; d</span></span><span class="line"><span class="comment">// key test -&gt; mytest</span></span><span class="line"><span class="comment">// 说明确实会遍历找到原型链上的属性</span></span><span class="line"><span class="comment">// 那为什么 toString 没有打印出来？</span></span><span class="line"></span><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(<span class="built_in">Object</span>.prototype, <span class="string">'toString'</span>))</span><span class="line"><span class="comment">// &#123;writable: true, enumerable: false, configurable: true, value: ƒ&#125;</span></span><span class="line"><span class="comment">// 通过 getOwnPropertyDescriptor 看到 enumerable 的确是 false ，说明了不可枚举。 </span></span><span class="line"><span class="comment">// 所以说 Object.prototype 里面内置的方法大多数都是不可枚举的</span></span></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 那怎么可以只 for in 自身属性呢而不会遍历其他赋予到原型链上的属性呢？ （有的第三方库会在原型链上赋值）</span></span><span class="line"></span><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="string">'b'</span>, <span class="attr">c</span>: <span class="string">'d'</span>&#125;</span><span class="line"></span><span class="line"><span class="built_in">Object</span>.prototype.test = <span class="string">'mytest'</span></span><span class="line"></span><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><span class="line"><span class="comment">// 只遍历自身属性 可以加一层判断</span></span><span class="line"><span class="keyword">if</span>(obj.hasOwnProperty(key)) &#123;</span><span class="line">      <span class="built_in">console</span>.log(<span class="string">`key <span class="subst">$&#123;key&#125;</span> -&gt; <span class="subst">$&#123;obj[key]&#125;</span>`</span>)</span><span class="line">&#125;</span><span class="line">&#125;</span></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 看一个使用场景</span></span><span class="line"><span class="selector-tag">function</span> <span class="selector-tag">validUser</span>(obj) &#123;</span><span class="line">    <span class="comment">// 同时具有name, age属性的为合法用户</span></span><span class="line"><span class="selector-tag">return</span> <span class="selector-tag">obj</span><span class="selector-class">.hasOwnProperty</span>(<span class="string">'name'</span>) <span class="selector-tag">&amp;</span><span class="selector-tag">&amp;</span> <span class="selector-tag">obj</span><span class="selector-class">.hasOwnProperty</span>(<span class="string">'age'</span>)</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="selector-tag">console</span><span class="selector-class">.log</span>(validUser(&#123;<span class="attribute">name</span>: <span class="string">'mike'</span>&#125;)); <span class="comment">// false;</span></span><span class="line"><span class="selector-tag">console</span><span class="selector-class">.log</span>(validUser(&#123;<span class="attribute">age</span>: <span class="number">15</span>&#125;)); <span class="comment">// false</span></span><span class="line"><span class="selector-tag">console</span><span class="selector-class">.log</span>(validUser(&#123;<span class="attribute">name</span>: <span class="string">'xiaohong'</span>, <span class="attribute">age</span>: <span class="number">18</span>&#125;)); <span class="comment">// true</span></span></pre></td></tr></table></figure><p>要注意不能用 <code>(!!obj.name &amp;&amp; !!obj.age)</code> 这种方法，要考虑到 <code>{age: 0}</code> 的可能性或者其他 如：<code>!!0 -&gt; false</code> <code>!!{} -&gt; true</code> <code>!![] -&gt; true</code> <code>!!&#39;&#39; -&gt; false</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多个属性</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validUser</span>(<span class="params">obj</span>) </span>&#123;</span><span class="line">    <span class="comment">// 同时具有 name, age, sex 属性的为合法用户</span></span><span class="line">    <span class="comment">// 若是上面那种做法，会导致多属性很麻烦</span></span><span class="line"><span class="comment">// return obj.hasOwnProperty('name') &amp;&amp; </span></span><span class="line"><span class="comment">//      obj.hasOwnProperty('age') &amp;&amp;</span></span><span class="line"><span class="comment">//      obj.hasOwnProperty('sex')</span></span><span class="line"><span class="comment">// 以下为解决方法</span></span><span class="line"><span class="keyword">return</span> requiredFields.every(<span class="function">(<span class="params">it</span>) =&gt;</span> &#123;</span><span class="line">      <span class="keyword">return</span> obj.hasOwnProperty(it)</span><span class="line">&#125;)</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">// 可以先配置成一个数组, 改变量就好</span></span><span class="line"><span class="keyword">let</span> requiredFields = [<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'sex'</span>]</span><span class="line"></span><span class="line"><span class="built_in">console</span>.log(validUser(&#123;<span class="attr">name</span>: <span class="string">'mike'</span>&#125;)); <span class="comment">// false;</span></span><span class="line"><span class="built_in">console</span>.log(validUser(&#123;<span class="attr">age</span>: <span class="number">15</span>&#125;)); <span class="comment">// false</span></span><span class="line"><span class="built_in">console</span>.log(validUser(&#123;<span class="attr">name</span>: <span class="string">'xiaohong'</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;)); <span class="comment">// true</span></span><span class="line"><span class="built_in">console</span>.log(validUser(&#123;<span class="attr">name</span>: <span class="string">'xiaohong'</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">sex</span>: <span class="string">'ddd'</span>&#125;)); <span class="comment">// true</span></span></pre></td></tr></table></figure><h2 id="Object-keys-obj"><a href="#Object-keys-obj" class="headerlink" title="Object.keys(obj)"></a>Object.keys(obj)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 另外一种遍历方法 Object.keys(obj)</span></span><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="string">'b'</span>, <span class="attr">c</span>: <span class="string">'d'</span>&#125;</span><span class="line"></span><span class="line"><span class="built_in">Object</span>.prototype.test = <span class="string">'myTest'</span></span><span class="line"></span><span class="line"><span class="built_in">Object</span>.keys(obj).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><span class="line">  <span class="built_in">console</span>.log(<span class="string">`key <span class="subst">$&#123;key&#125;</span> -&gt; <span class="subst">$&#123;obj[key]&#125;</span>`</span>)</span><span class="line">&#125;)</span><span class="line"></span><span class="line"><span class="comment">// 这个方法只能遍历到自身可枚举属性，那有没有办法可以遍历到不可枚举属性呢？</span></span><span class="line"></span><span class="line"><span class="comment">// 打印所有自身属性，包含不可枚举</span></span><span class="line"></span><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(obj)) <span class="comment">// ["a", "c", "nonEnumerable"]</span></span><span class="line"></span><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(obj).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><span class="line">  <span class="built_in">console</span>.log(<span class="string">`key <span class="subst">$&#123;key&#125;</span> -&gt; <span class="subst">$&#123;obj[key]&#125;</span>`</span>)</span><span class="line">&#125;)</span><span class="line"></span><span class="line"><span class="comment">// key a -&gt; b</span></span><span class="line"><span class="comment">// key c -&gt; d</span></span><span class="line"><span class="comment">// key nonEnumerable -&gt; static</span></span><span class="line"></span><span class="line"><span class="comment">// 设置不可枚举的方法</span></span><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'nonEnumerable'</span>, &#123;</span><span class="line">    enumerable: <span class="literal">false</span>,</span><span class="line">    configurable: <span class="literal">false</span>,</span><span class="line">    writable: <span class="literal">false</span>,</span><span class="line">    value: <span class="string">'static'</span></span><span class="line">&#125;);</span><span class="line"></span><span class="line"><span class="built_in">console</span>.log(obj.nonEnumerable) <span class="comment">// 'static'</span></span><span class="line"><span class="built_in">console</span>.log(obj.hasOwnProperty(<span class="string">'nonEnumerable'</span>)) <span class="comment">// ture</span></span><span class="line"><span class="comment">// 说明 obj 自身有 nonEnumerable ，设置为 static</span></span></pre></td></tr></table></figure><h2 id="get-set"><a href="#get-set" class="headerlink" title="get - set"></a>get - set</h2><p>数据双向绑定</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;a: <span class="string">'b'</span>&#125;</span><span class="line"></span><span class="line"><span class="comment">// 可以这样</span></span><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'c'</span>, &#123;</span><span class="line">    <span class="keyword">get</span>() &#123;</span><span class="line">    <span class="comment">// business logic 业务逻辑</span></span><span class="line">    <span class="comment">// if(...) &#123;</span></span><span class="line">        <span class="comment">//  throw Error()</span></span><span class="line">    <span class="comment">// &#125; </span></span><span class="line">    <span class="comment">// return 3 </span></span><span class="line">      <span class="keyword">return</span> <span class="number">2</span></span><span class="line">    &#125;,</span><span class="line">    <span class="keyword">set</span>() &#123;</span><span class="line">   <span class="comment">// 绑定逻辑 vue 的原理</span></span><span class="line">      <span class="built_in">console</span>.log(<span class="string">'setting value'</span>)</span><span class="line">    &#125;</span><span class="line">&#125;);</span><span class="line"></span><span class="line"><span class="built_in">console</span>.log(obj.c) <span class="comment">// 在什么情况下会打印出 2 ？</span></span><span class="line">obj.c = <span class="number">10</span>         <span class="comment">// 相当于运行了 set() 这个函数 打印出 setting value</span></span><span class="line"><span class="built_in">console</span>.log(obj.c) <span class="comment">// 仍然是 2</span></span><span class="line"></span><span class="line"><span class="comment">// 也就是说可以变成一个私有变量</span></span></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果要设置深层次的赋值</span></span><span class="line">obj = &#123;</span><span class="line">    a: &#123;</span><span class="line">        b: &#123;</span><span class="line">            c: &#123;</span><span class="line">                d: <span class="number">3</span></span><span class="line">            &#125;</span><span class="line">        &#125;</span><span class="line">    &#125;</span><span class="line">&#125;</span><span class="line"><span class="built_in">console</span>.log(obj.a.b.c.d); <span class="comment">// 3</span></span><span class="line"></span><span class="line"><span class="comment">// 用 defineProperty</span></span><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'_deep'</span>, &#123;</span><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><span class="line">        <span class="keyword">return</span> obj.a.b.c.d;</span><span class="line">    &#125;</span><span class="line">&#125;);</span><span class="line"></span><span class="line"><span class="built_in">console</span>.log(obj._deep); <span class="comment">//3</span></span></pre></td></tr></table></figure><h2 id="怎么大小通吃"><a href="#怎么大小通吃" class="headerlink" title="怎么大小通吃"></a>怎么大小通吃</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象和数组一起遍历</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_each</span>(<span class="params">objOrArray, callback</span>) </span>&#123;</span><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(objOrArray).toLowerCase() === <span class="string">'[object array]'</span>)&#123;</span><span class="line">        objOrArray.forEach(callback); </span><span class="line">    &#125;</span><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(objOrArray).toLowerCase() === <span class="string">'[object object]'</span>)&#123;</span><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> objOrArray)&#123;</span><span class="line">            <span class="keyword">if</span>(objOrArray.hasOwnProperty(key))&#123;</span><span class="line">                callback(key,objOrArray[key]);</span><span class="line">            &#125;</span><span class="line">        &#125;</span><span class="line">    &#125;  </span><span class="line">&#125;</span><span class="line"></span><span class="line">_each([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="function"><span class="keyword">function</span>(<span class="params">it, index</span>) </span>&#123;</span><span class="line">    <span class="built_in">console</span>.log(it + index);  </span><span class="line">&#125;); </span><span class="line"><span class="comment">// 1</span></span><span class="line"><span class="comment">// 3</span></span><span class="line"><span class="comment">// 5</span></span><span class="line"></span><span class="line">_each(&#123;<span class="attr">a</span>: <span class="string">'b'</span>, <span class="attr">c</span>: <span class="string">'d'</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><span class="line">    <span class="built_in">console</span>.log(key + value);</span><span class="line">&#125;);</span><span class="line"><span class="comment">// ab</span></span><span class="line"><span class="comment">// cd</span></span></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置一个上下文</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_each</span>(<span class="params">objOrArray, callback, ctx</span>)</span>&#123;</span><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(objOrArray).toLowerCase() === <span class="string">'[object array]'</span>)&#123;</span><span class="line">        objOrArray.forEach(callback, ctx || <span class="keyword">this</span>); </span><span class="line">    &#125;</span><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(objOrArray).toLowerCase() === <span class="string">'[object object]'</span>)&#123;</span><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> objOrArray)&#123;</span><span class="line">            <span class="keyword">if</span>(objOrArray.hasOwnProperty(key))&#123;</span><span class="line">                callback.call(ctx || <span class="keyword">this</span>, key,objOrArray[key]);</span><span class="line">            &#125;</span><span class="line">        &#125;</span><span class="line">    &#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line">_each([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="function"><span class="keyword">function</span>(<span class="params">it, index</span>) </span>&#123;</span><span class="line">    <span class="built_in">console</span>.log(it + index + <span class="keyword">this</span>.a);  </span><span class="line">&#125;, &#123;<span class="attr">a</span>: <span class="number">3</span>&#125;); </span><span class="line"><span class="comment">// 4</span></span><span class="line"><span class="comment">// 6</span></span><span class="line"><span class="comment">// 8</span></span><span class="line"></span><span class="line">_each(&#123;<span class="attr">a</span>: <span class="string">'b'</span>, <span class="attr">c</span>: <span class="string">'d'</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><span class="line">    <span class="built_in">console</span>.log(key + value + <span class="keyword">this</span>.a);</span><span class="line">&#125;, &#123;<span class="attr">a</span>: <span class="string">'e'</span>&#125;);</span><span class="line"><span class="comment">// abe</span></span><span class="line"><span class="comment">// cde</span></span></pre></td></tr></table></figure><p>三板斧 <code>typeof</code> <code>Array.isArray([1,2])</code> <code>(Object.prototype.toString.call([1,2])</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;补基础：对象与数组的遍历方式&quot;&gt;&lt;a href=&quot;#补基础：对象与数组的遍历方式&quot; class=&quot;headerlink&quot; title=&quot;补基础：对象与数组的遍历方式&quot;&gt;&lt;/a&gt;补基础：对象与数组的遍历方式&lt;/h1&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>补基础：this</title>
    <link href="http://yoursite.com/2017/10/19/%E8%A1%A5%E5%9F%BA%E7%A1%80%EF%BC%9Athis/"/>
    <id>http://yoursite.com/2017/10/19/补基础：this/</id>
    <published>2017-10-19T13:23:13.000Z</published>
    <updated>2017-11-05T14:42:01.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="补基础：this"><a href="#补基础：this" class="headerlink" title="补基础：this"></a>补基础：this</h1><blockquote><p><a href="https://zhuanlan.zhihu.com/p/23804247?refer=study-fe" target="_blank" rel="external">this 的值到底是什么？一次说清楚</a></p><p><a href="https://zhuanlan.zhihu.com/p/25991271" target="_blank" rel="external">你怎么还没搞懂 this？</a></p><p>this的值是在函数调用的时候决定，而不是定义的时候决定</p></blockquote><h2 id="this-的四种绑定规则"><a href="#this-的四种绑定规则" class="headerlink" title="this 的四种绑定规则"></a>this 的四种绑定规则</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认绑定</span></span><span class="line"><span class="built_in">window</span>.a = <span class="number">3</span>;</span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><span class="line">    <span class="keyword">let</span> a = <span class="number">4</span>;</span><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><span class="line">&#125;</span><span class="line"></span><span class="line">f(); <span class="comment">// 3</span></span><span class="line"><span class="comment">// 通过上面的文章我们得出其实是 f().call(undefined) 默认为 global</span></span></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 隐式绑定</span></span><span class="line"><span class="built_in">window</span>.a = <span class="number">3</span>;</span><span class="line"><span class="keyword">let</span> obj = &#123;</span><span class="line">    a: <span class="number">4</span>,</span><span class="line">    f: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><span class="line">    &#125;</span><span class="line">&#125;;</span><span class="line"></span><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><span class="line">    a: <span class="number">4</span>,</span><span class="line">    obj: &#123;</span><span class="line">        a: <span class="number">5</span>,</span><span class="line">        f: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><span class="line">        &#125;</span><span class="line">    &#125;</span><span class="line">&#125;;</span><span class="line"></span><span class="line">obj.f() <span class="comment">// obj.f.call(obj) 所以是 4</span></span><span class="line">obj1.obj.f(); <span class="comment">// obj1.obj.f.call(obj1.obj) 是 5</span></span><span class="line"></span><span class="line"><span class="keyword">let</span> f = obj1.obj.f;</span><span class="line">f(); <span class="comment">// f.call(undefined) 是 3</span></span></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显式绑定</span></span><span class="line"><span class="built_in">window</span>.a = <span class="number">3</span>;</span><span class="line"><span class="keyword">let</span> obj = &#123;</span><span class="line">    a: <span class="number">4</span>,</span><span class="line">    f: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><span class="line">    &#125;</span><span class="line">&#125;;</span><span class="line"></span><span class="line">obj.f.call(&#123;<span class="attr">a</span>: <span class="number">6</span>&#125;); <span class="comment">// 6</span></span><span class="line"><span class="keyword">let</span> f = obj.f;</span><span class="line">f.call(&#123;<span class="attr">a</span>: <span class="number">5</span>&#125;); <span class="comment">// 5</span></span></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// new绑定</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">age</span>) </span>&#123;</span><span class="line">    <span class="keyword">this</span>.age = age;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="keyword">let</span> mike = Person(<span class="number">12</span>); <span class="comment">// Person.call(12) 如果在全局作用域写一个 12 那就会有 12 ,但是 mike.age 还是 undefined</span></span><span class="line"><span class="built_in">console</span>.log(mike.age); <span class="comment">// undefined</span></span><span class="line"></span><span class="line"><span class="comment">// 所以应该这样写</span></span><span class="line"><span class="comment">// let mike = new Person(12)</span></span><span class="line"><span class="comment">// 关于 new 这个方法，我在原型链实现过，内部应该会有一个 call() 的用法来调用 this</span></span></pre></td></tr></table></figure><h2 id="forEach-方法"><a href="#forEach-方法" class="headerlink" title="forEach 方法"></a>forEach 方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype._forEach = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><span class="line"><span class="comment">// 实现一个 forEach 方法</span></span><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><span class="line">        <span class="keyword">let</span> it = <span class="keyword">this</span>[i];</span><span class="line">        fn(it, i, <span class="keyword">this</span>); <span class="comment">// 看这里，调用的时候是这样的 fn.call(it,i,this) fn 没有绑定任何的上下文，所以是全局变量</span></span><span class="line">    &#125;</span><span class="line">&#125;;</span><span class="line"></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">age</span>) </span>&#123;</span><span class="line">    <span class="keyword">this</span>.age = age;</span><span class="line">    [<span class="number">3</span>,<span class="number">5</span>,<span class="number">10</span>]._forEach(<span class="function"><span class="keyword">function</span>(<span class="params">it</span>)</span>&#123;</span><span class="line">    <span class="comment">// console.log(this) 这里其实会打印出 global 属性, 原因看上面</span></span><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;it&#125;</span> year later I'm <span class="subst">$&#123;<span class="keyword">this</span>.age + it&#125;</span> year old`</span>);</span><span class="line">    &#125;);</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="keyword">let</span> mike = <span class="keyword">new</span> Person(<span class="number">12</span>);</span><span class="line"><span class="comment">// 3 year later I'm 15 year old</span></span><span class="line"><span class="comment">// 5 year later I'm 17 year old</span></span><span class="line"><span class="comment">// 10 year later I'm 22 year old</span></span></pre></td></tr></table></figure><p>所以真正实现方法是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span><span class="line">48</span><span class="line">49</span><span class="line">50</span><span class="line">51</span><span class="line">52</span><span class="line">53</span><span class="line">54</span><span class="line">55</span><span class="line">56</span><span class="line">57</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实际上原生的 forEach 可以传两个参数，一个是 callback ，还有一个其实是 this，所以其实 forEach 他本来就考虑到这种情况，所以可以直接传一个 this 进去</span></span><span class="line"><span class="built_in">Array</span>.prototype._forEach = <span class="function"><span class="keyword">function</span>(<span class="params">fn, ctx</span>) </span>&#123;</span><span class="line"><span class="comment">// 实现一个 forEach 方法</span></span><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><span class="line">        <span class="keyword">let</span> it = <span class="keyword">this</span>[i];</span><span class="line">        fn.call(ctx || <span class="keyword">this</span>, it, i, <span class="keyword">this</span>); <span class="comment">// 所以可以这样实现</span></span><span class="line">    &#125;</span><span class="line">&#125;;</span><span class="line"></span><span class="line"><span class="comment">/*</span></span><span class="line"><span class="comment">Array.prototype._forEach = function(fn) &#123;</span></span><span class="line"><span class="comment">    for(let i = 0; i &lt; this.length; i++) &#123;</span></span><span class="line"><span class="comment">        let it = this[i];</span></span><span class="line"><span class="comment">        fn(it, i, this);</span></span><span class="line"><span class="comment">    &#125;</span></span><span class="line"><span class="comment">&#125;;</span></span><span class="line"><span class="comment">*/</span></span><span class="line"></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">age</span>) </span>&#123;</span><span class="line">    <span class="keyword">this</span>.age = age;</span><span class="line">    [<span class="number">3</span>,<span class="number">5</span>,<span class="number">10</span>]._forEach(<span class="function"><span class="keyword">function</span>(<span class="params">it</span>)</span>&#123;</span><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;it&#125;</span> year later I'm <span class="subst">$&#123;<span class="keyword">this</span>.age + it&#125;</span> year old`</span>);</span><span class="line">    &#125;, <span class="keyword">this</span>);</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">/*</span></span><span class="line"><span class="comment">function Person(age) &#123;</span></span><span class="line"><span class="comment">    this.age = age;</span></span><span class="line"><span class="comment">    [3,5,10]._forEach(function(it)&#123;</span></span><span class="line"><span class="comment">        console.log(`$&#123;it&#125; year later I'm $&#123;this.age + it&#125; year old`);</span></span><span class="line"><span class="comment">    &#125;.bind(this)); // bind(this) 会绑定成上下文的 this</span></span><span class="line"><span class="comment">&#125;</span></span><span class="line"><span class="comment">*/</span></span><span class="line"></span><span class="line"><span class="comment">/*</span></span><span class="line"><span class="comment">function Person(age) &#123;</span></span><span class="line"><span class="comment">    this.age = age;</span></span><span class="line"><span class="comment">    let that = this</span></span><span class="line"><span class="comment">    [3,5,10]._forEach(function(it)&#123;</span></span><span class="line"><span class="comment">        console.log(`$&#123;it&#125; year later I'm $&#123;that.age + it&#125; year old`);</span></span><span class="line"><span class="comment">    &#125;);  // 使 this 变成一个普通的变量，其实和 bind(this) 是一样的套路</span></span><span class="line"><span class="comment">&#125;</span></span><span class="line"><span class="comment">*/</span></span><span class="line"></span><span class="line"><span class="comment">/*</span></span><span class="line"><span class="comment">function Person(age) &#123;</span></span><span class="line"><span class="comment">    this.age = age;</span></span><span class="line"><span class="comment">    [3,5,10]._forEach((it) =&gt; &#123;</span></span><span class="line"><span class="comment">        console.log(`$&#123;it&#125; year later I'm $&#123;this.age + it&#125; year old`);</span></span><span class="line"><span class="comment">    &#125;); // </span></span><span class="line"><span class="comment">&#125;</span></span><span class="line"><span class="comment">*/</span></span><span class="line"></span><span class="line"><span class="keyword">let</span> mike = <span class="keyword">new</span> Person(<span class="number">12</span>);</span><span class="line"><span class="comment">// 3 year later I'm 15 year old</span></span><span class="line"><span class="comment">// 5 year later I'm 17 year old</span></span><span class="line"><span class="comment">// 10 year later I'm 22 year old</span></span></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里说一下箭头函数的 this</span></span><span class="line"><span class="built_in">Array</span>.prototype._forEach = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><span class="line">        <span class="keyword">let</span> it = <span class="keyword">this</span>[i];</span><span class="line">        fn(it, i, <span class="keyword">this</span>);</span><span class="line">    &#125;</span><span class="line">&#125;;</span><span class="line"></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">age</span>) </span>&#123;</span><span class="line">    [<span class="number">3</span>,<span class="number">5</span>,<span class="number">10</span>]._forEach(<span class="function">(<span class="params">it</span>) =&gt;</span> &#123;</span><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><span class="line">    &#125;);</span><span class="line">&#125;</span><span class="line"></span><span class="line">Person.call(&#123;<span class="attr">a</span>: <span class="string">'a'</span>&#125;); <span class="comment">// 绑定了 call 值 输出 =&gt; &#123;a: 'a'&#125;</span></span><span class="line">Person(); <span class="comment">// Person 的 this 输出 =&gt; global</span></span><span class="line"><span class="keyword">let</span> obj = &#123;</span><span class="line">  b: <span class="number">1</span>,</span><span class="line">  f: Person</span><span class="line">&#125;</span><span class="line"></span><span class="line">obj.f(); <span class="comment">// 绑定了 obj 所以是 &#123; b: 1, [Function: Person] &#125;</span></span></pre></td></tr></table></figure><p>这里说一个很可能会出现的 bug ，在 <code>this.age = age</code> 这里如果不加分号会出现 bug ，变成了 <code>this.age = age[3,4,5]._forEach()</code> <code>age[3,4,5]</code> 返回是一个 <code>undefined</code></p><h2 id="bind-方法"><a href="#bind-方法" class="headerlink" title="bind 方法"></a>bind 方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span><span class="line">48</span><span class="line">49</span><span class="line">50</span><span class="line">51</span><span class="line">52</span><span class="line">53</span><span class="line">54</span><span class="line">55</span><span class="line">56</span><span class="line">57</span><span class="line">58</span><span class="line">59</span><span class="line">60</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先看 _bind 的 this 值是什么</span></span><span class="line"><span class="comment">/*</span></span><span class="line"><span class="comment">Function.prototype._bind = function(ctx) &#123;</span></span><span class="line"><span class="comment">console.log(this)</span></span><span class="line"><span class="comment">&#125;;</span></span><span class="line"><span class="comment"></span></span><span class="line"><span class="comment">function Person(age) &#123;</span></span><span class="line"><span class="comment">    this.age = age;</span></span><span class="line"><span class="comment">(function()&#123;&#125;)._bind(this)</span></span><span class="line"><span class="comment">console.log(this)</span></span><span class="line"><span class="comment">&#125;</span></span><span class="line"><span class="comment"></span></span><span class="line"><span class="comment">let mike = new Person(12);</span></span><span class="line"><span class="comment">// Function 因为上下文的关系</span></span><span class="line"><span class="comment">// Person &#123; age: 12 &#125; </span></span><span class="line"><span class="comment">*/</span></span><span class="line"></span><span class="line"><span class="built_in">Function</span>.prototype._bind = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>) </span>&#123;</span><span class="line"><span class="comment">// 实现一个 bind 方法</span></span><span class="line"><span class="comment">// return fn</span></span><span class="line"><span class="comment">// 注意不能用箭头函数，因为箭头函数没有 arguments</span></span><span class="line"><span class="keyword">let</span> that = <span class="keyword">this</span></span><span class="line"><span class="keyword">let</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>) <span class="comment">// [1,3]</span></span><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><span class="line"><span class="keyword">let</span> args2 = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>) <span class="comment">// [4,5]</span></span><span class="line">      <span class="keyword">let</span> all = args.concat(args2); </span><span class="line">        <span class="keyword">return</span> that.apply(ctx, all);</span><span class="line">&#125;</span><span class="line">&#125;;</span><span class="line"></span><span class="line"><span class="comment">/*</span></span><span class="line"><span class="comment">Function.prototype._bind = function(ctx) &#123;</span></span><span class="line"><span class="comment">// 如果要用箭头函数，用 ... 取剩余的值</span></span><span class="line"><span class="comment">let args = Array.prototype.slice.call(arguments, 1)</span></span><span class="line"><span class="comment">return (...args2) &#123;</span></span><span class="line"><span class="comment">console.log(args2)</span></span><span class="line"><span class="comment">      let all = args.concat(args2); </span></span><span class="line"><span class="comment">      cosole.log(all)</span></span><span class="line"><span class="comment">        return that.apply(ctx, all);</span></span><span class="line"><span class="comment">&#125;</span></span><span class="line"><span class="comment">&#125;;</span></span><span class="line"><span class="comment">*/</span></span><span class="line"></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">age</span>) </span>&#123;</span><span class="line">    <span class="keyword">this</span>.age = age;</span><span class="line">    [<span class="number">3</span>,<span class="number">5</span>,<span class="number">10</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">it</span>)</span>&#123;</span><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;it&#125;</span> yeas later I'm <span class="subst">$&#123;<span class="keyword">this</span>.age + it&#125;</span> yeas old`</span>);</span><span class="line">    &#125;._bind(<span class="keyword">this</span>, <span class="number">1</span>, <span class="number">2</span>));</span><span class="line">    <span class="comment">// let fn = function(it) &#123;</span></span><span class="line">    <span class="comment">// &#125;._bind(this, 1, 3);</span></span><span class="line">    <span class="comment">// fn(4,5)</span></span><span class="line">    <span class="comment">// 所以用了 _bind() 方法后就是等于 fn(this, 1, 3, 4, 5)</span></span><span class="line">    <span class="comment">// let fn = function(it) &#123;</span></span><span class="line">    <span class="comment">// &#125;</span></span><span class="line">    <span class="comment">// let fn2 = fn._bind(this, 1, 2)</span></span><span class="line">    <span class="comment">// fn2(4, 5, 6, 7, 8)</span></span><span class="line">    <span class="comment">// 相当于 fn(1, 2, 4, 5, 6, 7, 8)</span></span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="keyword">let</span> mike = <span class="keyword">new</span> Person(<span class="number">12</span>);</span></pre></td></tr></table></figure><p>如何摊平数组?</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常来说 数组 push 一个数组那就是数组内嵌数组</span></span><span class="line">let arr = [<span class="number">1</span>,<span class="number">2</span>]</span><span class="line">arr.push([<span class="number">3</span>,<span class="number">4</span>])</span><span class="line">arr <span class="comment">// [1, 2, [3, 4]]</span></span><span class="line">arr.concat([<span class="number">3</span>, <span class="number">4</span>]) <span class="comment">// [1, 2, [3, 4], 3, 4]</span></span><span class="line">arr.push.apply(arr, [<span class="number">5</span>, <span class="number">6</span>]) <span class="comment">// [1, 2, [3, 4], 3, 4, 5, 6]</span></span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;补基础：this&quot;&gt;&lt;a href=&quot;#补基础：this&quot; class=&quot;headerlink&quot; title=&quot;补基础：this&quot;&gt;&lt;/a&gt;补基础：this&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.c
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>补基础：原型链和 prototype</title>
    <link href="http://yoursite.com/2017/10/17/%E8%A1%A5%E5%9F%BA%E7%A1%80%EF%BC%9A%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%92%8C%20prototype/"/>
    <id>http://yoursite.com/2017/10/17/补基础：原型链和 prototype/</id>
    <published>2017-10-16T17:58:32.000Z</published>
    <updated>2017-11-05T14:42:01.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="补基础：原型链和-prototype"><a href="#补基础：原型链和-prototype" class="headerlink" title="补基础：原型链和 prototype"></a>补基础：原型链和 prototype</h1><p>先搞清楚两个东西</p><ul><li><code>__proto__</code></li><li><code>prototype</code></li></ul><blockquote><p>实例化对象的原型(<code>__proto__</code>)指向了构造函数的prototype属性</p></blockquote><p>例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>]</span><span class="line"><span class="keyword">let</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>,<span class="number">4</span>)</span><span class="line"></span><span class="line">arr.__proto__ === <span class="built_in">Array</span>.prototype</span></pre></td></tr></table></figure><p>再举个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array 实际是一个构造函数</span></span><span class="line"><span class="built_in">Array</span>.__proto__ === <span class="built_in">Function</span>.prototype</span><span class="line"></span><span class="line"><span class="comment">// 我们经常用到的 Array.forEach Array.push 实际上是 Function 的方法</span></span><span class="line"><span class="built_in">Array</span>.prototype.forEach</span><span class="line"><span class="built_in">Array</span>.prototype.push</span><span class="line"></span><span class="line"><span class="comment">// 举个例子</span></span><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>]</span><span class="line">arr.push(<span class="number">3</span>)</span><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1,2,3]</span></span><span class="line"><span class="comment">// 利用 hasOwnProperty 的方法看看</span></span><span class="line"><span class="built_in">console</span>.log(arr.hasOwnProperty(<span class="string">'push'</span>)) <span class="comment">// false</span></span><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype.hasOwnProperty(<span class="string">'push'</span>))</span></pre></td></tr></table></figure><p>所以说，本身 <code>arr</code> 是没有 <code>push</code> 这个方法的 ，于是就会从他的原型上找。先会找它的原型 (<code>arr.__proto__</code> 等价与在 <code>Array.prototype</code> 里面找) 。</p><p> 那 <code>arr.hasOwnProperty</code> 又是怎么来的呢？</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span></pre></td><td class="code"><pre><span class="line">console.log(Object<span class="selector-class">.prototype</span><span class="selector-class">.hasOwnProperty</span><span class="selector-class">.call</span>(arr, <span class="string">'hasOwnProperty'</span>)) <span class="comment">//false</span></span><span class="line">console.log(Object<span class="selector-class">.prototype</span><span class="selector-class">.hasOwnProperty</span><span class="selector-class">.call</span>(arr.__proto__, <span class="string">'hasOwnProperty'</span>)) <span class="comment">//false</span></span><span class="line">console.log(Object<span class="selector-class">.prototype</span><span class="selector-class">.hasOwnProperty</span><span class="selector-class">.call</span>(Array<span class="selector-class">.prototype</span>, <span class="string">'hasOwnProperty'</span>)) <span class="comment">//false</span></span><span class="line"><span class="comment">// 既然找不到，那我们可以往上一级找</span></span><span class="line"><span class="comment">// arr.__proto__.__proto___ === Array.prototype.__proto__ === Object.prototype</span></span><span class="line"><span class="comment">/*</span></span><span class="line"><span class="comment">为什么 Array 是一个对象呢？</span></span><span class="line"><span class="comment">因为是对象格式</span></span><span class="line"><span class="comment">Array.prototype = &#123;</span></span><span class="line"><span class="comment">  push: function() &#123;</span></span><span class="line"><span class="comment">    </span></span><span class="line"><span class="comment">  &#125;</span></span><span class="line"><span class="comment">&#125;</span></span><span class="line"><span class="comment">*/</span></span><span class="line"></span><span class="line">console.log(Object<span class="selector-class">.prototype</span><span class="selector-class">.hasOwnProperty</span><span class="selector-class">.call</span>(Object<span class="selector-class">.prototype</span>, <span class="string">'hasOwnProperty'</span>)) <span class="comment">// true</span></span><span class="line"></span><span class="line"></span><span class="line"><span class="comment">/*</span></span><span class="line"><span class="comment">实际上是有尽头的</span></span><span class="line"><span class="comment">一直往原型上找的话</span></span><span class="line"><span class="comment">最后是一个 null</span></span><span class="line"><span class="comment">*/</span></span></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><span class="line">    <span class="keyword">this</span>.name = name;</span><span class="line">&#125;</span><span class="line"></span><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><span class="line">    <span class="built_in">console</span>.log(<span class="string">`hello I'm <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><span class="line">&#125;;</span><span class="line"></span><span class="line"><span class="keyword">let</span> mike = <span class="keyword">new</span> Person(<span class="string">'mike'</span>);</span><span class="line"><span class="built_in">console</span>.log(mike.hasOwnProperty(<span class="string">'sayHi'</span>)) <span class="comment">// false</span></span></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><span class="line">    <span class="keyword">this</span>.name = name;</span><span class="line">    <span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><span class="line">        <span class="built_in">console</span>.log(<span class="string">`hello I'm <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><span class="line">    &#125;;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="keyword">let</span> mike = <span class="keyword">new</span> Person(<span class="string">'mike'</span>);</span><span class="line"><span class="built_in">console</span>.log(mike.hasOwnProperty(<span class="string">'sayHi'</span>)) <span class="comment">// true</span></span></pre></td></tr></table></figure><p>所以说，<code>prototype</code> 会给每个实例对象赋予一个新的 <code>sayHi()</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><span class="line">    <span class="keyword">this</span>.name = name;</span><span class="line"><span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><span class="line">    <span class="built_in">console</span>.log(<span class="string">`hello I'm <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><span class="line">&#125;;</span><span class="line">&#125;</span><span class="line"></span><span class="line"></span><span class="line"><span class="keyword">let</span> mike = <span class="keyword">new</span> Person(<span class="string">'mike'</span>);</span><span class="line"><span class="keyword">let</span> mike2 = <span class="keyword">new</span> Person(<span class="string">'mike2'</span>);</span><span class="line">mike.sayHi();</span><span class="line">mike2.sayHi();</span><span class="line"></span><span class="line"><span class="built_in">console</span>.log(mike.sayHi === mike2.sayHi) <span class="comment">// false</span></span></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><span class="line">    <span class="keyword">this</span>.name = name;</span><span class="line">&#125;</span><span class="line"></span><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><span class="line">    <span class="built_in">console</span>.log(<span class="string">`hello I'm <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><span class="line">&#125;;</span><span class="line"></span><span class="line"><span class="keyword">let</span> mike = <span class="keyword">new</span> Person(<span class="string">'mike'</span>);</span><span class="line"><span class="keyword">let</span> mike2 = <span class="keyword">new</span> Person(<span class="string">'mike2'</span>);</span><span class="line">mike.sayHi();</span><span class="line">mike2.sayHi();</span><span class="line"></span><span class="line"><span class="built_in">console</span>.log(mike.sayHi === mike2.sayHi) <span class="comment">// true</span></span></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><span class="line">    <span class="keyword">this</span>.name = name;</span><span class="line">&#125;</span><span class="line"></span><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><span class="line">    <span class="built_in">console</span>.log(<span class="string">`hello I'm <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><span class="line">&#125;;</span><span class="line"></span><span class="line"><span class="keyword">let</span> mike = <span class="keyword">new</span> Person(<span class="string">'mike'</span>);</span><span class="line"><span class="keyword">let</span> mike2 = <span class="keyword">new</span> Person(<span class="string">'mike2'</span>);</span><span class="line">mike.sayHi();</span><span class="line">mike2.sayHi();</span><span class="line"></span><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><span class="line">    <span class="built_in">console</span>.log(<span class="string">`hi I'm <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><span class="line">&#125;;</span><span class="line"></span><span class="line">mike.sayHi();</span><span class="line">mike2.sayHi();</span><span class="line"></span><span class="line"><span class="comment">// hello I'm mike</span></span><span class="line"><span class="comment">// hello I'm mike2</span></span><span class="line"><span class="comment">// hi I'm mike</span></span><span class="line"><span class="comment">// hi I'm mike2</span></span></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><span class="line">    <span class="keyword">this</span>.name = name;</span><span class="line">&#125;</span><span class="line"></span><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><span class="line">    <span class="built_in">console</span>.log(<span class="string">`hello I'm <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><span class="line">&#125;;</span><span class="line"></span><span class="line"><span class="keyword">let</span> mike = <span class="keyword">new</span> Person(<span class="string">'mike'</span>);</span><span class="line"><span class="keyword">let</span> mike2 = <span class="keyword">new</span> Person(<span class="string">'mike2'</span>);</span><span class="line">mike.sayHi();</span><span class="line">mike2.sayHi();</span><span class="line"></span><span class="line">mike.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><span class="line">    <span class="built_in">console</span>.log(<span class="string">`hi I'm <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><span class="line">&#125;;</span><span class="line"></span><span class="line">mike.sayHi();</span><span class="line">mike2.sayHi();</span><span class="line"></span><span class="line"><span class="comment">// hello I'm mike</span></span><span class="line"><span class="comment">// hello I'm mike2</span></span><span class="line"><span class="comment">// hi I'm mike</span></span><span class="line"><span class="comment">// hello I'm mike2</span></span></pre></td></tr></table></figure><p>所以，如果要找 a 里面有没有 b 这个玩意，就一直 <code>a.__proto__.__proto__</code> … 这个子子孙孙无穷尽也 </p><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><blockquote><p>判断自定义对象的类型</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>]</span><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>)</span><span class="line"><span class="comment">// 实际上就是 arr.__proto__ === Array.prototype</span></span></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span></pre></td><td class="code"><pre><span class="line">let arr = [<span class="number">1</span>,<span class="number">2</span>]</span><span class="line"></span><span class="line">// 实现一个 instanceof, <span class="keyword">in</span> 是实例 fn 是构造函数</span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">io</span><span class="params">(ins, fn)</span></span> &#123;</span><span class="line">    <span class="keyword">if</span>(ins.__proto__)&#123;</span><span class="line">        <span class="keyword">if</span>(ins.__proto__ === fn.prototype)&#123;</span><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><span class="line">            <span class="keyword">return</span> <span class="built_in">io</span>(ins.__proto__, fn);</span><span class="line">        &#125;</span><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><span class="line">    &#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line">/*</span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">io</span><span class="params">(ins, fn)</span></span> &#123;</span><span class="line"><span class="keyword">while</span>(ins.__proto__ !== null)&#123;</span><span class="line">      <span class="keyword">if</span>(ins.__proto__ === fn.prototype)&#123;</span><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><span class="line">      &#125;</span><span class="line">      ins = ins.__proto__</span><span class="line">&#125;</span><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><span class="line">&#125;</span><span class="line">*/</span><span class="line"></span><span class="line">/*</span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">io</span><span class="params">(ins, fn)</span></span> &#123;</span><span class="line"><span class="keyword">if</span>(ins.__proto__ === fn.prototype) <span class="keyword">return</span> <span class="literal">true</span></span><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ins.__proto__ === null)&#123;</span><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><span class="line">&#125;</span><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">io</span>(ins.__proto__, fn)</span><span class="line">&#125;</span><span class="line">*/</span><span class="line"></span><span class="line">console.<span class="built_in">log</span>(<span class="built_in">io</span>(arr, Array)); //<span class="literal">true</span></span><span class="line">console.<span class="built_in">log</span>(<span class="built_in">io</span>(arr, Object)); //<span class="literal">true</span></span><span class="line">console.<span class="built_in">log</span>(<span class="built_in">io</span>(arr, Number)); //<span class="literal">false</span></span></pre></td></tr></table></figure><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><blockquote><p>创建一个实例化对象，继承构造函数的一些实例和方法</p><ul><li>新生成一个对象</li><li>将构造函数的 this 指向这个新生成的对象</li><li>设置新生成对象的原型</li><li>执行构造函数</li><li>返回这个对象</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>) </span>&#123;</span><span class="line">    <span class="keyword">this</span>.name = name;</span><span class="line"><span class="keyword">this</span>.age = age;</span><span class="line">&#125;</span><span class="line"></span><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><span class="line">    <span class="built_in">console</span>.log(<span class="string">`hello I'm <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><span class="line">&#125;;</span><span class="line"></span><span class="line"><span class="keyword">let</span> mike = <span class="keyword">new</span> Person(<span class="string">'mike'</span>);</span><span class="line">mike.sayHi()</span><span class="line"></span><span class="line"><span class="comment">// 实现一个 new 方法</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNewObject</span>(<span class="params">f, ...arg</span>) </span>&#123;</span><span class="line">    <span class="keyword">var</span> obj, ret, proto;</span><span class="line">    proto = f.prototype;</span><span class="line">    obj = <span class="built_in">Object</span>.create(proto);</span><span class="line">    ret = f.apply(obj, arg);</span><span class="line">    <span class="keyword">return</span> obj;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">// function myNewObject(fn, ...arg) &#123;</span></span><span class="line"><span class="comment">// let obj = &#123;&#125;</span></span><span class="line"><span class="comment">// obj.__proto__ = fn.prototype</span></span><span class="line"><span class="comment">// fn.call(obj,arg)</span></span><span class="line"><span class="comment">// return obj</span></span><span class="line"><span class="comment">// &#125;</span></span><span class="line"></span><span class="line"><span class="keyword">let</span> mike2 = myNewObject(Person, <span class="string">'mike2'</span>, <span class="number">12</span>);</span><span class="line"><span class="built_in">console</span>.log(mike2.name) <span class="comment">// mike2</span></span><span class="line">mike2.sayHi(); <span class="comment">// hello I'm mike2</span></span><span class="line"><span class="built_in">console</span>.log(mike2 <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><span class="line"><span class="comment">// 看这里，因为 this 不是那个实例化对象了</span></span><span class="line"><span class="keyword">if</span>(!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Person)) &#123;</span><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(name);</span><span class="line">    &#125;</span><span class="line">    <span class="keyword">this</span>.name = name;</span><span class="line">&#125;</span><span class="line"></span><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><span class="line">    <span class="built_in">console</span>.log(<span class="string">`hello I'm <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><span class="line">&#125;;</span><span class="line"></span><span class="line"><span class="keyword">let</span> mike3 = Person(<span class="string">'mike3'</span>);</span><span class="line"><span class="built_in">console</span>.log(mike3) <span class="comment">//undefined</span></span><span class="line"></span><span class="line"><span class="comment">// 怎么让 mike3 也成为一个正常的实例化对象呢？</span></span><span class="line"><span class="comment">// 看上面</span></span><span class="line"></span><span class="line"><span class="built_in">console</span>.log(mike3.name); <span class="comment">//mike3</span></span><span class="line">mike3.sayHi(); <span class="comment">//hello I'm mike3</span></span><span class="line"><span class="built_in">console</span>.log(mike3 <span class="keyword">instanceof</span> Person); <span class="comment">//true</span></span></pre></td></tr></table></figure><h2 id="inheritance"><a href="#inheritance" class="headerlink" title="inheritance"></a>inheritance</h2><p>继承方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><span class="line">    <span class="keyword">this</span>.name = name;</span><span class="line">&#125;</span><span class="line"></span><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><span class="line">    <span class="built_in">console</span>.log(<span class="string">`hello I'm <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><span class="line">&#125;;</span><span class="line"></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, grade</span>) </span>&#123;</span><span class="line"><span class="comment">// to-do</span></span><span class="line">Person.call(<span class="keyword">this</span>,name);</span><span class="line">    <span class="keyword">this</span>.grade = grade;</span><span class="line">&#125;</span><span class="line"></span><span class="line">Student.prototype = <span class="built_in">Object</span>.create(Person.prototype); <span class="comment">//to-do</span></span><span class="line"><span class="comment">// Student.prototype.__proto__ = Person.prototype</span></span><span class="line"><span class="comment">// Student.prototype.constructor = Student;</span></span><span class="line"></span><span class="line"><span class="comment">// 注意如果用以下这种方法</span></span><span class="line"><span class="comment">// Student.prototype = new Person()</span></span><span class="line"><span class="comment">// xiaohong.__proto__ === Student.prototype</span></span><span class="line"><span class="comment">// xiaohong.__proto__.name === undefined // 多余的东西 </span></span><span class="line"><span class="comment">// 需要的条件是</span></span><span class="line"><span class="comment">// xiaohong.__proto__ // Student.prototype</span></span><span class="line"><span class="comment">// xiaohong.__proto__.__proto__ // Person.protoype</span></span><span class="line"></span><span class="line">Student.prototype.study = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><span class="line">    <span class="built_in">console</span>.log(<span class="string">"I'm studying"</span>);</span><span class="line">&#125;;</span><span class="line"></span><span class="line"><span class="keyword">let</span> xiaohong = <span class="keyword">new</span> Student(<span class="string">'xiaohong'</span>, <span class="number">6</span>);</span><span class="line">xiaohong.sayHi(); <span class="comment">//hello I'm xiaohong</span></span><span class="line">xiaohong.study(); <span class="comment">//I'm studying</span></span><span class="line"><span class="built_in">console</span>.log(xiaohong.grade); <span class="comment">//6</span></span><span class="line"><span class="built_in">console</span>.log(xiaohong.name); <span class="comment">//xiaohong</span></span><span class="line"><span class="built_in">console</span>.log(xiaohong <span class="keyword">instanceof</span> Person); <span class="comment">//true</span></span><span class="line"><span class="built_in">console</span>.log(xiaohong <span class="keyword">instanceof</span> Student); <span class="comment">//true</span></span><span class="line"><span class="built_in">console</span>.log(xiaohong.constructor === Person); <span class="comment">//true</span></span></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 彩蛋 做一个 Object.create()</span></span><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">Object</span>.create !== <span class="string">'function'</span>)&#123;</span><span class="line">  <span class="built_in">Object</span>.create = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><span class="line">      F.prototype = obj</span><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> F()</span><span class="line">  &#125;</span><span class="line">&#125;</span></pre></td></tr></table></figure><p>注意 <code>__proto__</code> 不是规范里面的，是浏览器的规范 <code>Object.getPrototype(Array) === Array.__proto__</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;补基础：原型链和-prototype&quot;&gt;&lt;a href=&quot;#补基础：原型链和-prototype&quot; class=&quot;headerlink&quot; title=&quot;补基础：原型链和 prototype&quot;&gt;&lt;/a&gt;补基础：原型链和 prototype&lt;/h1&gt;&lt;p&gt;先搞清楚两个
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>做一个音乐 Webapp 的流程</title>
    <link href="http://yoursite.com/2017/10/15/%E5%81%9A%E4%B8%80%E4%B8%AA%E9%9F%B3%E4%B9%90%20Webapp/"/>
    <id>http://yoursite.com/2017/10/15/做一个音乐 Webapp/</id>
    <published>2017-10-15T04:41:39.000Z</published>
    <updated>2017-11-05T14:42:01.168Z</updated>
    
    <content type="html"><![CDATA[<h1 id="做一个音乐-Webapp"><a href="#做一个音乐-Webapp" class="headerlink" title="做一个音乐 Webapp"></a>做一个音乐 Webapp</h1><p>超低仿 Vanilla JS 写的 QQ 音乐</p><p><a href="https://frankietang.github.io/qq-music/index.html" target="_blank" rel="external">预览</a> | <a href="https://github.com/FRANKIETANG/qq-music" target="_blank" rel="external">源码</a></p><p>那么乱的笔记估计就只有我才能看懂</p><ul><li>按需求制定一下接口</li><li>功能拆分成一个一个模块（首页 + 推荐 / 排行榜 / 搜索 / 播放器界面）</li><li>技术选型（CSS 预处理器 / JS 库）</li></ul><h2 id="怎么在网页抄数据"><a href="#怎么在网页抄数据" class="headerlink" title="怎么在网页抄数据"></a>怎么在网页抄数据</h2><p><img src="https://i.loli.net/2017/09/22/59c4990ac3f33.png" alt=""></p><h2 id="伪造请求"><a href="#伪造请求" class="headerlink" title="伪造请求"></a>伪造请求</h2><p><img src="https://i.loli.net/2017/09/23/59c5f31f6601d.png" alt=""></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">curl 'https://c.y.qq.com/musichall/fcgi-bin/fcg_yqqhomepagerecommend.fcg?g_tk=<span class="number">5381</span>&amp;uin=0&amp;format=json&amp;inCharset=utf-8&amp;outCharset=utf-8&amp;notice=0&amp;platform=h5&amp;needNewCode=1&amp;_=<span class="number">150756419910</span>9' -H 'pragma: no-cache' -H 'origin: https://m.y.qq.com' -H 'accept-encoding: gzip, deflate, br' -H 'accept-language: zh-CN,zh;q=0.8' -H 'user-agent: Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1' -H 'accept: application/json' -H 'cache-control: no-cache' -H 'authority: c.y.qq.com' -H 'cookie: pgv_pvi=<span class="number">1576136704</span>; pgv_si=s<span class="number">2924205056</span>; RK=QfWPx2jbHN; tvfe_boss_uuid=bdd869ba21d<span class="number">1959</span>5; o_cookie=<span class="number">35055846</span>8; ts_refer=ADTAGmyqq; ptui_loginuin=<span class="number">35055846</span>8; ptisp=ctc; ptcz=bde020f<span class="number">982847</span>5fc3e22f0fc78ba<span class="number">0024</span>b7a615fad803b<span class="number">9169</span>4a069a02cefdb0b; pt2gguin=o<span class="number">0350558468</span>; LW_sid=11S540S7L3v4m1k4L632K6r1m3; LW_uid=g1l<span class="number">5302</span>7M384N1y4K6Z2v6d1L4; eas_sid=H1Y5t0B7H3o461B4f692f682Y2; ts_uid=<span class="number">2559117424</span>; qqmusic_fromtag=10; checkmask=3; yqq_stat=0; ts_refer=www.google.ca/; ts_uid=<span class="number">2559117424</span>; pgv_info=ssid=s<span class="number">8871552255</span>; pgv_pvid=<span class="number">2779555285</span>' -H 'referer: https://m.y.qq.com/' --compressed</span></pre></td></tr></table></figure><p><code>npm install express --save</code> </p><p><code>npm install request --save</code> <code>npm install request-promise --save</code>（发请求的库）</p><p><a href="https://github.com/request/request-promise" target="_blank" rel="external">request-promise</a></p><p><img src="https://i.loli.net/2017/09/23/59c60819cabdf.png" alt=""></p><p><code>npm install -g nodemon</code></p><p><a href="https://nodemon.io/" target="_blank" rel="external">nodemon</a></p><p>我去…用 nodemon 不能用 <code>import XXX from &#39;XXX&#39;</code> 要用 <code>var XXX = require(&#39;XXX&#39;)</code></p><p><img src="https://i.loli.net/2017/09/23/59c60b0dcf706.png" alt=""></p><p>我去…原来还有 n 模块这玩意…</p><p><a href="https://www.npmjs.com/package/n" target="_blank" rel="external">n</a> 接受了这个设定还是挺不错的…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//qq-server 代码</span></span><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request-promise'</span>)</span><span class="line"></span><span class="line"><span class="keyword">const</span> app = express()</span><span class="line"></span><span class="line">app.get(<span class="string">'/'</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><span class="line">    <span class="keyword">const</span> url = <span class="string">`https://c.y.qq.com/musichall/fcgi-bin/fcg_yqqhomepagerecommend.fcg?g_tk=5381&amp;uin=0&amp;format=json&amp;inCharset=utf-8&amp;outCharset=utf-8&amp;notice=0&amp;platform=h5&amp;needNewCode=1&amp;_=<span class="subst">$&#123;+ <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>`</span></span><span class="line">    <span class="keyword">try</span> &#123;</span><span class="line">        res.json(</span><span class="line">            <span class="keyword">await</span> request(&#123;</span><span class="line">                uri: url,</span><span class="line">                json: <span class="literal">true</span>,</span><span class="line">                headers: &#123;</span><span class="line">                    <span class="string">'accept'</span>: <span class="string">'application/json'</span>,</span><span class="line">                    <span class="string">'authority'</span>: <span class="string">'c.y.qq.com'</span>,</span><span class="line">                    <span class="string">'origin'</span>: <span class="string">'https://m.y.qq.com'</span>,</span><span class="line">                    <span class="string">'referer'</span>: <span class="string">'https://m.y.qq.com/'</span>,</span><span class="line">                    <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1'</span></span><span class="line">                &#125;</span><span class="line">            &#125;)</span><span class="line">        )</span><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><span class="line">        res.json(&#123; <span class="attr">error</span>: e.message &#125;)</span><span class="line">    &#125;</span><span class="line">&#125;)</span><span class="line"></span><span class="line">app.listen(<span class="number">4000</span>)</span></pre></td></tr></table></figure><p>运行 <code>nodemon qq-server.js</code> 打开 localhost:4000</p><p><img src="https://i.loli.net/2017/09/23/59c6163e42f5b.png" alt=""></p><p>开心 终于不用跨域请求了 也不用自己去抄数据了hhhh 新技能 get</p><p>再分析一个 API 接口</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">https://<span class="keyword">c</span>.y.qq.com/soso/fcgi-bin/search_for_qq_cp?g_tk=<span class="number">5381</span>&amp;uin=<span class="number">0</span>&amp;format=json&amp;inCharset=utf<span class="number">-8</span>&amp;outCharset=utf<span class="number">-8</span>&amp;notice=<span class="number">0</span>&amp;platform=h<span class="number">5</span>&amp;needNewCode=<span class="number">1</span>&amp;w=<span class="symbol">%E6</span><span class="symbol">%9</span>D<span class="symbol">%8</span>E<span class="symbol">%E8</span><span class="symbol">%8</span>D<span class="symbol">%A3</span><span class="symbol">%E6</span><span class="symbol">%B5</span><span class="symbol">%A9</span>&amp;zhidaqu=<span class="number">1</span>&amp;catZhida=<span class="number">1</span>&amp;t=<span class="number">0</span>&amp;flag=<span class="number">1</span>&amp;ie=utf<span class="number">-8</span>&amp;sem=<span class="number">1</span>&amp;aggr=<span class="number">0</span>&amp;perpage=<span class="number">20</span>&amp;n=<span class="number">20</span>&amp;p=<span class="number">1</span>&amp;remoteplace=txt.mqq.all&amp;_=<span class="number">1506154238572</span></span></pre></td></tr></table></figure><p><code>w=%E6%9D%8E%E8%8D%A3%E6%B5%A9</code> 这个是李荣浩</p><p><img src="https://i.loli.net/2017/09/23/59c618bbb79d2.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//search部分的核心代码</span></span><span class="line">app.get(<span class="string">'/search'</span>, <span class="keyword">async</span>(req,res)=&gt;&#123;</span><span class="line">    <span class="keyword">const</span> &#123; keyword, page = <span class="number">1</span> &#125; = req.query</span><span class="line">    <span class="keyword">const</span> url=<span class="string">`https://c.y.qq.com/soso/fcgi-bin/search_for_qq_cp?g_tk=5381&amp;uin=0&amp;format=json&amp;inCharset=utf-8&amp;outCharset=utf-8&amp;notice=0&amp;platform=h5&amp;needNewCode=1&amp;w=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(keyword)&#125;</span>&amp;zhidaqu=1&amp;catZhida=1&amp;t=0&amp;flag=1&amp;ie=utf-8&amp;sem=1&amp;aggr=0&amp;perpage=20&amp;n=20&amp;p=<span class="subst">$&#123;page&#125;</span>&amp;remoteplace=txt.mqq.all&amp;_=<span class="subst">$&#123;+ <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>`</span></span><span class="line">    <span class="keyword">try</span> &#123;</span><span class="line">        res.json(</span><span class="line">            <span class="keyword">await</span> request(&#123;</span><span class="line">                uri: url,</span><span class="line">                json: <span class="literal">true</span>,</span><span class="line">                headers: HEADERS</span><span class="line">            &#125;)</span><span class="line">        )</span><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><span class="line">        res.json(&#123; <span class="attr">error</span>: e.message &#125;)</span><span class="line">    &#125;    </span><span class="line">&#125;)</span></pre></td></tr></table></figure><p><img src="https://i.loli.net/2017/09/23/59c6200b767cb.png" alt=""></p><p>所有参数都放在 ? 后面 用 &amp; 链接</p><p>你看真的成了</p><p>那就是说…我自己做了一个 API …</p><p>让这个 API 跨域 <code>npm install cors --save</code></p><p><a href="https://zeit.co/now" target="_blank" rel="external">https://zeit.co/now</a> 把做出来的 server.js 上传就可以用了</p><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>import export</p><h2 id="音乐歌词-API"><a href="#音乐歌词-API" class="headerlink" title="音乐歌词 API"></a>音乐歌词 API</h2><p><img src="https://i.loli.net/2017/09/25/59c8db302e050.png" alt=""></p><p>点击 network 看 JS</p><p>把这个地址复制，在 console 用 <code>fetch()</code> 跑一遍</p><p><img src="https://i.loli.net/2017/09/25/59c8dbc2a1f79.png" alt=""></p><p>再回到 network 看 XHR</p><p><img src="https://i.loli.net/2017/09/25/59c8dc2dd23db.png" alt=""></p><p>写一个正则，把 callback 去掉，括号去掉。</p><p><code>MusicJsonCallback({...}).replace(/MusicJsonCallback\((.*)\)/, &#39;$1&#39;)</code></p><p><code>let json = {...}</code></p><p><code>JSON.parse(json)</code></p><p><code>json.lyric</code></p><p><code>let div = document.createElement(&#39;div&#39;)</code></p><p><code>div.innerHTML = json.lyric</code></p><p><code>div.firstChild.nodeValue</code></p><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><p>单页面保存数据的方式</p><p>就是当你打开这个页面就可以直接转跳到那首歌的入口</p><p><code>href=&quot;#player?artist=${artist}&amp;songid=${song.songid}&amp;songname=${song.songname}&amp;albummid=${song.albummid}&amp;duration=${song.interval}&quot;</code></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>fetch / await async</p><p><code>[].slice.call()</code></p><p>IntersectionObserver</p><p><code>map</code> 和 <code>forEach</code> 的区别</p><p>懒加载 / 曝光加载</p><p>正则</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span></pre></td><td class="code"><pre><span class="line">'<span class="keyword">View</span> frankietang <span class="keyword">on</span> GitHub'.<span class="built_in">match</span>(/<span class="keyword">View</span> (\w+) <span class="keyword">on</span> GitHub/)[1]</span><span class="line">'frankietang'</span></pre></td></tr></table></figure><p>css 里面的 <code>filter:blur(15px)</code> 毛玻璃效果</p><p>进度条可以先移到最边边，然后慢慢的往右移。</p><p><code>max-height: calc(100% - 205px);</code></p><p><code>location.hash</code> 点击时 url 的变化</p><p><img src="https://ooo.0o0.ooo/2017/09/28/59ccf1d9533c4.png" alt=""></p><p>MVC – Model View Controller</p><p>autoprefixer-cli</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NonDocumentTypeChildNode/previousElementSibling" target="_blank" rel="external">NonDocumentTypeChildNode.previousElementSibling</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;做一个音乐-Webapp&quot;&gt;&lt;a href=&quot;#做一个音乐-Webapp&quot; class=&quot;headerlink&quot; title=&quot;做一个音乐 Webapp&quot;&gt;&lt;/a&gt;做一个音乐 Webapp&lt;/h1&gt;&lt;p&gt;超低仿 Vanilla JS 写的 QQ 音乐&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>摸到 Vue.js 的门把手（3）</title>
    <link href="http://yoursite.com/2017/10/14/%E6%91%B8%E5%88%B0%20Vue.js%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B%EF%BC%883%EF%BC%89/"/>
    <id>http://yoursite.com/2017/10/14/摸到 Vue.js 的门把手（3）/</id>
    <published>2017-10-13T16:13:11.000Z</published>
    <updated>2017-11-05T14:42:01.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摸到-Vue-js-的门把手（3）"><a href="#摸到-Vue-js-的门把手（3）" class="headerlink" title="摸到 Vue.js 的门把手（3）"></a>摸到 Vue.js 的门把手（3）</h1><p>回炉重造</p><h2 id="重看-vue-init-webpack-的选项"><a href="#重看-vue-init-webpack-的选项" class="headerlink" title="重看 vue init webpack 的选项"></a>重看 <code>vue init webpack</code> 的选项</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span></pre></td><td class="code"><pre><span class="line">? <span class="keyword">Generate</span> project <span class="keyword">in</span> current directory? Yes</span><span class="line">? Project name vue-resume</span><span class="line">? Project description A Vue.js project</span><span class="line">? Author FRANKIETANG &lt;350558468@qq.com&gt;</span><span class="line">? Vue build standalone</span><span class="line"><span class="comment">//可以以后再装</span></span><span class="line">? Install vue-router? <span class="keyword">No</span></span><span class="line"><span class="comment">//这东西很烦，不要</span></span><span class="line">? <span class="keyword">Use</span> ESLint to lint your code? <span class="keyword">No</span></span><span class="line"><span class="comment">//不需要单元测试</span></span><span class="line">? Setup unit tests with Karma + Mocha? <span class="keyword">No</span></span><span class="line"><span class="comment">//不用管</span></span><span class="line">? Setup e2e tests with Nightwatch? <span class="keyword">No</span></span></pre></td></tr></table></figure><h2 id="升级了-NPM-之后居然装不了-SCSS-？"><a href="#升级了-NPM-之后居然装不了-SCSS-？" class="headerlink" title="升级了 NPM 之后居然装不了 SCSS ？"></a>升级了 NPM 之后居然装不了 SCSS ？</h2><p>会有一个奇怪的 <code>user &quot;root&quot; does not have permission to access the dev dir &quot;/home/tangkalun/Desktop/vue-resume/node_modules/node-sass/.node-gyp/6.3.1&quot;</code></p><p>那就用 <code>sudo SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ npm install --save --unsafe-perm</code></p><p>不行就用 <code>export SASS_BINARY_SITE=&quot;https://npm.taobao.org/mirrors/node-sass&quot;</code></p><p><code>npm install --save  sass-loader node-sass</code></p><p>又不行？</p><p><code>sudo npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p><code>sudo cnpm install --save  sass-loader node-sass --unsafe-perm</code></p><p>不要加 <code>--unsafe-perm</code></p><p>在 linux 下有可能循环安装…</p><p>用这句 <code>rm -rf node_modules/ &amp;&amp; npm install &amp;&amp; npm rebuild</code></p><p>不用想那么多。人生苦短，能用就行。</p><h2 id="程序构想"><a href="#程序构想" class="headerlink" title="程序构想"></a>程序构想</h2><p>和之前一样分为导航栏，侧栏编写区，预览区</p><h2 id="iconfont-的善用"><a href="#iconfont-的善用" class="headerlink" title="iconfont 的善用"></a>iconfont 的善用</h2><p>生成 <code>&lt;script&gt;</code> 标签直接用…不用像之前写个脚本来搞一大堆</p><h2 id="element-ui"><a href="#element-ui" class="headerlink" title="element-ui"></a>element-ui</h2><p><code>npm i element-ui -S</code></p><p><a href="http://element.eleme.io/#/zh-CN/component/installation" target="_blank" rel="external">文档</a></p><h2 id="数据绑定语法为-value-sync"><a href="#数据绑定语法为-value-sync" class="headerlink" title="数据绑定语法为:value.sync"></a>数据绑定语法为<code>:value.sync</code></h2><p><a href="https://vuxjs.gitbooks.io/vux/content/form/x-input.html" target="_blank" rel="external">点击这里</a></p><h2 id="slot-分發內容"><a href="#slot-分發內容" class="headerlink" title="slot 分發內容"></a>slot 分發內容</h2><p><a href="http://jsnwork.kiiuo.com/archives/2645/vue-%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E3%80%8C%E4%BD%BF%E7%94%A8-slot-%E5%88%86%E7%99%BC%E5%85%A7%E5%AE%B9%E3%80%8D" target="_blank" rel="external">Vue – 如何理解「使用 slot 分發內容」</a></p><h2 id="完。"><a href="#完。" class="headerlink" title="完。"></a>完。</h2><p><a href="https://frankietang.github.io/vue-resume/dist/index.html" target="_blank" rel="external">预览</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;摸到-Vue-js-的门把手（3）&quot;&gt;&lt;a href=&quot;#摸到-Vue-js-的门把手（3）&quot; class=&quot;headerlink&quot; title=&quot;摸到 Vue.js 的门把手（3）&quot;&gt;&lt;/a&gt;摸到 Vue.js 的门把手（3）&lt;/h1&gt;&lt;p&gt;回炉重造&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Black History" scheme="http://yoursite.com/tags/Black-History/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>摸到 Vue.js 的门把手（2）</title>
    <link href="http://yoursite.com/2017/10/14/%E6%91%B8%E5%88%B0%20Vue.js%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B%EF%BC%882%EF%BC%89/"/>
    <id>http://yoursite.com/2017/10/14/摸到 Vue.js 的门把手（2）/</id>
    <published>2017-10-13T16:12:40.000Z</published>
    <updated>2017-11-05T14:42:01.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摸到-Vue-js-的门把手（2）"><a href="#摸到-Vue-js-的门把手（2）" class="headerlink" title="摸到 Vue.js 的门把手（2）"></a>摸到 Vue.js 的门把手（2）</h1><p>用 vue-cli 快速搭建</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span></pre></td><td class="code"><pre><span class="line">npm init -<span class="built_in">y</span></span><span class="line">npm install -<span class="keyword">g</span> vue-<span class="keyword">cli</span></span><span class="line">vue init webpack .</span><span class="line"><span class="comment">//全部回车</span></span><span class="line">npm <span class="built_in">i</span></span><span class="line">npm <span class="keyword">run</span> dev</span></pre></td></tr></table></figure><h2 id="项目分三组件"><a href="#项目分三组件" class="headerlink" title="项目分三组件"></a>项目分三组件</h2><p><code>&lt;Topbar/&gt;</code> / <code>&lt;ResumeEditor/&gt;</code> / <code>&lt;ResumePreview/&gt;</code></p><h2 id="禁用-ESLint"><a href="#禁用-ESLint" class="headerlink" title="禁用 ESLint"></a>禁用 ESLint</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//build/webpack.base.conf.js</span></span><span class="line"><span class="symbol">  module:</span> &#123;</span><span class="line"><span class="symbol">    rules:</span> [</span><span class="line">      <span class="comment">//&#123;</span></span><span class="line">        <span class="comment">//test: /\.(js|vue)$/,</span></span><span class="line">        <span class="comment">//loader: 'eslint-loader',</span></span><span class="line">        <span class="comment">//enforce: "pre",</span></span><span class="line">        <span class="comment">//include: [resolve('src'), resolve('test')],</span></span><span class="line">        <span class="comment">//options: &#123;</span></span><span class="line">          <span class="comment">//formatter: eslintFriendlyFormatter</span></span><span class="line">        <span class="comment">//&#125;</span></span><span class="line">      <span class="comment">//&#125;,</span></span></pre></td></tr></table></figure><h2 id="GitHub-预览"><a href="#GitHub-预览" class="headerlink" title="GitHub 预览"></a>GitHub 预览</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//config/index.js</span></span><span class="line"><span class="string">assetsPublicPath:</span> <span class="string">'/vue-resume/dist'</span>,</span></pre></td></tr></table></figure><p><code>npm run build</code></p><p><code>https://frankietang.github.io/vue-resume/dist/#/</code></p><h2 id="使用-SCSS"><a href="#使用-SCSS" class="headerlink" title="使用 SCSS"></a>使用 SCSS</h2><p><code>npm install --save  sass-loader node-sass</code></p><h2 id="SVG-合并和使用方法"><a href="#SVG-合并和使用方法" class="headerlink" title="SVG 合并和使用方法"></a>SVG 合并和使用方法</h2><ul><li><a href="https://github.com/FRANKIETANG/vue-resume/commit/a112088f1c0bc772813f855139fcdd4cdeeea380" target="_blank" rel="external">使用脚本将所有 svg 拼成一个 svg，原来的多个 svg 变成了多个 symbol</a></li><li><a href="https://github.com/FRANKIETANG/vue-resume/commit/78556c0f7cb18d20e078f3abbbb85fd9b4c8ed43" target="_blank" rel="external">运行 node build/svg-symbol.js</a></li><li><a href="https://github.com/FRANKIETANG/vue-resume/commit/476cec015bbea1e7fc55bbfb33ba627c68353084" target="_blank" rel="external">将 SVG 插入 body 中</a></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span></pre></td><td class="code"><pre><span class="line">//任意地方</span><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"#icon-xxx"</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></pre></td></tr></table></figure><p><strong>值得注意的是，之前的 ResumeEditor 中的 data 是对象，对象是无序的，应该用数组让项目有一个完整的顺序</strong></p><h2 id="填写区核心代码"><a href="#填写区核心代码" class="headerlink" title="填写区核心代码"></a>填写区核心代码</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">ol</span> class=<span class="string">"panels"</span>&gt;</span><span class="line">    &lt;<span class="selector-tag">li</span> v-<span class="keyword">for</span>=<span class="string">"item in resume.config"</span> </span><span class="line">    v-show=<span class="string">"item.field === selected"</span>&gt;</span><span class="line">        &lt;<span class="selector-tag">div</span> v-<span class="keyword">if</span>=<span class="string">"resume[item.field] instanceof Array"</span>&gt;</span><span class="line">            &lt;<span class="selector-tag">div</span> class=<span class="string">"subitem"</span> v-<span class="keyword">for</span>=<span class="string">"subitem in resume[item.field]"</span>&gt;</span><span class="line">                &lt;<span class="selector-tag">div</span> class=<span class="string">"resumeField"</span> v-<span class="keyword">for</span>=<span class="string">"(value,key) in subitem"</span>&gt;</span><span class="line">                    &lt;label&gt;&#123;&#123;key&#125;&#125;&lt;/label&gt;</span><span class="line">                    &lt;<span class="selector-tag">input</span> type=<span class="string">"text"</span> :value=<span class="string">"value"</span>&gt;                            </span><span class="line">                &lt;/div&gt;</span><span class="line">                &lt;hr&gt;</span><span class="line">            &lt;/div&gt;</span><span class="line">        &lt;/div&gt;</span><span class="line">        &lt;<span class="selector-tag">div</span> v-<span class="keyword">else</span> class=<span class="string">"resumeField"</span> </span><span class="line">        v-<span class="keyword">for</span>=<span class="string">"(value,key) in resume[item.field]"</span>&gt;</span><span class="line">            &lt;label&gt;&#123;&#123;key&#125;&#125;&lt;/label&gt;</span><span class="line">            &lt;<span class="selector-tag">input</span> type=<span class="string">"text"</span> </span><span class="line">            v-model=<span class="string">"resume[item.field][key]"</span>&gt;</span><span class="line">        &lt;/div&gt;</span><span class="line">    &lt;/li&gt;</span><span class="line">&lt;/ol&gt;</span></pre></td></tr></table></figure><h2 id="如何把填进去的数据放到预览页面呢？"><a href="#如何把填进去的数据放到预览页面呢？" class="headerlink" title="如何把填进去的数据放到预览页面呢？"></a>如何把填进去的数据放到预览页面呢？</h2><p>可以做一个公共数据储存区域</p><p>填写区填进去的数据先放到公共数据再传到预览区</p><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><p><a href="https://jsfiddle.net/n9jmu5v7/1269/" target="_blank" rel="external">最基本的 Vuex 记数应用</a></p><h2 id="getter-与-setter"><a href="#getter-与-setter" class="headerlink" title="getter 与 setter"></a>getter 与 setter</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><span class="line">  fullName: &#123;</span><span class="line">    <span class="comment">// getter</span></span><span class="line">    <span class="keyword">get</span>: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><span class="line">    &#125;,</span><span class="line">    <span class="comment">// setter</span></span><span class="line">    <span class="keyword">set</span>: <span class="function"><span class="keyword">function</span> <span class="params">(newValue)</span> </span>&#123;</span><span class="line">      <span class="keyword">var</span> names = newValue.split(<span class="string">' '</span>)</span><span class="line">      <span class="keyword">this</span>.firstName = names[<span class="number">0</span>]</span><span class="line">      <span class="keyword">this</span>.lastName = names[names.length - <span class="number">1</span>]</span><span class="line">    &#125;</span><span class="line">  &#125;</span><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="提交载荷（Payload）"><a href="#提交载荷（Payload）" class="headerlink" title="提交载荷（Payload）"></a>提交载荷（Payload）</h2><p>你可以向 <code>store.commit</code> 传入额外的参数，即 mutation 的 <strong>载荷（payload）</strong>：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span></pre></td><td class="code"><pre><span class="line">// ...</span><span class="line">mutations: &#123;</span><span class="line">  increment (<span class="keyword">state</span>, n) &#123;</span><span class="line">    <span class="keyword">state</span>.count += n</span><span class="line">  &#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line">store.commit('increment', <span class="number">10</span>)</span></pre></td></tr></table></figure><p>在大多数情况下，载荷应该是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span></pre></td><td class="code"><pre><span class="line">// ...</span><span class="line">mutations: &#123;</span><span class="line">  increment (<span class="keyword">state</span>, payload) &#123;</span><span class="line">    <span class="keyword">state</span>.count += payload.amount</span><span class="line">  &#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line">store.commit('increment', &#123;</span><span class="line">  amount: <span class="number">10</span></span><span class="line">&#125;)</span></pre></td></tr></table></figure><h2 id="store"><a href="#store" class="headerlink" title="$store"></a>$store</h2><p>这个 <code>$</code> 在 Vue 里是代表全局的意思</p><h2 id="多次-import-同一个文件"><a href="#多次-import-同一个文件" class="headerlink" title="多次 import 同一个文件"></a>多次 import 同一个文件</h2><p>Node对引入的模块都会进行缓存（缓存的是编译和执行后的对象），减少二次引入开销；<br>在Node的加载机制中，缓存的优先级是最高的；<br>这一点同时适用于不同的模块加载机制，无论ES2015的import还是CommonJS的require；</p><h2 id="CSS-white-space-pre-line"><a href="#CSS-white-space-pre-line" class="headerlink" title="CSS white-space: pre-line"></a>CSS white-space: pre-line</h2><p>去除一行文本中的空格，但是保留一行的换行符，作用是防止用户在输入框输入空格而产生对用户不友好显示效果</p><h2 id="Object-Path"><a href="#Object-Path" class="headerlink" title="Object-Path"></a>Object-Path</h2><p><a href="https://github.com/mariocasciaro/object-path" target="_blank" rel="external">object-path</a></p><p><a href="https://satanwoo.github.io/2015/11/05/Object-Path-Source-Code/" target="_blank" rel="external">Object-Path 源码解读</a></p><h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h2><p><code>Object.assign()</code> 方法用于将所有可枚举的属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="external">Object.assign()</a></p><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//旧版本</span></span><span class="line"><span class="string">components:</span> &#123;</span><span class="line">  <span class="string">'MyDialog'</span>: MyDialog</span><span class="line">&#125;</span><span class="line"><span class="comment">//ES6</span></span><span class="line"><span class="string">components:</span> &#123;</span><span class="line">  MyDialog</span><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;摸到-Vue-js-的门把手（2）&quot;&gt;&lt;a href=&quot;#摸到-Vue-js-的门把手（2）&quot; class=&quot;headerlink&quot; title=&quot;摸到 Vue.js 的门把手（2）&quot;&gt;&lt;/a&gt;摸到 Vue.js 的门把手（2）&lt;/h1&gt;&lt;p&gt;用 vue-cli 
      
    
    </summary>
    
    
      <category term="Black History" scheme="http://yoursite.com/tags/Black-History/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>摸到 Vue.js 的门把手</title>
    <link href="http://yoursite.com/2017/10/14/%E6%91%B8%E5%88%B0%20Vue.js%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B/"/>
    <id>http://yoursite.com/2017/10/14/摸到 Vue.js 的门把手/</id>
    <published>2017-10-13T16:11:47.000Z</published>
    <updated>2017-11-05T14:42:01.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摸到-Vue-js-的门把手"><a href="#摸到-Vue-js-的门把手" class="headerlink" title="摸到 Vue.js 的门把手"></a>摸到 Vue.js 的门把手</h1><p>文档那么多中文多和谐啊是不是？<a href="https://cn.vuejs.org/" target="_blank" rel="external">Vue.js</a></p><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>先把 webpack 给配好。</p><p>接下来我们输入 Vue.js 测试代码给我们的代码</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.html</span></span><span class="line">      &lt;div id=<span class="string">"app"</span>&gt;</span><span class="line">          &#123;&#123; message &#125;&#125;</span><span class="line">      &lt;/div&gt; </span><span class="line"><span class="comment">//index.js</span></span><span class="line"><span class="keyword">import</span> Vue from <span class="string">'vue'</span></span><span class="line"></span><span class="line"><span class="built_in">var</span> app = <span class="literal">new</span> Vue(&#123;</span><span class="line">    el: <span class="string">'#app'</span>,</span><span class="line">    <span class="built_in">data</span>: &#123;</span><span class="line">      message: <span class="string">'Hello Vue!'</span></span><span class="line">    &#125;</span><span class="line">  &#125;)</span></pre></td></tr></table></figure><p>真的是非常的和谐，很像 React </p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-19472a5df4b492fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.html</span></span><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"newTask"</span>&gt;</span><span class="line">&lt;input type=<span class="string">"text"</span> v-model=<span class="string">"newTodo"</span>&gt;</span><span class="line">&lt;<span class="regexp">/div&gt;</span></span><span class="line"><span class="regexp">/</span><span class="regexp">/index.js</span></span><span class="line"><span class="regexp">var app = new Vue(&#123;</span></span><span class="line"><span class="regexp">    el: '#app',</span></span><span class="line"><span class="regexp">    data: &#123;</span></span><span class="line"><span class="regexp">        newTodo: '',</span></span><span class="line"><span class="regexp">        todoList: []</span></span><span class="line"><span class="regexp">    &#125;,</span></span><span class="line"><span class="regexp">    created: function()&#123;</span></span><span class="line"><span class="regexp">        let i = 0</span></span><span class="line"><span class="regexp">        setInterval(()=&gt;&#123;</span></span><span class="line"><span class="regexp">            this.newTodo = i</span></span><span class="line"><span class="regexp">            i += 1</span></span><span class="line"><span class="regexp">        &#125;,1000)</span></span><span class="line"><span class="regexp">    &#125;</span></span><span class="line"><span class="regexp">&#125;)</span></span></pre></td></tr></table></figure><p>只要 data.newTodo 被 JS 改了，input.value 就会变成一样的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.html</span></span><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"newTask"</span>&gt;</span><span class="line">&lt;input type=<span class="string">"text"</span> v-model=<span class="string">"newTodo"</span>&gt;</span><span class="line">&lt;<span class="regexp">/div&gt;</span></span><span class="line"><span class="regexp">/</span><span class="regexp">/index.js</span></span><span class="line"><span class="regexp">var app = new Vue(&#123;</span></span><span class="line"><span class="regexp">    el: '#app',</span></span><span class="line"><span class="regexp">    data: &#123;</span></span><span class="line"><span class="regexp">        newTodo: '',</span></span><span class="line"><span class="regexp">        todoList: []</span></span><span class="line"><span class="regexp">    &#125;,</span></span><span class="line"><span class="regexp">    created: function()&#123;</span></span><span class="line"><span class="regexp">        let i = 0</span></span><span class="line"><span class="regexp">        setInterval(()=&gt;&#123;</span></span><span class="line"><span class="regexp">            console.log(this.newTodo)</span></span><span class="line"><span class="regexp">            i += 1</span></span><span class="line"><span class="regexp">        &#125;,1000)</span></span><span class="line"><span class="regexp">    &#125;</span></span><span class="line"><span class="regexp">&#125;)</span></span></pre></td></tr></table></figure><p>只要 input.value 被用户改了，data.newTodo 就会变成一样的值；</p><h2 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.html</span></span><span class="line">&lt;input <span class="keyword">type</span>=<span class="string">"text"</span> v-model=<span class="string">"newTodo"</span> <span class="meta">@keypress</span>.enter=<span class="string">"addTodo"</span>&gt;</span><span class="line"><span class="comment">//index.js</span></span><span class="line">methods: &#123;</span><span class="line">    addTodo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><span class="line">        <span class="keyword">this</span>.todoList.push(&#123;</span><span class="line">            title: <span class="keyword">this</span>.newTodo,</span><span class="line">            createdAt: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><span class="line">        &#125;)</span><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.todoList)</span><span class="line">    &#125;</span><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="输入东西在页面展示"><a href="#输入东西在页面展示" class="headerlink" title="输入东西在页面展示"></a>输入东西在页面展示</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">li</span> v-<span class="keyword">for</span>=<span class="string">"todo in todoList"</span>&gt;</span><span class="line">  &#123;&#123; todo<span class="selector-class">.title</span> &#125;&#125;</span><span class="line">&lt;/li&gt;</span></pre></td></tr></table></figure><h2 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.html</span></span><span class="line">&lt;<span class="selector-tag">input</span> type=<span class="string">"checkbox"</span> v-model=<span class="string">"todo.done"</span>&gt;&#123;&#123; todo<span class="selector-class">.title</span> &#125;&#125;</span><span class="line">&lt;<span class="selector-tag">span</span> v-<span class="keyword">if</span>=<span class="string">"todo.done"</span>&gt;已完成&lt;/span&gt;</span><span class="line">&lt;<span class="selector-tag">span</span> v-<span class="keyword">else</span>&gt;未完成&lt;/span&gt;</span><span class="line"><span class="comment">//index.js</span></span><span class="line">addTodo: function()&#123;</span><span class="line">    this<span class="selector-class">.todoList</span><span class="selector-class">.push</span>(&#123;</span><span class="line">        title: this<span class="selector-class">.newTodo</span>,</span><span class="line">        createdAt: new Date(),</span><span class="line">        done: false</span><span class="line">    &#125;)</span><span class="line">    this<span class="selector-class">.newTodo</span> = <span class="string">""</span> <span class="comment">//input 框变成空的</span></span><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="localStorage-保存数据"><a href="#localStorage-保存数据" class="headerlink" title="localStorage 保存数据"></a>localStorage 保存数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span></pre></td><td class="code"><pre><span class="line">created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><span class="line">  <span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><span class="line">    <span class="keyword">let</span> dataString = <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.todoList)</span><span class="line">    <span class="built_in">window</span>.localStorage.setItem(<span class="string">'myTodos'</span>, dataString)</span><span class="line">  &#125;</span><span class="line">  <span class="keyword">let</span> oldDataString = <span class="built_in">window</span>.localStorage.getItem(<span class="string">'myTodos'</span>)</span><span class="line">  <span class="keyword">let</span> oldData = <span class="built_in">JSON</span>.parse(oldDataString)</span><span class="line">  <span class="keyword">this</span>.todoList = oldData || []</span><span class="line">&#125;,</span></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/onbeforeunload" target="_blank" rel="external">onbeforeunload - MDN</a> 当窗口即将被<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/onunload" target="_blank" rel="external"><code>卸载</code></a>时,会触发该事件.此时页面文档依然可见,且该事件的默认动作可以被<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event/preventDefault" target="_blank" rel="external"><code>取消</code></a>.</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON" target="_blank" rel="external">JSON - MDN</a> 简单深拷贝</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage" target="_blank" rel="external">localStorage - MDN</a> <code>localStorage</code> 属性允许你访问一个 local <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Storage" target="_blank" rel="external"><code>Storage</code></a> 对象。存储在 localStorage 里面的数据没有过期时间（expiration time）。</p><h2 id="数据存储选-leancloud"><a href="#数据存储选-leancloud" class="headerlink" title="数据存储选 leancloud"></a>数据存储选 leancloud</h2><p><a href="https://leancloud.cn/docs/start.html" target="_blank" rel="external">JavaScript SDK 安装指南</a></p><p><a href="https://leancloud.cn/docs/leanstorage_guide-js.html#数据存储开发指南___JavaScript" target="_blank" rel="external">数据存储开发指南 · JavaScript</a></p><p>之前有一个没有注意到的东西，就是利用这一段代码的时候打印出来的东西</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span></pre></td><td class="code"><pre><span class="line">signUp: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><span class="line">  <span class="keyword">let</span> user = <span class="keyword">new</span> AV.User();</span><span class="line">  user.setUsername(<span class="keyword">this</span>.formData.username);</span><span class="line">  user.setPassword(<span class="keyword">this</span>.formData.password);</span><span class="line">  user.signUp().then(<span class="function"><span class="keyword">function</span> (<span class="params">loginedUser</span>) </span>&#123;</span><span class="line">    <span class="built_in">console</span>.log(loginedUser);</span><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><span class="line">  &#125;);</span><span class="line">&#125;</span></pre></td></tr></table></figure><blockquote><p>注意打印出来的三个属性：attributes, createdAt, id。</p><p>其中 attributes 就是我们传给数据库的 username（我们不是还传了一个 password 吗？服务器是不会把 password 传给前端的）</p><p>createdAt 是这个数据创建的时间，id 是用户的 id，也是我们区别用户的唯一凭据。</p></blockquote><h2 id="Vue-的切换-Tab"><a href="#Vue-的切换-Tab" class="headerlink" title="Vue 的切换 Tab"></a>Vue 的切换 Tab</h2><p>在 React 中是这样切换的</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#123; this.<span class="keyword">state</span>.selectedTab === 'signInOrSignUp' ? <span class="variable">&lt;SignIn /&gt;</span>  : <span class="variable">&lt;SignUp /&gt;</span> &#125;</span></pre></td></tr></table></figure><p>而 Vue 是这样</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"signUp"</span> v-<span class="keyword">if</span>=<span class="string">"actionType === 'signUp'"</span>&gt;</span><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"logIn"</span> v-<span class="keyword">if</span>=<span class="string">"actionType === 'logIn'"</span>&gt;</span></pre></td></tr></table></figure><h2 id="可注册-可登入-可登出-功能"><a href="#可注册-可登入-可登出-功能" class="headerlink" title="可注册 / 可登入 / 可登出 功能"></a>可注册 / 可登入 / 可登出 功能</h2><p>这个和我之前 React 没什么区别了</p><p>就是看 leancloud 的文档抄抄</p><p>注意 <code>v-if</code> 的使用技巧</p><h2 id="保存数据功能"><a href="#保存数据功能" class="headerlink" title="保存数据功能"></a>保存数据功能</h2><p><a href="https://leancloud.cn/docs/leanstorage_guide-js.html#保存对象" target="_blank" rel="external">保存数据</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明类型</span></span><span class="line"><span class="keyword">var</span> TodoFolder = AV.Object.extend(<span class="string">'TodoFolder'</span>);</span><span class="line"><span class="comment">// 新建对象</span></span><span class="line"><span class="keyword">var</span> todoFolder = <span class="keyword">new</span> TodoFolder();</span><span class="line"><span class="comment">// 设置名称</span></span><span class="line">todoFolder.set(<span class="string">'name'</span>,<span class="string">'工作'</span>);</span><span class="line"><span class="comment">// 设置优先级</span></span><span class="line">todoFolder.set(<span class="string">'priority'</span>,<span class="number">1</span>);</span><span class="line">todoFolder.save().then(<span class="function"><span class="keyword">function</span> (<span class="params">todo</span>) </span>&#123;</span><span class="line">  <span class="built_in">console</span>.log(<span class="string">'objectId is '</span> + todo.id);</span><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><span class="line">  <span class="built_in">console</span>.error(error);</span><span class="line">&#125;);</span></pre></td></tr></table></figure><p>照着抄</p><p>注意不可以把代码放在 <code>window.onbeforeunload</code> 里，请求发出页面就刷新了</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-509e312e01c9434c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>从结果可以看到，AllTodos 保存请求失败了，被 <code>canceled</code> 了。</p><p>如果一个页面就要死了（刷新就表示不要当前页面了，当前页面可以死了），那么这个页面发出的请求其实就没有任何意义了。既然没有意义，浏览器为什么浪费时间去发这个页面里的请求呢？所以浏览器直接取消了这个请求。</p><p>简单来说，那就是：beforeunload 事件里面的所有请求都发不出去，会被取消！<br>我还从来没有在哪一本书里看到过这个知识点。所以说「实践」是非常重要的。</p></blockquote><p>这样就应该把上面那一段代码封装成一个函数调用。</p><h2 id="角色权限管理"><a href="#角色权限管理" class="headerlink" title="角色权限管理"></a>角色权限管理</h2><p><a href="https://leancloud.cn/docs/acl-guide.html#角色的创建" target="_blank" rel="external">角色的创建</a></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个针对 User 的查询</span></span><span class="line"><span class="keyword">var</span> query = <span class="keyword">new</span> <span class="type">AV</span>.Query(AV.User);</span><span class="line">query.<span class="keyword">get</span>(<span class="string">'55f1572460b2ce30e8b7afde'</span>).then(<span class="function"><span class="keyword">function</span></span>(otherUser) &#123;</span><span class="line">  <span class="keyword">var</span> post = <span class="keyword">new</span> <span class="type">AV</span>.Object(<span class="string">'Post'</span>);</span><span class="line">  post.<span class="keyword">set</span>(<span class="string">'title'</span>, <span class="string">'这是我的第二条发言，谢谢大家！'</span>);</span><span class="line">  post.<span class="keyword">set</span>(<span class="string">'content'</span>,<span class="string">'我最近喜欢看足球和篮球了。'</span>);</span><span class="line"></span><span class="line">  <span class="comment">// 新建一个 ACL 实例</span></span><span class="line">  <span class="keyword">var</span> acl = <span class="keyword">new</span> <span class="type">AV</span>.ACL();</span><span class="line">  acl.setPublicReadAccess(<span class="literal">true</span>);</span><span class="line">  acl.setWriteAccess(AV.User.current(), <span class="literal">true</span>);</span><span class="line">  acl.setWriteAccess(otherUser, <span class="literal">true</span>);</span><span class="line"></span><span class="line">  <span class="comment">// 将 ACL 实例赋予 Post 对象</span></span><span class="line">  post.setACL(acl);</span><span class="line"></span><span class="line">  <span class="comment">// 保存到云端</span></span><span class="line">  <span class="keyword">return</span> post.save();</span><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span></span>() &#123;</span><span class="line">  <span class="comment">// 保存成功</span></span><span class="line">&#125;).<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span></span>(error) &#123;</span><span class="line">  <span class="comment">// 错误信息</span></span><span class="line">  console.log(error);</span><span class="line">&#125;);</span></pre></td></tr></table></figure><h2 id="居然有-React-一样的-BUG"><a href="#居然有-React-一样的-BUG" class="headerlink" title="居然有 React 一样的 BUG"></a>居然有 React 一样的 BUG</h2><p>就是 logout 之后 再 login 别的账号会没有数据</p><p>和 React 的解决方法一样封装成一个函数放在 <code>methods</code> 里。</p><h2 id="遇到奇怪的-BUG"><a href="#遇到奇怪的-BUG" class="headerlink" title="遇到奇怪的 BUG"></a>遇到奇怪的 BUG</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span></pre></td><td class="code"><pre><span class="line">rm -rf node_modules/</span><span class="line">npm <span class="keyword">install</span></span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;摸到-Vue-js-的门把手&quot;&gt;&lt;a href=&quot;#摸到-Vue-js-的门把手&quot; class=&quot;headerlink&quot; title=&quot;摸到 Vue.js 的门把手&quot;&gt;&lt;/a&gt;摸到 Vue.js 的门把手&lt;/h1&gt;&lt;p&gt;文档那么多中文多和谐啊是不是？&lt;a href
      
    
    </summary>
    
    
      <category term="Black History" scheme="http://yoursite.com/tags/Black-History/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>摸到 React 的门把手 (完)</title>
    <link href="http://yoursite.com/2017/10/14/%E6%91%B8%E5%88%B0%20React%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B%20(%E5%AE%8C)/"/>
    <id>http://yoursite.com/2017/10/14/摸到 React 的门把手 (完)/</id>
    <published>2017-10-13T16:11:08.000Z</published>
    <updated>2017-11-05T14:42:01.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摸到-React-的门把手-完"><a href="#摸到-React-的门把手-完" class="headerlink" title="摸到 React 的门把手 (完)"></a>摸到 React 的门把手 (完)</h1><p>写啊写啊终于把大概功能给写完了 <a href="https://frankietang.github.io/banana-todolist/build/index.html#" target="_blank" rel="external">效果</a> ，CSS 真难写啊… 我的同学说，审美这些东西要慢慢培养。</p><p>接下来我们来说说这个项目用到了什么知识点。</p><h2 id="1-JSX-React-webpack-LeanCloud-等知识。"><a href="#1-JSX-React-webpack-LeanCloud-等知识。" class="headerlink" title="1. JSX / React / webpack / LeanCloud 等知识。"></a>1. JSX / React / webpack / LeanCloud 等知识。</h2><p>在我博客都有很详细的介绍，这里就不多说了。<a href="https://frankietang.github.io/" target="_blank" rel="external">我的博客</a></p><h2 id="2-HTML"><a href="#2-HTML" class="headerlink" title="2. HTML"></a>2. HTML</h2><h3 id="2-1-form-表单"><a href="#2-1-form-表单" class="headerlink" title="2.1 form 表单"></a>2.1 form 表单</h3><p><code>&lt;input id=&quot;xxx&quot;&gt;</code> 和 <code>&lt;label for=&quot;xxx&quot;&gt;</code> 可以对应关联</p><h3 id="2-2-HTML5-LocalStorage-本地存储"><a href="#2-2-HTML5-LocalStorage-本地存储" class="headerlink" title="2.2 HTML5 LocalStorage 本地存储"></a>2.2 HTML5 LocalStorage 本地存储</h3><p>在这个项目里 LocalStorage 的用法是这样的</p><ul><li>用户提交数据的时候，将所有的 todo 字符串的形式保存在 localStorage</li><li>重新打开页面的时候，将 localStorage 里面的字符串变为对象赋值给 todoList</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params">key,value</span>)</span>&#123;</span><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.localStorage.setItem(key,</span><span class="line">        <span class="built_in">JSON</span>.stringify(value))</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params">key</span>)</span>&#123;</span><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(key))</span><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="3-CSS"><a href="#3-CSS" class="headerlink" title="3. CSS"></a>3. CSS</h2><h3 id="3-1-flex-布局"><a href="#3-1-flex-布局" class="headerlink" title="3.1 flex 布局"></a>3.1 flex 布局</h3><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="external">Flex 布局教程：实例篇</a></p><h3 id="3-2-CSS-选择器"><a href="#3-2-CSS-选择器" class="headerlink" title="3.2 CSS 选择器"></a>3.2 CSS 选择器</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Getting_started/Selectors" target="_blank" rel="external">CSS 选择器 - MDN</a></p><h2 id="4-JavaScript"><a href="#4-JavaScript" class="headerlink" title="4. JavaScript"></a>4. JavaScript</h2><h3 id="4-1-import…from…"><a href="#4-1-import…from…" class="headerlink" title="4.1 import…from…"></a>4.1 import…from…</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import" target="_blank" rel="external">import - MDN</a></p><p><strong>import 语句 </strong>用于从一个已经导出的外部模块或另一个脚本中导入函数，对象或原始类型。</p><h3 id="4-2-ES6-Class"><a href="#4-2-ES6-Class" class="headerlink" title="4.2 ES6 - Class"></a>4.2 ES6 - Class</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="external">Class - MDN</a> <a href="http://es6.ruanyifeng.com/#docs/class#Class-的-Generator-方法" target="_blank" rel="external">Class 的基本语法</a></p><p>而我的项目最多是用到 <code>constructor()</code> / <code>extends</code> / <code>super()</code> ，这里举一个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSuper</span> </span>&#123;</span><span class="line">  <span class="keyword">constructor</span>() &#123;</span><span class="line">    <span class="keyword">this</span>.a = <span class="string">'a'</span></span><span class="line">  &#125;</span><span class="line">&#125;</span><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">TestSuper</span> </span>&#123;</span><span class="line">  <span class="keyword">constructor</span>() &#123;</span><span class="line">    <span class="keyword">super</span>()</span><span class="line">    <span class="keyword">this</span>.b = <span class="string">'b'</span></span><span class="line">  &#125;</span><span class="line">&#125;</span><span class="line"><span class="keyword">let</span> inst = <span class="keyword">new</span> Test()</span><span class="line"><span class="built_in">console</span>.log(inst.a)   <span class="comment">//a</span></span><span class="line"><span class="built_in">console</span>.log(inst)     <span class="comment">//Test&#123;a:'a',b:'b'&#125;</span></span></pre></td></tr></table></figure><p><code>constructor</code>方法是类的默认方法，通过<code>new</code>命令生成对象实例时，自动调用该方法。一个类必须有<code>constructor</code>方法，如果没有显式定义，一个空的<code>constructor</code>方法会被默认添加。</p><p><code>extends</code> 关键词被用在<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class" target="_blank" rel="external">类声明</a>或者<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class" target="_blank" rel="external">类表达式</a>上，以创建一个类是另一个类的子类。</p><p><code>super</code> 关键字用于调用一个对象的父对象上的函数。</p><h3 id="4-3-ES6-箭头函数"><a href="#4-3-ES6-箭头函数" class="headerlink" title="4.3 ES6 - 箭头函数"></a>4.3 ES6 - 箭头函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">v</span> =&gt;</span> v;</span><span class="line"><span class="keyword">var</span> f1 = <span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><span class="line">  <span class="keyword">return</span> v</span><span class="line">&#125;</span><span class="line"><span class="comment">//相当于</span></span><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">v</span>) </span>&#123;</span><span class="line"><span class="keyword">return</span> v;</span><span class="line">&#125;;</span><span class="line"><span class="keyword">var</span> f1 = <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">v</span>) </span>&#123;</span><span class="line"><span class="keyword">return</span> v;</span><span class="line">&#125;;</span></pre></td></tr></table></figure><h3 id="4-4-拓展运算符"><a href="#4-4-拓展运算符" class="headerlink" title="4.4 拓展运算符"></a>4.4 拓展运算符</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Spread_operator" target="_blank" rel="external">扩展语句 - MDN</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pa = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><span class="line"><span class="built_in">console</span>.log(args);</span><span class="line"><span class="keyword">return</span> args.reduce(<span class="function">(<span class="params">pre,cur</span>) =&gt;</span> &#123;</span><span class="line"><span class="keyword">return</span> pre+cur;</span><span class="line">&#125;, <span class="number">0</span>);</span><span class="line">&#125;;</span><span class="line">pa.apply(<span class="keyword">this</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">45</span>]);</span><span class="line"><span class="comment">//[1,2,45]</span></span><span class="line"><span class="comment">//48</span></span></pre></td></tr></table></figure><h3 id="4-5-逻辑运算符-用来定义默认参数"><a href="#4-5-逻辑运算符-用来定义默认参数" class="headerlink" title="4.5 逻辑运算符 || 用来定义默认参数"></a>4.5 逻辑运算符 || 用来定义默认参数</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_Operators" target="_blank" rel="external">逻辑运算符</a></p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> link = <span class="function"><span class="keyword">function</span> (<span class="params">height,color,url</span>) </span>&#123;</span><span class="line">  <span class="keyword">var</span> height = height || <span class="number">50</span></span><span class="line">  <span class="keyword">var</span> <span class="built_in">color</span> = <span class="built_in">color</span> || <span class="string">'red'</span></span><span class="line">  <span class="keyword">var</span> <span class="built_in">url</span> = <span class="built_in">url</span> || <span class="string">'https://frankie.github.io'</span></span><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="4-6-深拷贝"><a href="#4-6-深拷贝" class="headerlink" title="4.6 深拷贝"></a>4.6 深拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//deep Clone</span></span><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">a</span>: <span class="number">0</span>, <span class="attr">b</span>: &#123;<span class="attr">c</span>: <span class="number">0</span>&#125;&#125;;</span><span class="line"><span class="keyword">let</span> obj3 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj1));</span><span class="line">obj1.a = <span class="number">4</span>;</span><span class="line">obj1.b.c = <span class="number">4</span>;</span><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj3)); <span class="comment">// &#123;a: 0, b: &#123;c: 0&#125;&#125;</span></span></pre></td></tr></table></figure><h3 id="4-7-条件（三元）运算符"><a href="#4-7-条件（三元）运算符" class="headerlink" title="4.7 条件（三元）运算符"></a>4.7 条件（三元）运算符</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Conditional_Operator" target="_blank" rel="external">条件运算符</a></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">condition ? expr1 : <span class="type">expr2</span></span></pre></td></tr></table></figure><h3 id="4-8-apply-call-bind"><a href="#4-8-apply-call-bind" class="headerlink" title="4.8 apply() / call() / bind()"></a>4.8 apply() / call() / bind()</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span></pre></td><td class="code"><pre><span class="line">var xw = &#123;</span><span class="line">  <span class="string">name :</span> <span class="string">"小王"</span>,</span><span class="line">  <span class="string">gender :</span> <span class="string">"男"</span>,</span><span class="line">  <span class="string">age :</span> <span class="number">24</span>,</span><span class="line">  <span class="string">say :</span> function() &#123;</span><span class="line">  alert(<span class="keyword">this</span>.name + <span class="string">" , "</span> + <span class="keyword">this</span>.gender + <span class="string">" ,今年"</span> + <span class="keyword">this</span>.age);        </span><span class="line">&#125;</span><span class="line">&#125;</span><span class="line">var xh = &#123;</span><span class="line">  <span class="string">name :</span> <span class="string">"小红"</span>,</span><span class="line">  <span class="string">gender :</span> <span class="string">"女"</span>,</span><span class="line">  <span class="string">age :</span> <span class="number">18</span></span><span class="line">&#125;</span><span class="line">xw.say();</span><span class="line">xw.say.call(xh);</span><span class="line">xw.say.apply(xh);</span><span class="line">xw.say.bind(xh)();</span></pre></td></tr></table></figure><p>call和apply都是对函数的直接调用，而bind方法返回的仍然是一个函数，因此后面还需要()来进行调用才可以。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span></pre></td><td class="code"><pre><span class="line">var xw = &#123;</span><span class="line">  <span class="string">name :</span> <span class="string">"小王"</span>,</span><span class="line">  <span class="string">gender :</span> <span class="string">"男"</span>,</span><span class="line">  <span class="string">age :</span> <span class="number">24</span>,</span><span class="line">  <span class="string">say :</span> function(school,grade) &#123;</span><span class="line">    alert(<span class="keyword">this</span>.name + <span class="string">" , "</span> + <span class="keyword">this</span>.gender + <span class="string">" ,今年"</span> + <span class="keyword">this</span>.age + <span class="string">" ,在"</span> + school + <span class="string">"上"</span> + grade);  </span><span class="line">  &#125;</span><span class="line">&#125;</span><span class="line">var xh = &#123;</span><span class="line">  <span class="string">name :</span> <span class="string">"小红"</span>,</span><span class="line">  <span class="string">gender :</span> <span class="string">"女"</span>,</span><span class="line">  <span class="string">age :</span> <span class="number">18</span></span><span class="line">&#125;</span><span class="line">xw.say.call(xh,<span class="string">"实验小学"</span>,<span class="string">"六年级"</span>);</span><span class="line">xw.say.apply(xh,[<span class="string">"实验小学"</span>,<span class="string">"六年级"</span>]);</span><span class="line">xw.say.bind(xh,<span class="string">"实验小学"</span>,<span class="string">"六年级"</span>)();</span><span class="line">xw.say.bind(xh)(<span class="string">"实验小学"</span>,<span class="string">"六年级"</span>);</span></pre></td></tr></table></figure><p>call后面的参数与say方法中是一一对应的，而apply的第二个参数是一个数组，数组中的元素是和say方法中一一对应的，这就是两者最大的区别。<br>那么bind怎么传参呢？它可以像call那样传参。</p><h3 id="4-9-event-preventDefault"><a href="#4-9-event-preventDefault" class="headerlink" title="4.9 event.preventDefault"></a>4.9 event.preventDefault</h3><p>如果事件可取消，则取消该事件，而不停止事件的进一步传播。</p><p>例子：切换复选框是单击复选框的默认操作。此示例演示如何防止这种情况发生</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>event.preventDefault()<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>请点击复选框控件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id-checkbox"</span>&gt;</span>Checkbox<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"id-checkbox"</span> <span class="attr">name</span>=<span class="string">"checkbox"</span> /&gt;</span></span><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="javascript">        <span class="built_in">document</span>.querySelector(<span class="string">"#id-checkbox"</span>).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><span class="line"><span class="actionscript">            alert(<span class="string">"preventDefault会阻止该复选框被勾选."</span>)</span></span><span class="line"><span class="undefined">            event.preventDefault();</span></span><span class="line"><span class="actionscript">            <span class="comment">//阻止该复选框被勾选</span></span></span><span class="line"><span class="actionscript">        &#125;, <span class="literal">false</span>);</span></span><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure><h3 id="4-10-this"><a href="#4-10-this" class="headerlink" title="4.10 this"></a>4.10 this</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="external">this</a></p><p><a href="http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html" target="_blank" rel="external">Javascript的this用法</a></p><p><a href="https://zhuanlan.zhihu.com/p/23804247?refer=study-fe" target="_blank" rel="external">this 的值到底是什么？一次说清楚</a></p><p><a href="https://zhuanlan.zhihu.com/p/25991271" target="_blank" rel="external">你怎么还没搞懂this</a></p><h3 id="4-11-JavaScript-的-new"><a href="#4-11-JavaScript-的-new" class="headerlink" title="4.11 JavaScript 的 new"></a>4.11 JavaScript 的 new</h3><p><a href="https://zhuanlan.zhihu.com/p/23987456?refer=study-fe" target="_blank" rel="external">JS 的 new 到底是干什么的？</a></p><h2 id="5-最后的一点建议"><a href="#5-最后的一点建议" class="headerlink" title="5. 最后的一点建议"></a>5. 最后的一点建议</h2><p>还是好好的刷一遍《JavaScript 高级程序设计》和《ES6 标准入门》吧，要不然基础差的你很难上手 React 。</p><h2 id="6-相关链接"><a href="#6-相关链接" class="headerlink" title="6. 相关链接"></a>6. 相关链接</h2><p><a href="https://frankietang.github.io/2017/08/17/%E6%91%B8%E5%88%B0%20ES6%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B/" target="_blank" rel="external">摸到 ES6 的门把手</a></p><p><a href="https://frankietang.github.io/2017/08/20/%E6%91%B8%E5%88%B0%20webpack%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B/" target="_blank" rel="external">摸到 webpack 的门把手</a></p><p><a href="https://frankietang.github.io/2017/08/20/%E6%91%B8%E5%88%B0%20webpack%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B%20%282%29/" target="_blank" rel="external">摸到 webpack 的门把手 (2)</a></p><p><a href="https://frankietang.github.io/2017/08/18/%E6%91%B8%E5%88%B0%20React%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B/" target="_blank" rel="external">摸到 React 的门把手</a></p><p><a href="https://frankietang.github.io/2017/08/20/%E6%91%B8%E5%88%B0%20React%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B%20%282%29/" target="_blank" rel="external">摸到 React 的门把手 (2)</a></p><p><a href="https://frankietang.github.io/2017/08/21/%E6%91%B8%E5%88%B0%20React%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B%20%283%29/" target="_blank" rel="external">摸到 React 的门把手 (3)</a></p><p><a href="https://frankietang.github.io/2017/08/22/%E6%91%B8%E5%88%B0%20React%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B%20%284%29/" target="_blank" rel="external">摸到 React 的门把手 (4)</a></p><p><a href="https://frankietang.github.io/2017/08/24/%E6%91%B8%E5%88%B0%20React%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B%20%285%29/" target="_blank" rel="external">摸到 React 的门把手 (5)</a></p><p><a href="https://frankietang.github.io/2017/08/25/%E6%91%B8%E5%88%B0%20React%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B%20%286%29/" target="_blank" rel="external">摸到 React 的门把手 (6)</a></p><p>这个项目的 2.0 版将会无限期跳票…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;摸到-React-的门把手-完&quot;&gt;&lt;a href=&quot;#摸到-React-的门把手-完&quot; class=&quot;headerlink&quot; title=&quot;摸到 React 的门把手 (完)&quot;&gt;&lt;/a&gt;摸到 React 的门把手 (完)&lt;/h1&gt;&lt;p&gt;写啊写啊终于把大概功能给写完
      
    
    </summary>
    
    
      <category term="Black History" scheme="http://yoursite.com/tags/Black-History/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>摸到 React 的门把手 (6)</title>
    <link href="http://yoursite.com/2017/10/14/%E6%91%B8%E5%88%B0%20React%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B%20(6)/"/>
    <id>http://yoursite.com/2017/10/14/摸到 React 的门把手 (6)/</id>
    <published>2017-10-13T16:10:29.000Z</published>
    <updated>2017-11-05T14:42:01.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摸到-React-的门把手-6"><a href="#摸到-React-的门把手-6" class="headerlink" title="摸到 React 的门把手 (6)"></a>摸到 React 的门把手 (6)</h1><p>慢慢的撸出一个应用，就像看着自己的孩子长大一样。</p><h2 id="继续撸代码"><a href="#继续撸代码" class="headerlink" title="继续撸代码"></a>继续撸代码</h2><p>增加邮箱注册并找回密码的方法。</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-adc098e0863d2a19.gif?imageMogr2/auto-orient/strip" alt=""></p><p>请求 LeanCloud 的 API</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-d526e3072a087e32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>返回登录框</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-cb586c8af567044d.gif?imageMogr2/auto-orient/strip" alt=""></p><h2 id="分成一个一个小模块"><a href="#分成一个一个小模块" class="headerlink" title="分成一个一个小模块"></a>分成一个一个小模块</h2><p>就是把每个功能分成一个一个的小模块，但是在这一步要注意，会有大量的<code>props</code>和<code>state</code>。只要不弄混，你就能体会到模块化的好处。</p><p><a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi" target="_blank" rel="external">React Developer Tools</a></p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-85d314006e43f8d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>我们用 props 在组件直接传递数据（从父组件到子组件），用 state 保存组件自身的数据，这就是 props 和 state 的区别。</p><p>注意每个模块的<code>state</code> </p><p>App 的 <code>state</code></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span></pre></td><td class="code"><pre><span class="line">this.<span class="keyword">state</span> = &#123;</span><span class="line">  <span class="keyword">user</span>: getCurrentUser() || &#123;&#125;,</span><span class="line">  newTodo: '',</span><span class="line">  todoList: []</span><span class="line">&#125;</span></pre></td></tr></table></figure><p>UserDialog 的 <code>state</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.state = &#123;</span><span class="line">  selectedTeb: <span class="string">'signInOrSignUp'</span>, <span class="comment">//forgotPassword</span></span><span class="line">  formData: &#123;</span><span class="line">    email: <span class="string">''</span>,</span><span class="line">    username: <span class="string">''</span>,</span><span class="line">    password: <span class="string">''</span>,</span><span class="line">  &#125;</span><span class="line">&#125;</span></pre></td></tr></table></figure><p>SignInOrSignUp 的 <code>state</code></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span></pre></td><td class="code"><pre><span class="line">this.<span class="keyword">state</span> = &#123;</span><span class="line">  selected: 'signUp'</span><span class="line">&#125;</span></pre></td></tr></table></figure><p>所以说<code>state</code>的分布策略是每个组件只保存与自己有关系的数据到state里。而<code>props</code>的用法就是，负责传递数据或函数到子组件中。</p><p>如果一个组件没有<code>state</code>只有<code>props</code>，说明这个组件没有特殊逻辑，是一个纯（pure）的组件，而且还有一个特点是不能对（props）做任何修改。</p><p><a href="https://facebook.github.io/react/docs/components-and-props.html#props-are-read-only" target="_blank" rel="external">Props are Read-Only</a></p><p>我们可以把组件只有 <code>props</code> 没有 <code>state</code> 写成一个函数。</p><p>在封装的时候要注意<code>this</code>，因为之前还是一个组件，所以是可以利用<code>this</code>来接住父组件的数据的，而变成了一个函数之后，<code>this</code>传入就是这个函数的东西了。所以 <code>{this.props.xxx}</code>就变成了<code>{props.props.xxx}</code>。</p><p>另外如果组件只有一个方法，也可以改写一个函数</p><p>注意</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">props</span>) </span>&#123;</span><span class="line">    <span class="keyword">return</span> &lt;input <span class="keyword">type</span>=<span class="string">"text"</span> value=&#123;props.content&#125; </span><span class="line">    className=<span class="string">"TodoInput"</span> </span><span class="line">    onKeyPress=&#123;submit.bind(<span class="literal">null</span>,props)&#125; </span><span class="line">    onChange=&#123;changeTitle.bind(<span class="literal">null</span>,props)&#125;/&gt;</span><span class="line">&#125;</span><span class="line"><span class="comment">//相当于</span></span><span class="line"><span class="keyword">let</span> temp = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><span class="line">    changeTitle.call(<span class="literal">null</span>, props, e)</span><span class="line">&#125;</span><span class="line">onChange=&#123;temp&#125;</span></pre></td></tr></table></figure><p>可以说这几行代码是很看基础的。</p><p>为什么在那几个函数明明没有用到 React ，但是要用 import React 。这是因为这个函数里面有 JSX ，而引用了这句话后<code>import React from &#39;react</code>浏览器就能读懂。<a href="http://web.jobbole.com/91637/" target="_blank" rel="external">我想这将是最有价值的 react 入门与进阶教程</a></p><p>重构到此为止</p><h2 id="把-TodoItem-的数据上传到云端"><a href="#把-TodoItem-的数据上传到云端" class="headerlink" title="把 TodoItem 的数据上传到云端"></a>把 TodoItem 的数据上传到云端</h2><p>我们再回过去看看 LeanCloud 的文档</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-087167c7a4e954a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>把这段代码复制来用一下，却得到了这样的反馈。</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-4c6b054d27c27e04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>控制中心也收到数据了</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-1cb2b198f0b21514.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>所以我们就思考一下 TodoItem 的流程</p><ul><li>创建一个 Todo，就在中心留下一条记录</li><li>用户修改一个 Todo，就发请求修改对应的 Todo</li><li>用户删除 Todo，我们就删除一个</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/3191557-213d7d92c6c93bf2.gif?imageMogr2/auto-orient/strip" alt=""></p><p>这里要用到文档里的代码 <a href="https://leancloud.cn/docs/leanstorage_guide-js.html#批量操作" target="_blank" rel="external">批量操作</a> <a href="https://leancloud.cn/docs/acl-guide.html#单用户权限设置" target="_blank" rel="external">单用户权限设置</a> <a href="https://leancloud.cn/docs/leanstorage_guide-js.html#删除对象" target="_blank" rel="external">删除对象</a> <a href="https://leancloud.cn/docs/leanstorage_guide-js.html#更新对象" target="_blank" rel="external">更新对象</a></p><p>注意在更新对象的函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">update</span>(&#123;<span class="keyword">id</span>,title,<span class="keyword">status</span>,deleted&#125;,successFn,errorFn)&#123;</span><span class="line">    let todo = AV.Object.createWithoutData(<span class="string">'Todo'</span>,<span class="keyword">id</span>)</span><span class="line">    title !== undefined &amp;&amp; todo.set(<span class="string">'title'</span>,title)</span><span class="line">    <span class="keyword">status</span> !== undefined &amp;&amp; todo.set(<span class="string">'status'</span>,<span class="keyword">status</span>)</span><span class="line">    deleted !== undefined &amp;&amp; todo.set(<span class="string">'deleted'</span>,deleted)</span><span class="line">//这里为什么要那么麻烦？</span><span class="line">//为什么我要像上面那样写代码？</span><span class="line">//考虑如下场景</span><span class="line">//<span class="keyword">update</span>(&#123;<span class="keyword">id</span>:<span class="number">1</span>, title:<span class="string">'hi'</span>&#125;)</span><span class="line">//调用 <span class="keyword">update</span> 时，很有可能没有传 <span class="keyword">status</span> 和 deleted</span><span class="line">//也就是说，用户只想「局部更新」</span><span class="line">//所以我们只 <span class="keyword">set</span> 该 <span class="keyword">set</span> 的</span><span class="line">//那么为什么不写成 title &amp;&amp; todo.set(<span class="string">'title'</span>, title) 呢，为什么要多此一举跟 undefined 做对比呢？</span><span class="line">//考虑如下场景</span><span class="line">//<span class="keyword">update</span>(&#123;<span class="keyword">id</span>:<span class="number">1</span>, title: <span class="string">''</span>, <span class="keyword">status</span>: <span class="literal">null</span>&#125;&#125;</span><span class="line">//用户想将 title 和 <span class="keyword">status</span> 置空，我们要满足</span><span class="line">    todo.save().then((response) =&gt; &#123;</span><span class="line">      successFn &amp;&amp; successFn.call(<span class="literal">null</span>)</span><span class="line">    &#125;,(<span class="keyword">error</span>) =&gt; &#123;</span><span class="line">      errorFn &amp;&amp; errorFn.call(<span class="literal">null</span>,<span class="keyword">error</span>)</span><span class="line">    &#125;)</span><span class="line">  &#125;</span></pre></td></tr></table></figure><p>啊真的累，React 真的难啊，几个小模块就那么多接口…</p><p><a href="https://github.com/FRANKIETANG/banana-todolist/commits/master" target="_blank" rel="external">所有代码</a></p><p><a href="https://frankietang.github.io/banana-todolist/build/index.html" target="_blank" rel="external">预览</a></p><p>我会另开几篇文章来详解这里免得知识点的，因为涉及的知识点有点多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;摸到-React-的门把手-6&quot;&gt;&lt;a href=&quot;#摸到-React-的门把手-6&quot; class=&quot;headerlink&quot; title=&quot;摸到 React 的门把手 (6)&quot;&gt;&lt;/a&gt;摸到 React 的门把手 (6)&lt;/h1&gt;&lt;p&gt;慢慢的撸出一个应用，就像看着
      
    
    </summary>
    
    
      <category term="Black History" scheme="http://yoursite.com/tags/Black-History/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>摸到 React 的门把手 (5)</title>
    <link href="http://yoursite.com/2017/10/14/%E6%91%B8%E5%88%B0%20React%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B%20(5)/"/>
    <id>http://yoursite.com/2017/10/14/摸到 React 的门把手 (5)/</id>
    <published>2017-10-13T16:09:47.000Z</published>
    <updated>2017-11-05T14:42:01.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摸到-React-的门把手-5"><a href="#摸到-React-的门把手-5" class="headerlink" title="摸到 React 的门把手 (5)"></a>摸到 React 的门把手 (5)</h1><p>这次我们就来天我们上一次挖的深坑 <a href="https://frankietang.github.io/2017/08/22/%E6%91%B8%E5%88%B0%20React%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B%20(4" target="_blank" rel="external">摸到 React 的门把手 (4)</a>/) ，慢慢填，不用急。干那么快干嘛，要好好享受过程。体验学到知识的快感。</p><h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><p>看名字就感觉应该是一个保存本地数据的玩意对吧（我猜的）<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage" target="_blank" rel="external">loocalStorage</a></p><p>我们用这个方法就可以保存数据而不会一刷新就会初始化了</p><ul><li>用户提交数据的时候，将所有的 todo 字符串的形式保存在 localStorage</li><li>重新打开页面的时候，将 localStorage 里面的字符串变为对象赋值给 todoList</li></ul><p>封装 localStorage 封装成两个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params">key,value</span>)</span>&#123;</span><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.localStorage.setItem(key,</span><span class="line">        <span class="built_in">JSON</span>.stringify(value))</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params">key</span>)</span>&#123;</span><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(key))</span><span class="line">&#125;</span></pre></td></tr></table></figure><p>load 和 save 的调用</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// load</span></span><span class="line"><span class="selector-tag">localStore</span><span class="selector-class">.load</span>(<span class="string">'todoList'</span>) || <span class="selector-attr">[]</span></span><span class="line"><span class="comment">// save</span></span><span class="line"><span class="selector-tag">localStore</span><span class="selector-class">.save</span>(<span class="string">'todoList'</span>,this.state.todoList)</span></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/3191557-7c1b95c23aa12525.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><code>||</code> 居然还有这种操作？可以用来定义默认参数？</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-0dcd24f922e4a0aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>不过 ES6 有了新的默认参数用法</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-48b523717d27a58e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>好了这里就不展开了。</p><h2 id="优化代码"><a href="#优化代码" class="headerlink" title="优化代码"></a>优化代码</h2><p>之前在每个 setState 之后会运行一次 save，但是我们知道 componentDidUpdate 会在组件更新之后调用，相当于 “组件更新” 等价于 “数据更新”</p><p>利用 componentDidUpdate 封装代码。</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>其实我们不需要服务器，用 LeanCloud 就可以了。</p><p>点击创建应用</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-f47971710bf3edd6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><a href="https://leancloud.cn/docs/leanstorage_guide-js.html" target="_blank" rel="external">看文档</a></p><p><a href="https://leancloud.cn/docs/sdk_setup-js.html" target="_blank" rel="external">JavaScript SDK 安装指南</a></p><p>安装</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ sudo npm <span class="keyword">install</span> leancloud-<span class="keyword">storage</span> <span class="comment">--save</span></span></pre></td></tr></table></figure><p>复制这一段代码到我们的App.js</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-49cd74d87191419f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ping api<span class="selector-class">.leancloud</span><span class="selector-class">.cn</span></span></pre></td></tr></table></figure><p>验证结果如下则正常</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-e10c06115a5054f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>然后我们测试下面这一段代码。</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-d0ceaa7fa89d6cc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>OK 了</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-4797976d0ab6e532.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>然后我们就继续把 LeanCloud 的对象和用户的开发文档看一遍，就可以继续写代码了。</p><h2 id="继续撸代码"><a href="#继续撸代码" class="headerlink" title="继续撸代码"></a>继续撸代码</h2><p>先把我们上面的 localStore 给删掉</p><p>然后做出一个登录框</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-c5799a036bc6459c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>还要让它变成一个选项卡来回切换</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-caefa908df34d17f.gif?imageMogr2/auto-orient/strip" alt=""></p><p>把 form 表单的 input 和 formData 绑定用下面这种方法是不行的</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span></pre></td><td class="code"><pre><span class="line">changeUsername(e)&#123;</span><span class="line">    this.<span class="keyword">state</span>.formData.username = e.target.value</span><span class="line">    this.<span class="built_in">set</span>State(this.<span class="keyword">state</span>)</span><span class="line">&#125;</span></pre></td></tr></table></figure><p>其实是不行的，原因看 <a href="https://stackoverflow.com/questions/37755997/why-cant-i-directly-modify-a-components-state-really" target="_blank" rel="external">Why can’t I directly modify a component’s state, really?</a> 里面 <a href="https://stackoverflow.com/users/4945468/pranesh-ravi" target="_blank" rel="external">Pranesh Ravi</a> 的答案。</p><blockquote><p>Just a reminder: most basic methods for cloning in JS (<code>slice</code>, ES6 destructuring, etc.) are shallow. If you have a nested array or nested objects you’ll need to look at other methods of deep copying, e.g. <code>JSON.parse(JSON.stringify(obj))</code> (though this particular method won’t work if your object has circular references). </p></blockquote><p>因为对象是嵌套的，所以要用深拷贝的方法。</p><p>点击注册后使用 LeanCloud API 来注册</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-0359d75695fc17ef.gif?imageMogr2/auto-orient/strip" alt=""></p><p>这样数据就能来到了</p><p>来到后还要把它记住并显示出来</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-a186a02fe0ba8bc2.gif?imageMogr2/auto-orient/strip" alt=""></p><p>实现注册成功关闭窗口</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-d801a196febd2d97.gif?imageMogr2/auto-orient/strip" alt=""></p><p>用户进入页面时读取上次登录的 user</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-bbc5b207c51506ce.gif?imageMogr2/auto-orient/strip" alt=""></p><p>做出可以登出的功能</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-963e5edeb970c9f1.gif?imageMogr2/auto-orient/strip" alt=""></p><p>完成登录功能</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-10f8da0986e07f6b.gif?imageMogr2/auto-orient/strip" alt=""></p><p>代码：</p><ul><li><a href="https://github.com/FRANKIETANG/banana-todolist/commits/master" target="_blank" rel="external">LeanCloud</a></li><li><a href="https://github.com/FRANKIETANG/react-todo-list/commits/master" target="_blank" rel="external">localStore</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;摸到-React-的门把手-5&quot;&gt;&lt;a href=&quot;#摸到-React-的门把手-5&quot; class=&quot;headerlink&quot; title=&quot;摸到 React 的门把手 (5)&quot;&gt;&lt;/a&gt;摸到 React 的门把手 (5)&lt;/h1&gt;&lt;p&gt;这次我们就来天我们上一次挖的
      
    
    </summary>
    
    
      <category term="Black History" scheme="http://yoursite.com/tags/Black-History/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>摸到 React 的门把手 (4)</title>
    <link href="http://yoursite.com/2017/10/14/%E6%91%B8%E5%88%B0%20React%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B%20(4)/"/>
    <id>http://yoursite.com/2017/10/14/摸到 React 的门把手 (4)/</id>
    <published>2017-10-13T16:09:14.000Z</published>
    <updated>2017-11-05T14:42:01.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摸到-React-的门把手-4"><a href="#摸到-React-的门把手-4" class="headerlink" title="摸到 React 的门把手 (4)"></a>摸到 React 的门把手 (4)</h1><p>经过一段时间的踩坑 <a href="https://frankietang.github.io/2017/08/18/%E6%91%B8%E5%88%B0%20React%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B/" target="_blank" rel="external">摸到 React 的门把手</a> <a href="https://frankietang.github.io/2017/08/20/%E6%91%B8%E5%88%B0%20React%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B%20%282%29/" target="_blank" rel="external">摸到 React 的门把手 (2)</a> <a href="https://frankietang.github.io/2017/08/21/%E6%91%B8%E5%88%B0%20React%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B%20%283%29/" target="_blank" rel="external">摸到 React 的门把手 (3)</a> ，是不是可以做一个项目了？</p><h2 id="Todo-List"><a href="#Todo-List" class="headerlink" title="Todo List"></a>Todo List</h2><p>不管学什么框架，好像大家都喜欢做 Todo List 啊… AngularJS Vue.js React 都有Todo List … 那我也做一个呗。</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-46b343dbe1c59d29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="有什么功能"><a href="#有什么功能" class="headerlink" title="有什么功能"></a>有什么功能</h2><ul><li>输入框输入要做的事</li><li>按回车添加要做的事</li><li>添加要做的事后输入框清空</li><li>每一个要做的事可以标记成已完成</li><li>要做的事能删除</li></ul><h2 id="Todo-List长什么样"><a href="#Todo-List长什么样" class="headerlink" title="Todo List长什么样"></a>Todo List长什么样</h2><ul><li><p>有一个大盒子</p></li><li><p>里面有一个标题</p></li><li><p>有一个类似 <code>&lt;input&gt;</code> 的玩意</p></li><li><p>一个列表，重点</p><ul><li>todoList<ul><li>一个数组 id 用来区分要做的事</li><li>title 是这个要做的事是什么</li><li>status 要有一个 completed 值表示完成，空表示未完成</li><li>deleted 是一个 boolean ，表示是否要删除</li></ul></li></ul></li></ul><ul><li>newTodo 用来容纳用户在 input 输入的值，为什么不用 input 的 value 属性？因为 value= 后面加引号会错。在 React 中是无法直接更改 from 表单元素的值的，必须通过 setState() 去响应用户的输入。</li></ul><h2 id="开始写代码"><a href="#开始写代码" class="headerlink" title="开始写代码"></a>开始写代码</h2><p>注意 JavaScript 会自动给行末添加分号。如果 return 后面换行不加括号就会变成 <code>return;</code>，所以为了提高可读性还是加括号会比较好。</p><p>添加 CSS <code>npm i -S normalize.css</code></p><p>然后在 <code>import</code> 加上 CSS 和 JS ，另外一定要注意顺序。normalize.css 要放在最前面。</p><h2 id="怎么交互"><a href="#怎么交互" class="headerlink" title="怎么交互"></a>怎么交互</h2><p>试了一下 newTodo 的值改成 <code>&#39;&#39;</code> ，在 input 里什么都输入不了</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-2fe83ce52dc119fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>浏览器告诉了我们两种方法</p><ul><li>If the field should be mutable use <code>defaultValue</code>.</li><li>set either <code>onChange</code> or <code>readOnly</code>.</li></ul><p>那我们用一下 <code>defaultValue</code> ，ok 了</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-0a3d90f9199c3e88.gif?imageMogr2/auto-orient/strip" alt=""></p><p>监听用户的回车事件 我们可以用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/onkeypress" target="_blank" rel="external">GlobalEventHandlers.onkeypress</a> 这个属性</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-383c1bddda0d2c8c.gif?imageMogr2/auto-orient/strip" alt=""></p><p>我们用 props 的话我们要注意绑定按回车那个 this ，就是我系列文章上一篇的 bind(this) </p><p>这样，我们就能够往里面加东西了</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-1b876867916258d3.gif?imageMogr2/auto-orient/strip" alt=""></p><p>但是我们又发现了一个问题，input 的 value 没有重置。那是因为 defaultValue，只会影响 input 的第一次值，后面的 newTodo 怎么变，都不会影响 input</p><p>那我们试试 onChange 这种方法，成了</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-2fc657e33903e0cb.gif?imageMogr2/auto-orient/strip" alt=""></p><p>紧接着是标记为已完成的事件和未完成的事件</p><p>我们让 checked 的值先等于 null，点击后就变成了 completed</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-44d0d5f42f5c0a9f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><img src="http://upload-images.jianshu.io/upload_images/3191557-5d8f997dcfc09154.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>点击 checkbox 后增加了 <code>status: &#39;completed&#39;</code></p><p>接下来新增一个删除 todo</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-a6bbcdeda9ada74d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><img src="http://upload-images.jianshu.io/upload_images/3191557-3279099d4a906453.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>我们还要让 deleted 变成真 deleted</p><p>那我们就用 <code>filter</code> 这个 API ，<code>.filter((item)=&gt; !item.deleted)</code></p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-76ff1267a6ea4bd5.gif?imageMogr2/auto-orient/strip" alt=""></p><p>基本功能已经做出来了</p><p>##代码</p><ul><li><a href="https://github.com/FRANKIETANG/react-todo-list/commit/2431a2a81415c3fd674f14a894a2bd3f7777f805" target="_blank" rel="external">基本骨架完成</a></li><li><a href="https://github.com/FRANKIETANG/react-todo-list/commit/37a39392ac65e03d4a4551ca6f2aa33400fcd5ec" target="_blank" rel="external">将输入框变成 TodoInput 组件</a></li><li><a href="https://github.com/FRANKIETANG/react-todo-list/commit/db78ca8d08545394b5ecd93e344fc955508ce393" target="_blank" rel="external">将每个待办封装成 TodoItem 组件</a></li><li><a href="https://github.com/FRANKIETANG/react-todo-list/commit/ad05ce18fe7083a2e76573c3032b28cc6c715103" target="_blank" rel="external">添加 normalize.css</a></li><li><a href="https://github.com/FRANKIETANG/react-todo-list/commit/9b62a921aa2adbfec99c17c04cc4438e7ae17b69" target="_blank" rel="external">添加 reset.css</a></li><li><a href="https://github.com/FRANKIETANG/react-todo-list/commit/556f760571f1b60c7b7c25f46e6698bacb168d67" target="_blank" rel="external">fix value</a></li><li><a href="https://github.com/FRANKIETANG/react-todo-list/commit/5eeef99c4ae2678e60c28a691b0b5d935c1b2591" target="_blank" rel="external">监听回车事件</a></li><li><a href="https://github.com/FRANKIETANG/react-todo-list/commit/c8727d8482b81f84e1441166f3be016b8affea9a" target="_blank" rel="external">App 传一个函数给 TodoInput</a></li><li><a href="https://github.com/FRANKIETANG/react-todo-list/commit/b9de4886314df06317d176b00b769196fcbd642d" target="_blank" rel="external">bind(this)</a></li><li><a href="https://github.com/FRANKIETANG/react-todo-list/commit/b765bebe0097d7283d34209f84404e9433e667c4" target="_blank" rel="external">可以添加 todo 了</a></li><li><a href="https://github.com/FRANKIETANG/react-todo-list/commit/20701a8e764cfe158b3b387c6686fada36f54c52" target="_blank" rel="external">fix value again</a></li><li><a href="https://github.com/FRANKIETANG/react-todo-list/commit/730db326d22892d3ef4e32e6e705c061d24a1142" target="_blank" rel="external">fix value again and again</a></li><li><a href="https://github.com/FRANKIETANG/react-todo-list/commit/a78fea70fd172c1aa35b77d85e1f9720f738ea1c" target="_blank" rel="external">标记为已完成或者未完成</a></li><li><a href="https://github.com/FRANKIETANG/react-todo-list/commit/9bc07f8a2c564c95bacc7e8ba1728e4b69b20784" target="_blank" rel="external">删除 todo</a></li><li><a href="https://github.com/FRANKIETANG/react-todo-list/commit/f0ea5a391f90588fd093eb859c273bbd96a05930" target="_blank" rel="external">真正删除 todo</a></li><li><a href="https://github.com/FRANKIETANG/react-todo-list/commit/85b7255e4daa64699badfa2b35f8eab4268516f5" target="_blank" rel="external">TodoItem 样式</a></li><li><a href="https://github.com/FRANKIETANG/react-todo-list/commit/d1df4c1ecadaf9aa5af0a55e30d295e2b8b943c5" target="_blank" rel="external">TodoInput 样式</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;摸到-React-的门把手-4&quot;&gt;&lt;a href=&quot;#摸到-React-的门把手-4&quot; class=&quot;headerlink&quot; title=&quot;摸到 React 的门把手 (4)&quot;&gt;&lt;/a&gt;摸到 React 的门把手 (4)&lt;/h1&gt;&lt;p&gt;经过一段时间的踩坑 &lt;a h
      
    
    </summary>
    
    
      <category term="Black History" scheme="http://yoursite.com/tags/Black-History/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>摸到 React 的门把手 (3)</title>
    <link href="http://yoursite.com/2017/10/14/%E6%91%B8%E5%88%B0%20React%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B%20(3)/"/>
    <id>http://yoursite.com/2017/10/14/摸到 React 的门把手 (3)/</id>
    <published>2017-10-13T16:08:13.000Z</published>
    <updated>2017-11-05T14:42:01.568Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摸到-React-的门把手-3"><a href="#摸到-React-的门把手-3" class="headerlink" title="摸到 React 的门把手 (3)"></a>摸到 React 的门把手 (3)</h1><p>经过了上几篇文章 <a href="https://frankietang.github.io/2017/08/18/%E6%91%B8%E5%88%B0%20React%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B/" target="_blank" rel="external">摸到 React 的门把手</a> <a href="https://frankietang.github.io/2017/08/20/%E6%91%B8%E5%88%B0%20React%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B%20(2" target="_blank" rel="external">摸到 React 的门把手 (2)</a>/) 的踩坑，我们估计很快就可以摸到门把手了。</p><h2 id="关于-JSX"><a href="#关于-JSX" class="headerlink" title="关于 JSX"></a>关于 JSX</h2><p>实际上 JSX 并不是 JavaScript 和 HTML 的结合，而是和 XML 的结合，就像这样。<a href="https://babeljs.io/repl/" target="_blank" rel="external">https://babeljs.io/repl/</a></p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-264608323011334e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><a href="https://facebook.github.io/react/docs/introducing-jsx.html" target="_blank" rel="external">Introducing - JSX</a></p><h2 id="关于-React-的虚拟-DOM"><a href="#关于-React-的虚拟-DOM" class="headerlink" title="关于 React 的虚拟 DOM"></a>关于 React 的虚拟 DOM</h2><blockquote><p>你用这些 XML 写出来的标签，都不会出现在页面里，只会出现在内存里。React 会使用虚拟 DOM 计算出真正的页面结构，然后再更新到页面中（真正的 DOM 操作）。</p><p>让 JS 操作内存肯定比操作 DOM 要快很多。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/3191557-04a725ede551ad1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="."></p><p>看看这一段代码：</p><ul><li>用 XML 语法声明一个 h1</li><li>babel 将 h1 转为 React Element（虚拟元素）</li><li>React 将虚拟元素转化为真正的 DOM，插入到 #root 里。</li></ul><h2 id="按需更新"><a href="#按需更新" class="headerlink" title="按需更新"></a>按需更新</h2><blockquote><p>With our knowledge so far, the only way to update the UI is to create a new element, and pass it to <code>ReactDOM.render()</code>.</p></blockquote><p>所以说更新一个元素的唯一方法就是新的元素</p><p>我们改一下 index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tick</span>(<span class="params"></span>) </span>&#123;</span><span class="line">  <span class="keyword">const</span> element = (</span><span class="line">    &lt;div&gt;</span><span class="line">      &lt;h1&gt;Hello, world!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><span class="line">      &lt;h2&gt;It is &#123;<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()&#125;.&lt;<span class="regexp">/h2&gt;</span></span><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><span class="line">  );</span><span class="line">  ReactDOM.render(</span><span class="line">    element,</span><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><span class="line">  );</span><span class="line">&#125;</span><span class="line"></span><span class="line">setInterval(tick, <span class="number">1000</span>);</span></pre></td></tr></table></figure><p>这个示例通过 <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval" target="_blank" rel="external"><code>setInterval()</code></a> 方法，每秒钟调用一次 <code>ReactDOM.render()</code>.</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><span class="line">    render() &#123;</span><span class="line">        <span class="keyword">return</span> &lt;h1&gt;<span class="type">Component</span>&lt;/h1&gt;</span><span class="line">    &#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="type">ReactDOM</span>.render(</span><span class="line">    &lt;<span class="type">Welcome</span>/&gt;,</span><span class="line">    document.getElementById(<span class="symbol">'roo</span>t')</span><span class="line">)</span></pre></td></tr></table></figure><p>这样我们就造了一个 <code>&lt;Welcome/&gt;</code> 的组件</p><p><code>extends React.Component</code> 不能删掉。</p><h2 id="组件成为一个单独代码"><a href="#组件成为一个单独代码" class="headerlink" title="组件成为一个单独代码"></a>组件成为一个单独代码</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//src/Welcome.js</span></span><span class="line"><span class="keyword">import</span> <span class="type">React</span> from <span class="symbol">'reac</span>t'</span><span class="line"></span><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><span class="line">    render() &#123;</span><span class="line">        <span class="keyword">return</span> &lt;h1&gt;<span class="type">Component</span>&lt;/h1&gt;</span><span class="line">    &#125;</span><span class="line">&#125;</span><span class="line"></span><span class="line">export <span class="keyword">default</span> <span class="type">Welcome</span></span></pre></td></tr></table></figure><p><code>import React from &#39;react&#39;</code> 这个是引用 React ，不写这一句就在这个组件代码里就用不了 <code>React.Component</code></p><p><code>export</code> 和 <code>export default</code> 作用是导出常量/函数/文件/模块 这些</p><p><code>export</code> 和 <code>import</code> 可以有多个，<code>export default</code> 只能有一个</p><p><code>export</code> 导出导入的时候要加 {}，<code>export default</code> 则不需要</p><p><a href="http://www.jianshu.com/p/edaf43e9384f" target="_blank" rel="external">ES6：export default 和 export 区别</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//src/index.js</span></span><span class="line"><span class="keyword">import</span> Welcome <span class="keyword">from</span> <span class="string">'./Welcome'</span></span><span class="line"></span><span class="line">ReactDOM.render(</span><span class="line">  &lt;Welcome/&gt;,</span><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><span class="line">)</span></pre></td></tr></table></figure><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//src/Welcome.js</span></span><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><span class="line">    render() &#123;</span><span class="line">        <span class="keyword">return</span> &lt;h1&gt;<span class="type">I</span> am &#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;</span><span class="line">    &#125;</span><span class="line">&#125;</span><span class="line"><span class="comment">//其中 class Welcome 变成 funciton Welcome</span></span></pre></td></tr></table></figure><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><span class="line">    &lt;Welcome name=<span class="string">"tangkalun"</span>/&gt;,</span><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><span class="line">)</span></pre></td></tr></table></figure><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><blockquote><p>组件不能改变得到的 props，那么组件中可以变的东西放在哪呢？答案是 state（函数形式的组件不支持 state）。</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//src/Welcome.js</span></span><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><span class="line">    constructor(props)&#123;</span><span class="line">        <span class="keyword">super</span>(props)</span><span class="line">        <span class="keyword">this</span>.state = &#123;</span><span class="line">            date: <span class="keyword">new</span> <span class="type">Date</span>()</span><span class="line">        &#125;</span><span class="line">    &#125;</span><span class="line">    render() &#123;</span><span class="line">        <span class="keyword">return</span> (</span><span class="line">            &lt;div&gt;</span><span class="line">                &lt;h1&gt;<span class="type">I</span> am &#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;</span><span class="line">                &lt;h2&gt;&#123;<span class="keyword">this</span>.state.date.toString()&#125;.&lt;/h2&gt;                </span><span class="line">            &lt;/div&gt;</span><span class="line">        )</span><span class="line">    &#125;</span><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="改变-state"><a href="#改变-state" class="headerlink" title="改变 state"></a>改变 state</h2><p>这里我们可以用 <code>setState()</code> 来改变 state。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 constructor 里加</span></span><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><span class="line">  <span class="keyword">this</span>.state = &#123;</span><span class="line">    date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><span class="line">  &#125;</span><span class="line">&#125;)</span></pre></td></tr></table></figure><p>这上面的代码是有问题的，实际上还要 <code>.bind(this)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span></pre></td><td class="code"><pre><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><span class="line">  <span class="keyword">this</span>.setState(&#123;</span><span class="line">    date: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><span class="line">  &#125;)</span><span class="line">&#125;.bind(<span class="keyword">this</span>))</span></pre></td></tr></table></figure><blockquote><p>The callback is made in a different context. You need to <code>bind</code> to <code>this</code> in order to have access inside the callback</p></blockquote><p><a href="https://stackoverflow.com/questions/31045716/react-this-setstate-is-not-a-function" target="_blank" rel="external">React this.setState is not a function</a></p><p><a href="https://zhuanlan.zhihu.com/p/25954470" target="_blank" rel="external">setState：这个API设计到底怎么样</a></p><p>我讨厌 setState 这个 API</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><a href="https://facebook.github.io/react/docs/react-component.html#the-component-lifecycle" target="_blank" rel="external">The Component Lifecycle</a></p><p>React 的生命周期包括三个阶段：mount（挂载）、update（更新）和 unmount（移除）</p><h3 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h3><blockquote><p>mount 就是第一次让组件出现在页面中的过程。这个过程的关键就是 render 方法。React 会将 render 的返回值（一般是虚拟 DOM，也可以是 DOM 或者 null）插入到页面中。</p><p>这个过程会暴露几个钩子（hook）方便你往里面加代码：</p><ul><li><code>constructor()</code> 初始化 props 和 state</li><li><code>componentWillMount()</code> 我要插入了</li><li><code>render()</code> 将 render 里的 return 的内容插入到页面中</li><li><code>componentDidMount()</code> 插进去后该做点什么吗？</li></ul></blockquote><p>commit: <a href="https://github.com/FRANKIETANG/react-demo/commit/cad040489620cf5b4f7e02a571cb2e3c06803932" target="_blank" rel="external">钩子</a></p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-c31f16851c918ba5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><blockquote><p>mount 之后，如果数据有任何变动，就会来到 update 过程，这个过程有 5 个钩子：</p><ul><li><code>componentWillReceiveProps(nextProps)</code> - 我要读取 props 啦！</li><li><code>shouldComponentUpdate(nextProps, nextState)</code> - 请问要不要更新组件？true / false</li><li><code>componentWillUpdate()</code> - 我要更新组件啦！</li><li><code>render()</code> - 更新！</li><li><code>componentDidUpdate()</code> - 更新完毕啦！</li></ul></blockquote><h3 id="unmount"><a href="#unmount" class="headerlink" title="unmount"></a>unmount</h3><blockquote><p>当一个组件将要从页面中移除时，会进入 unmount 过程，这个过程就一个钩子：</p><ul><li>componentWillUnmount() - 我要死啦！</li></ul></blockquote><h2 id="setState-应该放在哪？"><a href="#setState-应该放在哪？" class="headerlink" title="setState 应该放在哪？"></a>setState 应该放在哪？</h2><p>commit: <a href="https://github.com/FRANKIETANG/react-demo/commit/3b2061343d754f2975356ef4502d445e943eef5a" target="_blank" rel="external">哪些钩子里面可以加 setState</a></p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-6dc701032129deb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>这里面有三个错误</p><p>第一个错误说明不能在 constructor 里面 setState</p><p>第二个错误说明不能在 render 里面 setState</p><p>第三个错误说明 Welcome.shouldComponentUpdate 必须返回 boolean value，那我们改改</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-ace3aae6e3f84a99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>好吧错误都是 render 的，那就都删掉吧。</p><p>还是会有 bug 原因是在 componentWillUpdate 和 componentDidUpdate 里 setState 了，因为每次 setState 都会触发这两个钩子，而这两个钩子却又触发了 setState。</p><p>所以只能在这几个钩子里 setState：</p><ul><li><code>componentWillMount</code></li><li><code>componentDidMount</code></li><li><code>componentWillReceiveProps</code></li><li><code>componentDidUpdate</code></li></ul><h2 id="看看成果"><a href="#看看成果" class="headerlink" title="看看成果"></a><a href="https://github.com/FRANKIETANG/react-demo" target="_blank" rel="external">看看成果</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;摸到-React-的门把手-3&quot;&gt;&lt;a href=&quot;#摸到-React-的门把手-3&quot; class=&quot;headerlink&quot; title=&quot;摸到 React 的门把手 (3)&quot;&gt;&lt;/a&gt;摸到 React 的门把手 (3)&lt;/h1&gt;&lt;p&gt;经过了上几篇文章 &lt;a hr
      
    
    </summary>
    
    
      <category term="Black History" scheme="http://yoursite.com/tags/Black-History/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>摸到 React 的门把手 (2)</title>
    <link href="http://yoursite.com/2017/10/14/%E6%91%B8%E5%88%B0%20React%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B%20(2)/"/>
    <id>http://yoursite.com/2017/10/14/摸到 React 的门把手 (2)/</id>
    <published>2017-10-13T16:07:46.000Z</published>
    <updated>2017-11-05T14:42:01.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摸到-React-的门把手-2"><a href="#摸到-React-的门把手-2" class="headerlink" title="摸到 React 的门把手 (2)"></a>摸到 React 的门把手 (2)</h1><p>经过了上一篇 <a href="https://frankietang.github.io/2017/08/18/%E6%91%B8%E5%88%B0%20React%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B/" target="_blank" rel="external">摸到 React 的门把手</a> 的踩坑，我们现在可以更加深入的看看 React 其中的奥妙了。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>点击 Get Started 第一个就是 ReactDOM 的 Hello World，我们先别看这些，先看看怎么安装，点击 Installation</p><p>那我们就试试 Create a New App </p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-5c60dc8c2e8b2bfe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>搞完 <code>create-react-app my-app</code> 后会有提示，看看就好，记住这四句命令</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-b2844d1fd40c9dff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>弹出如下页面就成功了</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-237bac3ead01e3d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="create-react-app-里面有什么"><a href="#create-react-app-里面有什么" class="headerlink" title="create-react-app 里面有什么"></a>create-react-app 里面有什么</h2><p>我们来看一下文件目录</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-52e47859bb2f5dc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>src 目录，用于存放所有源代码，最重要的就是 index.js 了。和 webpack 那个 index.js 差不多</li><li>public 目录，用于存放不需要 build 的资源，如 publib/index.html</li></ul><p>当我们运行了 <code>npm run build</code> 这句话，我们会发现多了一个 build 文件夹，里面的文件全部都压缩过了，感觉有点像 webpack 啊。。</p><h2 id="试着写写-React"><a href="#试着写写-React" class="headerlink" title="试着写写 React"></a>试着写写 React</h2><p>我们把全部文件删掉，然后运行</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">create-react-app</span> .</span><span class="line"><span class="string">npm </span><span class="string">start</span></span></pre></td></tr></table></figure><p>改 src/inden.js </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><span class="line">    &lt;h1&gt;Hello, world!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</span><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><span class="line">)</span></pre></td></tr></table></figure><p>展现出一个大大的 hello world </p><p>我们做点小修改</p><ul><li><p>我们把 Hello World 改成 Hi World，只用直接在 <code>&lt;h1&gt;text&lt;/h1&gt;</code> 这里改就好了。</p></li><li><p>把 document.getElementById(‘root’) 改为 document.getElementById(‘root2’)，哟吼？网页直接显示了报错信息</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-c625b5538e2c6912.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>把 publib/index.html 里的 19 行改为 <code>&lt;div id=&quot;root2&quot;&gt;&lt;/div&gt;</code>，我们会发现页面有变回去了，说明这些都是相关联的。</p></li><li><p><code>&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</code> 里添加了在 index.js 写好了的 HTML 代码。</p></li></ul><h2 id="将这个应用部署到-GitHub"><a href="#将这个应用部署到-GitHub" class="headerlink" title="将这个应用部署到 GitHub"></a>将这个应用部署到 GitHub</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> .</span></span><span class="line"><span class="bash">git commit -m <span class="string">'update'</span></span></span><span class="line"><span class="bash">npm run build</span></span></pre></td></tr></table></figure><p>我们会发现看上去好像已经上传了，但实际上并没有，上网查了查原来是 .gitignore 被 create-react-app 改掉了，你需要删除 .gitignore 里面的 /build 这一行。</p><p>然后我们就可以愉快的 push 上去了</p><p>嗯？怎么没有效果啊？还记得前面曾经有提示<img src="http://upload-images.jianshu.io/upload_images/3191557-ece626b7c04a108c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>好，我们设置好路径</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="string">"homepage"</span>: <span class="string">"https://frankietang.github.io/react-demo/build"</span></span></pre></td></tr></table></figure><p>搞定。</p><h2 id="看看成果"><a href="#看看成果" class="headerlink" title="看看成果"></a><a href="https://github.com/FRANKIETANG/react-demo" target="_blank" rel="external">看看成果</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;摸到-React-的门把手-2&quot;&gt;&lt;a href=&quot;#摸到-React-的门把手-2&quot; class=&quot;headerlink&quot; title=&quot;摸到 React 的门把手 (2)&quot;&gt;&lt;/a&gt;摸到 React 的门把手 (2)&lt;/h1&gt;&lt;p&gt;经过了上一篇 &lt;a href
      
    
    </summary>
    
    
      <category term="Black History" scheme="http://yoursite.com/tags/Black-History/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>摸到 React 的门把手</title>
    <link href="http://yoursite.com/2017/10/14/%E6%91%B8%E5%88%B0%20React%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B/"/>
    <id>http://yoursite.com/2017/10/14/摸到 React 的门把手/</id>
    <published>2017-10-13T16:06:56.000Z</published>
    <updated>2017-11-05T14:42:01.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摸到-React-的门把手"><a href="#摸到-React-的门把手" class="headerlink" title="摸到 React 的门把手"></a>摸到 React 的门把手</h1><p><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="external">React 入门实例教程 - 阮一峰</a></p><p>阮一峰真的很适合当老师，这里我们就慢慢的跟上阮一峰老师步伐，摸上 React 的门把手。</p><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> init</span><span class="line"><span class="built_in">npm</span> install --save react react-dom</span></pre></td></tr></table></figure><p>而阮一峰的 demo 包自带了 React ，那我们就直接用吧。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">clone</span> <span class="title">git</span>@github.com:ruanyf/react-demos.git</span></pre></td></tr></table></figure><h2 id="第一个-demo"><a href="#第一个-demo" class="headerlink" title="第一个 demo"></a>第一个 demo</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined">      ReactDOM.render(</span></span><span class="line"><span class="javascript">        &lt;h1&gt;Hello, world!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</span></span><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span></span><span class="line"><span class="undefined">      );</span></span><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure><ol><li><p>并非一定要引用 browser.js ，引入它的作用是使浏览器支持<code>babel</code>，你可以使用<code>ES2015</code>（具体可以看<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">阮一峰的ECMAScript 6 入门</a>）进行编码。如果你用ES5，可以不引入。而在这里的作用是将 JSX 语法转为 JavaScript 语法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// The ES5 way</span></span><span class="line"><span class="keyword">var</span> Photo = React.createClass(&#123;</span><span class="line">  handleDoubleTap: <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123; … &#125;,</span><span class="line">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123; … &#125;,</span><span class="line">&#125;);</span></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// The ES6+ way</span></span><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Photo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><span class="line">  handleDoubleTap(e) &#123; … &#125;</span><span class="line">  render() &#123; … &#125;</span><span class="line">&#125;</span></pre></td></tr></table></figure></li><li><p>注意 React 是用了 JSX 的语法，跟 JavaScript 不兼容。使用了 JSX 的地方都要加上 <code>type=&#39;text/babel&#39;</code></p></li><li><code>ReactDOM.render</code> 是一个 API ，将模板转成 HTML 语言，并插入制定的 DOM 节点。</li></ol><h2 id="第二个-demo"><a href="#第二个-demo" class="headerlink" title="第二个 demo"></a>第二个 demo</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="actionscript">      <span class="keyword">var</span> names = [<span class="string">'Alice'</span>, <span class="string">'Emily'</span>, <span class="string">'Kate'</span>];</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="undefined">      ReactDOM.render(</span></span><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><span class="line"><span class="undefined">        &#123;</span></span><span class="line"><span class="actionscript">          names.map(<span class="function"><span class="keyword">function</span> <span class="params">(name, index)</span> </span>&#123;</span></span><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>Hello, &#123;name&#125;!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><span class="line"><span class="undefined">          &#125;)</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</span></span></span><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span></span><span class="line"><span class="undefined">      );</span></span><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure><ol><li>在这个例子中我觉得 JSX 语法原来可以这样用，其实就是等于 HTML 和 JavaScript 的混写。</li><li>遇到 HTML 标签（以 <code>&lt;</code> 开头），就用 HTML 规则解析；遇到代码块（以 <code>{</code> 开头），就用 JavaScript 规则解析。</li></ol><h2 id="第三个demo"><a href="#第三个demo" class="headerlink" title="第三个demo"></a>第三个demo</h2><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span></span></span><span class="line"><span class="xml">      var arr = [</span></span><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>,</span></span><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">key</span>=<span class="string">"2"</span>&gt;</span>React is awesome<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>,</span></span><span class="line"><span class="xml">      ];</span></span><span class="line"><span class="xml">      ReactDOM.render(</span></span><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;arr&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</span></span><span class="line"><span class="xml">        document.getElementById('example')</span></span><span class="line"><span class="xml">      );</span></span><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span></pre></td></tr></table></figure><ol><li>这里有一个亮点，就是用了这行代码 <code>&lt;div&gt;{arr}&lt;/div&gt;</code> 把数组成员全部展现到模板上，如果让我想我只会想到用 for 循环再一个一个加到 HTML 那里。。。</li></ol><h2 id="第四个demo"><a href="#第四个demo" class="headerlink" title="第四个demo"></a>第四个demo</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="actionscript">      <span class="keyword">var</span> HelloMessage = React.createClass(&#123;</span></span><span class="line"><span class="actionscript">        render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">      &#125;);</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="undefined">      ReactDOM.render(</span></span><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">HelloMessage</span> <span class="attr">name</span>=<span class="string">"John"</span> /&gt;</span>,</span></span></span><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span></span><span class="line"><span class="undefined">      );</span></span><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure><ol><li><p>也就是说，用 <code>React.createClass</code> 可以把一个段代码封装成组件，然后像普通的 HTML 标签一样在网页插入这个组件。</p></li><li><p>要保证自己的组件拥有 <code>ReactDOM.render</code> 这个 API 来输出组件。</p></li><li><p>组件类的第一个字母必须大写，否则会报错。如 <code>HelloMessage</code> 不能写成 <code>helloMessage</code>。</p></li><li><p>还有组件类只能包含一个顶层标签，否则会出错 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HelloMessage = React.createClass(&#123;</span><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><span class="line"><span class="xml">      Hello &#123;this.props.name&#125;</span></span><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><span class="line"><span class="xml">      some text</span></span><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><span class="line">  &#125;</span><span class="line">&#125;);</span></pre></td></tr></table></figure></li><li><p>组件的用法和 HTML 的用法是一样的，可以加入任何的属性，比如 <code>&lt;HelloMessage name=&quot;John&quot;&gt;</code> 就是 <code>HelloMessage</code> 中加入一个 <code>name</code> 属性。组件的属性可以在组件类的 <code>this.props</code> 对象上获取，比如 <code>name</code> 属性就可以通过 <code>this.props.name</code> 读取。</p></li><li><p>添加组件属性，有一个地方需要注意，就是 <code>class</code> 属性需要写成 <code>className</code> ，<code>for</code> 属性需要写成 <code>htmlFor</code> ，这是因为 <code>class</code> 和 <code>for</code> 是 JavaScript 的保留字。</p></li></ol><h2 id="第五个demo"><a href="#第五个demo" class="headerlink" title="第五个demo"></a>第五个demo</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="actionscript">      <span class="keyword">var</span> NotesList = React.createClass(&#123;</span></span><span class="line"><span class="actionscript">        render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><span class="line"><span class="actionscript">          <span class="keyword">return</span> (</span></span><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span></span></span><span class="line"><span class="undefined">              &#123;</span></span><span class="line"><span class="actionscript">                React.Children.map(<span class="keyword">this</span>.props.children, <span class="function"><span class="keyword">function</span> <span class="params">(child)</span> </span>&#123;</span></span><span class="line"><span class="javascript">                  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</span></span><span class="line"><span class="undefined">                &#125;)</span></span><span class="line"><span class="undefined">              &#125;</span></span><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span></span><span class="line"><span class="undefined">          );</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">      &#125;);</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="undefined">      ReactDOM.render(</span></span><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">NotesList</span>&gt;</span></span></span></span><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">NotesList</span>&gt;</span>,</span></span></span><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span></span><span class="line"><span class="undefined">      );</span></span><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure><ol><li>这一个例子主要是讲解了 <code>this.props.children</code> 属性。它表示组件的所有子节点。</li><li><code>this.props.children</code> 的值有三种可能：如果当前组件没有子节点，它就是 <code>undefined</code> ;如果有一个子节点，数据类型是 <code>object</code> ；如果有多个子节点，数据类型就是 <code>array</code> 。所以，处理 <code>this.props.children</code> 的时候要小心。</li><li>React 提供一个工具方法 <a href="https://facebook.github.io/react/docs/top-level-api.html#react.children" target="_blank" rel="external"><code>React.Children</code></a> 来处理 <code>this.props.children</code> 。我们可以用 <code>React.Children.map</code> 来遍历子节点，而不用担心 <code>this.props.children</code> 的数据类型是 <code>undefined</code> 还是 <code>object</code>。</li></ol><h2 id="第六的demo"><a href="#第六的demo" class="headerlink" title="第六的demo"></a>第六的demo</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="actionscript">      <span class="keyword">var</span> data = <span class="number">123</span>;</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="actionscript">      <span class="keyword">var</span> MyTitle = React.createClass(&#123;</span></span><span class="line"><span class="undefined">        propTypes: &#123;</span></span><span class="line"><span class="undefined">          title: React.PropTypes.string.isRequired,</span></span><span class="line"><span class="undefined">        &#125;,</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="actionscript">        render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> &#123;this.props.title&#125; <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">      &#125;);</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="undefined">      ReactDOM.render(</span></span><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">MyTitle</span> <span class="attr">title</span>=<span class="string">&#123;data&#125;</span> /&gt;</span>,</span></span></span><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span></span><span class="line"><span class="undefined">      );</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure><ol><li><p><code>PropTypes</code>属性，就是用来验证组件实例的属性是否符合要求。</p></li><li><p><code>Mytitle</code>组件有一个<code>title</code>属性。<code>PropTypes</code> 告诉 React，这个 <code>title</code> 属性是必须的，而且它的值必须是字符串。<code>title</code> 没有通过验证。</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-a577caebac60a9c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>另外，阮一峰老师还介绍了<code>getDefaultProps</code> 方法可以用来设置组件属性的默认值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyTitle = React.createClass(&#123;</span><span class="line">  getDefaultProps : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><span class="line">    <span class="keyword">return</span> &#123;</span><span class="line">      title : <span class="string">'Hello World'</span></span><span class="line">    &#125;;</span><span class="line">  &#125;,</span><span class="line"></span><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><span class="line">     <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> &#123;this.props.title&#125; <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><span class="line">   &#125;</span><span class="line">&#125;);</span><span class="line"></span><span class="line">ReactDOM.render(</span><span class="line">  &lt;MyTitle /&gt;,</span><span class="line">  <span class="built_in">document</span>.body</span><span class="line">);</span><span class="line"><span class="comment">//上面代码会输出"Hello World"。</span></span></pre></td></tr></table></figure></li></ol><h2 id="第七个demo"><a href="#第七个demo" class="headerlink" title="第七个demo"></a>第七个demo</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="actionscript">      <span class="keyword">var</span> MyComponent = React.createClass(&#123;</span></span><span class="line"><span class="actionscript">        handleClick: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><span class="line"><span class="actionscript">          <span class="keyword">this</span>.refs.myTextInput.focus();</span></span><span class="line"><span class="undefined">        &#125;,</span></span><span class="line"><span class="actionscript">        render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><span class="line"><span class="actionscript">          <span class="keyword">return</span> (</span></span><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ref</span>=<span class="string">"myTextInput"</span> /&gt;</span></span></span></span><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Focus the text input"</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span> /&gt;</span></span></span></span><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><span class="line"><span class="undefined">          );</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">      &#125;);</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="undefined">      ReactDOM.render(</span></span><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span>,</span></span></span><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span></span><span class="line"><span class="undefined">      );</span></span><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><span class="line">//这样就能通过点击 button 来获取 input 的 focus</span></pre></td></tr></table></figure><ol><li><p>组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual DOM）。只有当它插入文档以后，才会变成真实的 DOM 。根据 React 的设计，所有的 DOM 变动，都先在虚拟 DOM 上发生，然后再将实际发生变动的部分，反映在真实 DOM上，这种算法叫做 <a href="http://calendar.perfplanet.com/2013/diff/" target="_blank" rel="external">DOM diff</a> ，它可以极大提高网页的性能表现。</p><p>但是，有时需要从组件获取真实 DOM 的节点，这时就要用到 <code>ref</code> 属性。</p></li><li><p>上面代码中，组件 <code>MyComponent</code> 的子节点有一个文本输入框，用于获取用户的输入。这时就必须获取真实的 DOM 节点，虚拟 DOM 是拿不到用户输入的。为了做到这一点，文本输入框必须有一个 <code>ref</code> 属性，然后 <code>this.refs.[refName]</code> 就会返回这个真实的 DOM 节点。</p></li><li><p>需要注意的是，由于 <code>this.refs.[refName]</code> 属性获取的是真实 DOM ，所以必须等到虚拟 DOM 插入文档以后，才能使用这个属性，否则会报错。上面代码中，通过为组件指定 <code>Click</code> 事件的回调函数，确保了只有等到真实 DOM 发生 <code>Click</code> 事件之后，才会读取 <code>this.refs.[refName]</code> 属性。</p></li><li><p>除了 <code>Click</code> 事件以外，还有 <code>KeyDown</code> 、<code>Copy</code>、<code>Scroll</code> 等</p></li></ol><h2 id="第八个demo"><a href="#第八个demo" class="headerlink" title="第八个demo"></a>第八个demo</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="actionscript"><span class="keyword">var</span> LikeButton = React.createClass(&#123;</span></span><span class="line"><span class="actionscript">  getInitialState: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;liked: <span class="literal">false</span>&#125;;</span></span><span class="line"><span class="undefined">  &#125;,</span></span><span class="line"><span class="actionscript">  handleClick: <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span></span><span class="line"><span class="actionscript">    <span class="keyword">this</span>.setState(&#123;liked: !<span class="keyword">this</span>.state.liked&#125;);</span></span><span class="line"><span class="undefined">  &#125;,</span></span><span class="line"><span class="actionscript">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><span class="line"><span class="actionscript">    <span class="keyword">var</span> text = <span class="keyword">this</span>.state.liked ? <span class="string">'like'</span> : <span class="string">'haven\'t liked'</span>;</span></span><span class="line"><span class="actionscript">    <span class="keyword">return</span> (</span></span><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></span></span><span class="line"><span class="actionscript">        You &#123;text&#125; <span class="keyword">this</span>. Click to toggle.</span></span><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><span class="line"><span class="undefined">    );</span></span><span class="line"><span class="undefined">  &#125;</span></span><span class="line"><span class="undefined">&#125;);</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="undefined">ReactDOM.render(</span></span><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">LikeButton</span> /&gt;</span>,</span></span></span><span class="line"><span class="javascript">  <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span></span><span class="line"><span class="undefined">);</span></span><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure><ol><li>组件的状态，用来和用户互动，组件一开始有一个状态，然后用户操作导致状态改变，从而改变状态，根据状态重新渲染页面。</li><li><code>return {liked: false}</code> 初始化组件的状态</li><li><code>this.setState({liked: !this.state.liked})</code> 将组件状态设置为当前状态相反状态</li></ol><h2 id="第九个demo"><a href="#第九个demo" class="headerlink" title="第九个demo"></a>第九个demo</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="actionscript">      <span class="keyword">var</span> Input = React.createClass(&#123;</span></span><span class="line"><span class="actionscript">        getInitialState: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;value: <span class="string">'Hello!'</span>&#125;;</span></span><span class="line"><span class="undefined">        &#125;,</span></span><span class="line"><span class="actionscript">        handleChange: <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span></span><span class="line"><span class="actionscript">          <span class="keyword">this</span>.setState(&#123;value: event.target.value&#125;);</span></span><span class="line"><span class="undefined">        &#125;,</span></span><span class="line"><span class="actionscript">        render: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><span class="line"><span class="actionscript">          <span class="keyword">var</span> value = <span class="keyword">this</span>.state.value;</span></span><span class="line"><span class="actionscript">          <span class="keyword">return</span> (</span></span><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span></span></span></span><span class="line"><span class="handlebars"><span class="xml">              <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><span class="line"><span class="undefined">          );</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">      &#125;);</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="javascript">      ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Input</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>));</span></span><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure><ol><li>第一次看这个，呦吼？这难道是传说中的双向绑定？<a href="http://www.cnblogs.com/kuailingmin/p/4609721.html" target="_blank" rel="external">React的双向绑定</a></li><li>上面代码中，文本输入框的值，不能用 <code>this.props.value</code> 读取，而要定义一个 <code>onChange</code> 事件的回调函数，通过 <code>event.target.value</code> 读取用户输入的值。</li></ol><h2 id="第十个demo"><a href="#第十个demo" class="headerlink" title="第十个demo"></a>第十个demo</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="actionscript">      <span class="keyword">var</span> Hello = React.createClass(&#123;</span></span><span class="line"><span class="actionscript">        getInitialState: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><span class="line"><span class="undefined">            opacity: 1.0</span></span><span class="line"><span class="undefined">          &#125;;</span></span><span class="line"><span class="undefined">        &#125;,</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="actionscript">        componentDidMount: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><span class="line"><span class="actionscript">          <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><span class="line"><span class="actionscript">            <span class="keyword">var</span> opacity = <span class="keyword">this</span>.state.opacity;</span></span><span class="line"><span class="undefined">            opacity -= .05;</span></span><span class="line"><span class="actionscript">            <span class="keyword">if</span> (opacity &lt; <span class="number">0.1</span>) &#123;</span></span><span class="line"><span class="undefined">              opacity = 1.0;</span></span><span class="line"><span class="undefined">            &#125;</span></span><span class="line"><span class="actionscript">            <span class="keyword">this</span>.setState(&#123;</span></span><span class="line"><span class="undefined">              opacity: opacity</span></span><span class="line"><span class="undefined">            &#125;);</span></span><span class="line"><span class="actionscript">          &#125;.bind(<span class="keyword">this</span>), <span class="number">100</span>);</span></span><span class="line"><span class="undefined">        &#125;,</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="actionscript">        render: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><span class="line"><span class="actionscript">          <span class="keyword">return</span> (</span></span><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=</span></span><span class="template-variable">&#123;&#123;opacity: this.state.opacity&#125;&#125;</span><span class="xml"><span class="tag">&gt;</span></span></span></span><span class="line"><span class="actionscript">              Hello &#123;<span class="keyword">this</span>.props.name&#125;</span></span><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><span class="line"><span class="undefined">          );</span></span><span class="line"><span class="undefined">        &#125;</span></span><span class="line"><span class="undefined">      &#125;);</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="undefined">      ReactDOM.render(</span></span><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">Hello</span> <span class="attr">name</span>=<span class="string">"world"</span>/&gt;</span>,</span></span></span><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span></span><span class="line"><span class="undefined">      );</span></span><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure><ol><li><p>这里主要是介绍了关于组件的生命周期</p></li><li><p>React 为每个状态都提供了两种处理函数，<code>will</code> 是我要插入了！<code>did</code> 是我插进去之后，要不要搞点东西？</p></li><li><p>阮一峰老师的这个 demo 是在<code>hello</code>组件加载以后，通过 <code>componentDidMount</code> 方法设置一个定时器，每隔100毫秒，就重新设置组件的透明度，从而引发重新渲染。</p></li><li><p>注意组件 <code>style</code> 属性的设置方式</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span></pre></td><td class="code"><pre><span class="line">//这样是错的</span><span class="line">style=<span class="string">"opacity:&#123;this.state.opacity&#125;;"</span></span><span class="line">//而要写成</span><span class="line">style=&#123;&#123;opacity: this.<span class="keyword">state</span>.opacity&#125;&#125;</span></pre></td></tr></table></figure><p>这是因为 React 组件样式是一个对象，所以第一重大括号表示这是 JavaScript 语法，第二重大括号表示样式对象。</p></li></ol><h2 id="第十一个demo"><a href="#第十一个demo" class="headerlink" title="第十一个demo"></a>第十一个demo</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="actionscript"><span class="keyword">var</span> UserGist = React.createClass(&#123;</span></span><span class="line"><span class="actionscript">  getInitialState: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><span class="line"><span class="actionscript">      username: <span class="string">''</span>,</span></span><span class="line"><span class="actionscript">      lastGistUrl: <span class="string">''</span></span></span><span class="line"><span class="undefined">    &#125;;</span></span><span class="line"><span class="undefined">  &#125;,</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="actionscript">  componentDidMount: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><span class="line"><span class="javascript">    $.get(<span class="keyword">this</span>.props.source, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span></span><span class="line"><span class="actionscript">      <span class="keyword">var</span> lastGist = result[<span class="number">0</span>];</span></span><span class="line"><span class="actionscript">      <span class="keyword">if</span> (<span class="keyword">this</span>.isMounted()) &#123;</span></span><span class="line"><span class="actionscript">        <span class="keyword">this</span>.setState(&#123;</span></span><span class="line"><span class="undefined">          username: lastGist.owner.login,</span></span><span class="line"><span class="undefined">          lastGistUrl: lastGist.html_url</span></span><span class="line"><span class="undefined">        &#125;);</span></span><span class="line"><span class="undefined">      &#125;</span></span><span class="line"><span class="actionscript">    &#125;.bind(<span class="keyword">this</span>));</span></span><span class="line"><span class="undefined">  &#125;,</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="actionscript">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><span class="line"><span class="actionscript">    <span class="keyword">return</span> (</span></span><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><span class="line"><span class="handlebars"><span class="xml">        &#123;this.state.username&#125;'s last gist is <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;this.state.lastGistUrl&#125;</span>&gt;</span>here<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</span></span></span><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><span class="line"><span class="undefined">    );</span></span><span class="line"><span class="undefined">  &#125;</span></span><span class="line"><span class="undefined">&#125;);</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="undefined">ReactDOM.render(</span></span><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">UserGist</span> <span class="attr">source</span>=<span class="string">"https://api.github.com/users/octocat/gists"</span> /&gt;</span>,</span></span></span><span class="line"><span class="javascript">  <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span></span><span class="line"><span class="undefined">);</span></span><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure><ol><li>把数据通过 AJAX 请求的方法从服务器获取，阮一峰老师这里是用了 <code>componentDidMount</code> 方法设置 AJAX 请求，再用 <code>this.setState</code> 方法重新渲染 UI，<code>InitialState</code> 初始数据为空</li></ol><h2 id="第十二个demo"><a href="#第十二个demo" class="headerlink" title="第十二个demo"></a>第十二个demo</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span><span class="line">48</span><span class="line">49</span><span class="line">50</span><span class="line">51</span><span class="line">52</span><span class="line">53</span><span class="line">54</span><span class="line">55</span><span class="line">56</span><span class="line">57</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/react-dom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../build/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span></span><span class="line"><span class="actionscript"><span class="keyword">var</span> RepoList = React.createClass(&#123;</span></span><span class="line"><span class="actionscript">  getInitialState: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><span class="line"><span class="actionscript">      loading: <span class="literal">true</span>,</span></span><span class="line"><span class="actionscript">      error: <span class="literal">null</span>,</span></span><span class="line"><span class="actionscript">      data: <span class="literal">null</span></span></span><span class="line"><span class="undefined">    &#125;;</span></span><span class="line"><span class="undefined">  &#125;,</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="undefined">  componentDidMount() &#123;</span></span><span class="line"><span class="actionscript">    <span class="keyword">this</span>.props.promise.then(</span></span><span class="line"><span class="actionscript">      value =&gt; <span class="keyword">this</span>.setState(&#123;loading: <span class="literal">false</span>, data: value&#125;),</span></span><span class="line"><span class="actionscript">      error =&gt; <span class="keyword">this</span>.setState(&#123;loading: <span class="literal">false</span>, error: error&#125;));</span></span><span class="line"><span class="undefined">  &#125;,</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="actionscript">  render: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><span class="line"><span class="actionscript">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.loading) &#123;</span></span><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="actionscript">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state.error !== <span class="literal">null</span>) &#123;</span></span><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Error: &#123;this.state.error.message&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="actionscript">    <span class="keyword">else</span> &#123;</span></span><span class="line"><span class="actionscript">      <span class="keyword">var</span> repos = <span class="keyword">this</span>.state.data.items;</span></span><span class="line"><span class="actionscript">      <span class="keyword">var</span> repoList = repos.map(<span class="function"><span class="keyword">function</span> <span class="params">(repo, index)</span> </span>&#123;</span></span><span class="line"><span class="actionscript">        <span class="keyword">return</span> (</span></span><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;repo.html_url&#125;</span>&gt;</span>&#123;repo.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span> (&#123;repo.stargazers_count&#125; stars) <span class="tag">&lt;<span class="name">br</span>/&gt;</span> &#123;repo.description&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><span class="line"><span class="undefined">        );</span></span><span class="line"><span class="undefined">      &#125;);</span></span><span class="line"><span class="actionscript">      <span class="keyword">return</span> (</span></span><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span></span><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Most Popular JavaScript Projects in Github<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">ol</span>&gt;</span>&#123;repoList&#125;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span></span><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span></span><span class="line"><span class="undefined">      );</span></span><span class="line"><span class="undefined">    &#125;</span></span><span class="line"><span class="undefined">  &#125;</span></span><span class="line"><span class="undefined">&#125;);</span></span><span class="line"><span class="undefined"></span></span><span class="line"><span class="undefined">ReactDOM.render(</span></span><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">RepoList</span> <span class="attr">promise</span>=<span class="string">&#123;$.getJSON(</span>'<span class="attr">https:</span>//<span class="attr">api.github.com</span>/<span class="attr">search</span>/<span class="attr">repositories</span>?<span class="attr">q</span>=<span class="string">javascript&amp;sort</span>=<span class="string">stars</span>')&#125; /&gt;</span>,</span></span></span><span class="line"><span class="javascript">  <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span></span><span class="line"><span class="undefined">);</span></span><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure><ol><li><p>数据传来后赋值</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><span class="line">  <span class="keyword">this</span>.props.promise.then(</span><span class="line">    value =&gt; <span class="keyword">this</span>.setState(&#123;<span class="string">loading:</span> <span class="literal">false</span>, <span class="string">data:</span> value&#125;),</span><span class="line">    error =&gt; <span class="keyword">this</span>.setState(&#123;<span class="string">loading:</span> <span class="literal">false</span>, <span class="string">error:</span> error&#125;));</span><span class="line">&#125;,</span></pre></td></tr></table></figure><p>如果Promise对象报错（rejected状态），组件显示报错信息；如果Promise对象抓取数据成功（fulfilled状态），组件显示获取的数据。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="attr">getInitialState:</span> <span class="string">function()</span> <span class="string">&#123;</span></span><span class="line">  <span class="string">return</span> <span class="string">&#123;</span></span><span class="line"><span class="attr">    loading:</span> <span class="literal">true</span><span class="string">,</span></span><span class="line"><span class="attr">    error:</span> <span class="literal">null</span><span class="string">,</span></span><span class="line"><span class="attr">    data:</span> <span class="literal">null</span></span><span class="line">  <span class="string">&#125;;</span></span><span class="line"><span class="string">&#125;,</span></span></pre></td></tr></table></figure><p>Promise对象正在抓取数据（pending状态），组件显示”正在加载”</p></li></ol><h2 id="第十三个demo"><a href="#第十三个demo" class="headerlink" title="第十三个demo"></a>第十三个demo</h2><ul><li><p>这里不贴代码</p></li><li><p>这是一个 React 的服务器渲染</p></li><li><p>根据 readme.md 的提示，我们搞好依赖，<code>node server.js</code> 来监听 <a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a> <img src="http://upload-images.jianshu.io/upload_images/3191557-888bf6bd6f540557.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>这看着是非常像手写服务器的方法，如果有 JavaScript权威指南 这本书，我建议你看看 P302 如何手写服务器。<img src="http://upload-images.jianshu.io/upload_images/3191557-bc51896f11363644.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p>这里推荐一篇文章 <a href="http://www.alloyteam.com/2017/01/react-from-scratch-server-render/" target="_blank" rel="external">从零开始 React 服务器渲染</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;摸到-React-的门把手&quot;&gt;&lt;a href=&quot;#摸到-React-的门把手&quot; class=&quot;headerlink&quot; title=&quot;摸到 React 的门把手&quot;&gt;&lt;/a&gt;摸到 React 的门把手&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.ruanyi
      
    
    </summary>
    
    
      <category term="Black History" scheme="http://yoursite.com/tags/Black-History/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>摸到 TypeScript 的门把手</title>
    <link href="http://yoursite.com/2017/10/14/%E6%91%B8%E5%88%B0%20TypeScript%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B/"/>
    <id>http://yoursite.com/2017/10/14/摸到 TypeScript 的门把手/</id>
    <published>2017-10-13T16:06:12.000Z</published>
    <updated>2017-11-05T14:42:01.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摸到-TypeScript-的门把手"><a href="#摸到-TypeScript-的门把手" class="headerlink" title="摸到 TypeScript 的门把手"></a>摸到 TypeScript 的门把手</h1><p><a href="https://github.com/Microsoft/TypeScript" target="_blank" rel="external">TypeScript</a></p><h2 id="Basic-Types（原始数据类型）"><a href="#Basic-Types（原始数据类型）" class="headerlink" title="Basic Types（原始数据类型）"></a>Basic Types（原始数据类型）</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span><span class="line">48</span><span class="line">49</span><span class="line">50</span><span class="line">51</span><span class="line">52</span><span class="line">53</span><span class="line">54</span><span class="line">55</span><span class="line">56</span><span class="line">57</span><span class="line">58</span><span class="line">59</span><span class="line">60</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><span class="line">a = <span class="string">'hello'</span></span><span class="line"><span class="comment">//这样是错的</span></span><span class="line"><span class="comment">//因为类型不兼容 要 a = true</span></span><span class="line"><span class="keyword">let</span> b: <span class="built_in">number</span> = <span class="number">1</span>;</span><span class="line"><span class="keyword">let</span> c: <span class="built_in">string</span> = <span class="string">'1'</span>;</span><span class="line"><span class="keyword">let</span> e: <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><span class="line"><span class="comment">//number[] 等于 Array&lt;number&gt;</span></span><span class="line"></span><span class="line"><span class="comment">//这里有一个新类型 Tuple</span></span><span class="line"><span class="comment">//有限长度的有限列表</span></span><span class="line"><span class="keyword">let</span> f: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">'1'</span>,<span class="number">2</span>];</span><span class="line"></span><span class="line"><span class="comment">//Enum 一个数字的集合</span></span><span class="line"><span class="keyword">enum</span> g &#123;</span><span class="line">  hello = <span class="number">0</span>,</span><span class="line">  world = <span class="number">1</span>,</span><span class="line">&#125;</span><span class="line"><span class="keyword">enum</span> g1 &#123;</span><span class="line">  hello,</span><span class="line">  world,</span><span class="line">&#125;</span><span class="line"><span class="comment">//是默认012345这样赋值</span></span><span class="line"><span class="comment">//转成 JS</span></span><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">g</span>) </span>&#123;</span><span class="line">    g[g[<span class="string">"hello"</span>] = <span class="number">0</span>] = <span class="string">"hello"</span>;</span><span class="line">    g[g[<span class="string">"world"</span>] = <span class="number">1</span>] = <span class="string">"world"</span>;</span><span class="line">&#125;)(g || (g = &#123;&#125;));</span><span class="line"><span class="keyword">var</span> g1;</span><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">g1</span>) </span>&#123;</span><span class="line">    g1[g1[<span class="string">"hello"</span>] = <span class="number">0</span>] = <span class="string">"hello"</span>;</span><span class="line">    g1[g1[<span class="string">"world"</span>] = <span class="number">1</span>] = <span class="string">"world"</span>;</span><span class="line">&#125;)(g1 || (g1 = &#123;&#125;));</span><span class="line"><span class="comment">//TS2.4后可以赋值 string</span></span><span class="line"><span class="keyword">enum</span> g &#123;</span><span class="line">  hello = <span class="string">'0'</span>,</span><span class="line">  world = <span class="string">'1'</span>,</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">//Any</span></span><span class="line"><span class="comment">//let the values pass through compile-time checks</span></span><span class="line"><span class="keyword">let</span> notSure:<span class="built_in">any</span> = <span class="number">4</span>;</span><span class="line">notSure = <span class="string">"maybe a string instead"</span>;</span><span class="line">notSure = <span class="literal">false</span>;</span><span class="line"></span><span class="line"><span class="comment">//Void</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><span class="line">  alert(<span class="string">'hello world'</span>)</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">//Never</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">never1</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><span class="line">  <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">'Something failed'</span>)</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">//assert 断言</span></span><span class="line"><span class="comment">//Type assertion</span></span><span class="line"><span class="keyword">let</span> someValue1: <span class="built_in">any</span> = <span class="string">"this is a string"</span>;</span><span class="line"><span class="keyword">let</span> strLength1: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).length;</span><span class="line"><span class="comment">//让 String 具有 Number 的办法</span></span></pre></td></tr></table></figure><h2 id="Variable-Declarations"><a href="#Variable-Declarations" class="headerlink" title="Variable Declarations"></a>Variable Declarations</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="number">1</span>;</span><span class="line"><span class="keyword">let</span> s1 = <span class="number">2</span>;</span><span class="line"><span class="keyword">const</span> s2 = <span class="number">3</span>;</span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s3</span> (<span class="params"></span>) </span>&#123;</span><span class="line">  <span class="keyword">return</span> <span class="number">4</span>;</span><span class="line">&#125; </span><span class="line"><span class="keyword">const</span> s4 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><span class="line">  <span class="keyword">return</span> <span class="number">5</span>；</span><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="Interfaces（接口）"><a href="#Interfaces（接口）" class="headerlink" title="Interfaces（接口）"></a>Interfaces（接口）</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span><span class="line">48</span><span class="line">49</span><span class="line">50</span><span class="line">51</span><span class="line">52</span><span class="line">53</span><span class="line">54</span><span class="line">55</span><span class="line">56</span><span class="line">57</span><span class="line">58</span><span class="line">59</span><span class="line">60</span><span class="line">61</span><span class="line">62</span><span class="line">63</span><span class="line">64</span><span class="line">65</span><span class="line">66</span><span class="line">67</span><span class="line">68</span><span class="line">69</span><span class="line">70</span><span class="line">71</span><span class="line">72</span><span class="line">73</span><span class="line">74</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IMap &#123;</span><span class="line">  a: <span class="built_in">string</span>;</span><span class="line">&#125;</span><span class="line"><span class="comment">//type contract</span></span><span class="line"><span class="keyword">let</span> obj1: IMap = &#123;</span><span class="line">  a: <span class="string">'1'</span>,</span><span class="line">  b: <span class="number">2</span>,   <span class="comment">//error 一定要 string</span></span><span class="line">&#125;</span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sss</span> (<span class="params">a: IMap</span>): <span class="title">IMap</span></span>&#123;</span><span class="line">  <span class="keyword">return</span> a;</span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">//Optional Properties</span></span><span class="line"><span class="keyword">interface</span> IOptional1 &#123;</span><span class="line">  a: <span class="built_in">number</span>;</span><span class="line">  b?: <span class="built_in">string</span>;</span><span class="line">&#125;</span><span class="line"><span class="comment">// arg.b 有可能 undefined</span></span><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sss1</span>(<span class="params">arg: IOptional1</span>): <span class="title">string</span></span>&#123;</span><span class="line">  <span class="keyword">return</span> arg.b + <span class="string">''</span></span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">//Readonly properties</span></span><span class="line"><span class="keyword">interface</span> Point &#123;</span><span class="line">    readonly x: <span class="built_in">number</span>;</span><span class="line">    readonly y: <span class="built_in">number</span>;</span><span class="line">&#125;</span><span class="line"><span class="keyword">let</span> point: IPoint = &#123;</span><span class="line">  x: <span class="number">1</span>, </span><span class="line">  y: <span class="number">2</span>,</span><span class="line">&#125;</span><span class="line"><span class="comment">//point.x = 23;</span></span><span class="line"><span class="comment">//只读属性没法定义</span></span><span class="line"></span><span class="line"><span class="comment">//Function Types</span></span><span class="line"><span class="keyword">interface</span> ISearchFunc &#123;</span><span class="line">    (source: <span class="built_in">string</span>, subString: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><span class="line">&#125;</span><span class="line"><span class="comment">//function(source, subString) 没有必要再定义</span></span><span class="line"><span class="keyword">let</span> mySearch: ISearchFunc = <span class="function"><span class="keyword">function</span>(<span class="params">source: <span class="built_in">string</span>, subString: <span class="built_in">string</span></span>) </span>&#123;</span><span class="line">    <span class="keyword">let</span> result = source.search(subString);</span><span class="line">    <span class="keyword">return</span> result &gt; <span class="number">-1</span>;</span><span class="line">&#125;</span><span class="line"><span class="comment">//Indexable Types</span></span><span class="line"><span class="keyword">interface</span> IndexType &#123;</span><span class="line">  [key:<span class="built_in">string</span>]:<span class="built_in">number</span></span><span class="line">&#125;</span><span class="line"><span class="keyword">let</span> inst1: IndexType &#123;</span><span class="line">  a: <span class="string">'1'</span>,     <span class="comment">//error</span></span><span class="line">&#125;</span><span class="line"></span><span class="line"><span class="comment">//type</span></span><span class="line"><span class="keyword">type</span> aType = IndexType;</span><span class="line"><span class="comment">//比如说是let啊，就是类型声明对吧 type 就类似</span></span><span class="line"></span><span class="line"><span class="keyword">type</span> aaaaa = <span class="built_in">string</span>;</span><span class="line"><span class="keyword">let</span> ssss: aaaaa = <span class="string">'1'</span></span><span class="line"></span><span class="line"><span class="keyword">interface</span> IPeople &#123;</span><span class="line">  eyes: <span class="built_in">number</span>;</span><span class="line">&#125;</span><span class="line"><span class="keyword">enum</span> LapTopEnum &#123;</span><span class="line">  haiwei,</span><span class="line">  lenovo,</span><span class="line">  apple,</span><span class="line">  IBM,</span><span class="line">&#125;</span><span class="line"><span class="keyword">interface</span> ImonkeyProgramer <span class="keyword">extends</span> IPeople &#123;</span><span class="line">  laptop: LapTopEnum</span><span class="line">&#125;</span><span class="line"><span class="keyword">let</span> tangkalun: ImonkeyProgramer = &#123;</span><span class="line">  laptop: LapTopEnum.apple,</span><span class="line">  eyes: <span class="number">2</span>,</span><span class="line">&#125;</span></pre></td></tr></table></figure><blockquote><p>In TypeScript, interfaces fill the role of naming these types, and are a powerful way of defining contracts within your code as well as contracts with code outside of your project.</p></blockquote><h2 id="Classes（类）"><a href="#Classes（类）" class="headerlink" title="Classes（类）"></a>Classes（类）</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span><span class="line">27</span><span class="line">28</span><span class="line">29</span><span class="line">30</span><span class="line">31</span><span class="line">32</span><span class="line">33</span><span class="line">34</span><span class="line">35</span><span class="line">36</span><span class="line">37</span><span class="line">38</span><span class="line">39</span><span class="line">40</span><span class="line">41</span><span class="line">42</span><span class="line">43</span><span class="line">44</span><span class="line">45</span><span class="line">46</span><span class="line">47</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> A &#123;</span><span class="line">    a:<span class="built_in">string</span></span><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><span class="line">        <span class="keyword">this</span>.a = <span class="string">'1'</span></span><span class="line">    &#125;</span><span class="line">    hello(): <span class="built_in">string</span> &#123;</span><span class="line">        <span class="keyword">return</span> <span class="string">'1'</span>;</span><span class="line">    &#125;</span><span class="line">&#125;</span><span class="line"><span class="keyword">let</span> instA = <span class="keyword">new</span> A();</span><span class="line">instA.a</span><span class="line"><span class="comment">//转换成 JS</span></span><span class="line"><span class="keyword">var</span> A = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><span class="line">        <span class="keyword">this</span>.a = <span class="string">'1'</span>;</span><span class="line">    &#125;</span><span class="line">    A.prototype.hello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><span class="line">        <span class="keyword">return</span> <span class="string">'1'</span>;</span><span class="line">    &#125;;</span><span class="line">    <span class="keyword">return</span> A;</span><span class="line">&#125;());</span><span class="line"><span class="keyword">var</span> instA = <span class="keyword">new</span> A();</span><span class="line">instA.a;</span><span class="line"><span class="comment">//注意 private public protect</span></span><span class="line"></span><span class="line"><span class="comment">//Inheritance</span></span><span class="line"><span class="keyword">class</span> People &#123;</span><span class="line">    name: <span class="built_in">string</span></span><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><span class="line">        <span class="keyword">this</span>.name = name;</span><span class="line">    &#125;</span><span class="line">&#125;</span><span class="line"><span class="keyword">class</span> A <span class="keyword">extends</span> People &#123;</span><span class="line">    a: <span class="built_in">string</span>;</span><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><span class="line">        <span class="keyword">super</span>(<span class="string">'tangkalun'</span>);</span><span class="line">        <span class="keyword">this</span>.a = <span class="string">'1'</span>;</span><span class="line">    &#125;</span><span class="line">    hello(): <span class="built_in">string</span> &#123;</span><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><span class="line">    &#125;</span><span class="line">&#125;</span><span class="line"><span class="comment">// class 不仅可以描述数据结构,同时他还有方法、属性等等的封装</span></span><span class="line"><span class="keyword">let</span> instA = <span class="keyword">new</span> A();</span><span class="line">instA.a;</span><span class="line">instA.name;</span><span class="line"><span class="comment">//关于super()这个问题，是调用父类的构造函数</span></span></pre></td></tr></table></figure><h2 id="Generics（泛型）"><a href="#Generics（泛型）" class="headerlink" title="Generics（泛型）"></a>Generics（泛型）</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SillyBoy&lt;T&gt; &#123;</span><span class="line">  skills: T</span><span class="line">&#125;</span><span class="line"><span class="keyword">const</span> tangkalun: SillyBoy&lt;[<span class="string">'string'</span>,<span class="string">'string'</span>,<span class="string">'string'</span>]&gt; = &#123;</span><span class="line">  skills: [<span class="string">'eat'</span>,<span class="string">'fuck'</span>,<span class="string">'sleep'</span>]</span><span class="line">&#125;</span><span class="line"><span class="keyword">const</span> frankie: SillyBoy&lt;[<span class="built_in">string</span>]&gt; = &#123;</span><span class="line">  skills: [<span class="string">'fuck'</span>],</span><span class="line">&#125;</span><span class="line"><span class="keyword">const</span> tang: SillyBoy&lt;[<span class="literal">undefined</span>]&gt; = &#123;</span><span class="line">  skills: <span class="literal">undefined</span>,</span><span class="line">&#125;</span><span class="line"><span class="keyword">const</span> kalun: SillyBoy&lt;<span class="built_in">string</span>&gt; = &#123;</span><span class="line">    skills: <span class="string">'sleep'</span>,</span><span class="line">&#125;</span></pre></td></tr></table></figure><p>先到这里吧，我太菜了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;摸到-TypeScript-的门把手&quot;&gt;&lt;a href=&quot;#摸到-TypeScript-的门把手&quot; class=&quot;headerlink&quot; title=&quot;摸到 TypeScript 的门把手&quot;&gt;&lt;/a&gt;摸到 TypeScript 的门把手&lt;/h1&gt;&lt;p&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="Black History" scheme="http://yoursite.com/tags/Black-History/"/>
    
      <category term="TypeScript" scheme="http://yoursite.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>摸到 webpack 的门把手 (2)</title>
    <link href="http://yoursite.com/2017/10/14/%E6%91%B8%E5%88%B0%20webpack%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B%20(2)/"/>
    <id>http://yoursite.com/2017/10/14/摸到 webpack 的门把手 (2)/</id>
    <published>2017-10-13T16:05:14.000Z</published>
    <updated>2017-11-05T14:42:01.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摸到-webpack-的门把手-2"><a href="#摸到-webpack-的门把手-2" class="headerlink" title="摸到 webpack 的门把手 (2)"></a>摸到 webpack 的门把手 (2)</h1><p>经过了上一篇 <a href="https://frankietang.github.io/2017/08/20/%E6%91%B8%E5%88%B0%20webpack%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B/" target="_blank" rel="external">摸到 webpack 的门把手</a> 的踩坑，我们大概知道了 webpack 是用 loader 加载不同的资源，把大东西压成小东西。大不一定能满足，小也有小的优点嘛。对吧，有的时候大家就喜欢小。</p><h2 id="webpack-到底干了什么"><a href="#webpack-到底干了什么" class="headerlink" title="webpack 到底干了什么"></a>webpack 到底干了什么</h2><p>bundle.js 把每一个每一个模块都 call 一下，然后把模块存到 installedModules 里，方便其他模块使用。有空填坑分析代码。</p><h2 id="压缩代码的一些问题"><a href="#压缩代码的一些问题" class="headerlink" title="压缩代码的一些问题"></a>压缩代码的一些问题</h2><p>我们会发现 jQuery 的代码并没有压缩，其实我们可以使用 <code>webpack -p</code>，webpack 给出的解释是<br><code>shortcut for --optimize-minimize --define process.env.NODE_ENV=&quot;production&quot;</code></p><p>运行 <code>-p</code> ，实际执行</p><ul><li>使用UglifyJsPlugin进行 JS文件压缩,webpack 自带的压缩插件</li><li>运行<a href="https://webpack.js.org/plugins/loader-options-plugin/#components/sidebar/sidebar.jsx" target="_blank" rel="external">LoaderOptionsPlugin</a></li><li>设置Node环境变量</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//运行 webpack -p 会通过如下方式调用 DefinePlugin</span></span><span class="line"><span class="keyword">var</span> webpack=<span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><span class="line"></span><span class="line"><span class="built_in">module</span>.exports=&#123;</span><span class="line">  plugins:[</span><span class="line">    <span class="keyword">new</span> webpack DefinePlugin(&#123;</span><span class="line">      <span class="string">'process.env.NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>)</span><span class="line">    &#125;)</span><span class="line">  ]</span><span class="line">&#125;</span></pre></td></tr></table></figure><p><code>DefinePlugin</code> 在原始的源码中执行查找和替换操作. 在导入的代码中,任何出现 <code>process.env.NODE_ENV</code>的地方都会被替换为<code>”production”</code>. 因此, 形如<code>if (process.env.NODE_ENV !== ‘production’) console.log(‘…’)</code> 的代码就会等价于 <code>if (false) console.log(‘…’)</code> 并且最终通过<code>UglifyJS</code>等价替换掉.</p><p><a href="https://webpack.js.org/guides/public-path/" target="_blank" rel="external">webpack - public-path</a></p><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><p>每次写完代码都要 npm run webpack ，很麻烦，那我们需要 <code>webpack --progress --watch</code> 监听文件变动，只要我们保存了文件就会自动编译代码。</p><p>在 npm script 加一句 <code>&quot;watch&quot;: &quot;webpack --progress --watch&quot;</code>，然后 npm run watch 试试</p><p><img src="http://upload-images.jianshu.io/upload_images/3191557-f654ac96a8135f12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>不但能刷新代码，还能刷新浏览器</p><p>看到 Using webpack-dev-server 那里，它叫我们在根目录跑这句话</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> webpack-<span class="built_in">dev</span>-server</span></pre></td></tr></table></figure><p>在 webpack.config.js 加点东西</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">devServer</span>: &#123;</span><span class="line">    <span class="attribute">contentBase</span>: <span class="string">'./dist'</span></span><span class="line">&#125;,</span></pre></td></tr></table></figure><p>在 package.json 的 npm script 加点东西</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">"<span class="keyword">start</span><span class="string">": "</span>webpack-dev-<span class="keyword">server</span> <span class="comment">--open"</span></span></pre></td></tr></table></figure><p>成了，看下图。<br><img src="http://upload-images.jianshu.io/upload_images/3191557-494866b6ba1c3ca0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>如果我们改一下 src/bundle.js 就会发现</p><ul><li>bundle.js 自动打包</li><li><a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a> 自动刷新</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/3191557-c12e95d7cc12d8af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>注意，我们就不能再直接打开 index.html 了，因为它引用的是 /bundle.js，用 file:// 协议打开 index.html 的话，会请求 file:///bundle.js，显然这个文件不存在。</p><p><a href="https://webpack.js.org/guides/development/" target="_blank" rel="external">webpack - development</a></p><h2 id="查看成果"><a href="#查看成果" class="headerlink" title="查看成果"></a><a href="https://github.com/FRANKIETANG/webpack-demo" target="_blank" rel="external">查看成果</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;摸到-webpack-的门把手-2&quot;&gt;&lt;a href=&quot;#摸到-webpack-的门把手-2&quot; class=&quot;headerlink&quot; title=&quot;摸到 webpack 的门把手 (2)&quot;&gt;&lt;/a&gt;摸到 webpack 的门把手 (2)&lt;/h1&gt;&lt;p&gt;经过了上一篇
      
    
    </summary>
    
    
      <category term="Black History" scheme="http://yoursite.com/tags/Black-History/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>摸到 webpack 的门把手</title>
    <link href="http://yoursite.com/2017/10/14/%E6%91%B8%E5%88%B0%20webpack%20%E7%9A%84%E9%97%A8%E6%8A%8A%E6%89%8B/"/>
    <id>http://yoursite.com/2017/10/14/摸到 webpack 的门把手/</id>
    <published>2017-10-13T16:04:38.000Z</published>
    <updated>2017-11-05T14:42:01.204Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摸到-webpack-的门把手"><a href="#摸到-webpack-的门把手" class="headerlink" title="摸到 webpack 的门把手"></a>摸到 webpack 的门把手</h1><p>之前接触过一阵子 webpack ，想了一下还是写篇博客吧。要不然又忘掉怎么配置了。</p><h2 id="怎么安装？"><a href="#怎么安装？" class="headerlink" title="怎么安装？"></a>怎么安装？</h2><p><a href="https://webpack.js.org/" target="_blank" rel="external">来，我们先看 webpack 的官网</a></p><p>点击到 guides ，我们直接抄，抄完我们就知道 webpack 的流程了</p><p>不过有几点我们是要注意的</p><ul><li>注意 index.js 中的 <code>_.join</code>，这个 _ 实际上是 lodash 暴露的全局变量。</li><li>为了使用 lodash，HTML 使用 script 引入了 lodash v4.16.6。可以用 npm 装回来 <code>npm install --save lodash</code></li><li>尽量运行 <code>./node_modules/.bin/webpack</code> </li></ul><h2 id="看看文件结构"><a href="#看看文件结构" class="headerlink" title="看看文件结构"></a>看看文件结构</h2><ul><li><code>./node_modules/.bin/webpack src/index.js dist/bundle.js</code> 将 src/index.js 变成 dist/bundle.js</li><li>index.html 引用的是 dist/bundle.js</li><li>lodash 被安装在 node_modules 里</li><li>webpack 也被安装在 node_modules里，<code>./node_modules/.bin/webpack</code> 就是一个可执行文件</li><li>webpack、lodash 的版本号都被写在 package.json 里了</li></ul><p><a href="http://www.ruanyifeng.com/blog/2012/08/how_to_read_diff.html" target="_blank" rel="external">读懂diff - 阮一峰</a></p><h2 id="引用-jQuery"><a href="#引用-jQuery" class="headerlink" title="引用 jQuery"></a>引用 jQuery</h2><ul><li><p><code>npm i -S jquery</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span></span><span class="line">+<span class="keyword">import</span> j <span class="keyword">from</span> <span class="string">'jquery'</span></span><span class="line"></span><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">component</span> (<span class="params"></span>) </span>&#123;</span><span class="line">-  <span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><span class="line">+  <span class="keyword">var</span> element = j(<span class="string">'&lt;div&gt;&lt;/div&gt;'</span>);</span><span class="line"></span><span class="line">   <span class="comment">/* lodash is required for the next line to work */</span></span><span class="line">-  element.innerHTML = _.join([<span class="string">'Hello'</span>,<span class="string">'webpack'</span>], <span class="string">' '</span>);</span><span class="line">+  element.html(_.join([<span class="string">'Hello'</span>,<span class="string">'webpack'</span>], <span class="string">' '</span>))</span><span class="line"></span><span class="line">-  <span class="keyword">return</span> element;</span><span class="line">+  <span class="keyword">return</span> element.get(<span class="number">0</span>);</span><span class="line"> &#125;</span><span class="line"></span><span class="line"> <span class="built_in">document</span>.body.appendChild(component());</span></pre></td></tr></table></figure></li><li><p><code>./node_modules/.bin/webpack src/index.js dist/bundle.js</code> 跑这句话</p></li><li><p>点击 commits 看看有什么变化</p></li><li><p>建议 index.js 改成 <code>console.log(1)</code> 然后运行 <code>./node_modules/.bin/webpack src/index.js dist/bundle.js</code>，看看 bundle.js 和 index.js 的区别</p></li></ul><h2 id="做一点改良"><a href="#做一点改良" class="headerlink" title="做一点改良"></a>做一点改良</h2><ul><li><p>我们可以在根目录搞一个 <code>webpack.config.js</code>，在里面写上一点代码。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span></pre></td><td class="code"><pre><span class="line">var <span class="built_in">path</span> = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><span class="line"></span><span class="line">module.exports = &#123;</span><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><span class="line">    <span class="built_in">output</span>: &#123;</span><span class="line">        filename: <span class="string">'bundle.js'</span>,</span><span class="line">        <span class="built_in">path</span>: <span class="built_in">path</span>.resolve(__dirname, <span class="string">'dist'</span>)</span><span class="line">    &#125;</span><span class="line">&#125;</span></pre></td></tr></table></figure><p>重点是这三个玩意 src/index.js 、dist 和 bundle.js 在哪就行，方便我们后面改。</p></li><li><p>然后我们就可以用上这句 <code>./node_modules/.bin/webpack --config webpack.config.js</code></p></li><li><p>或者我们可以进行下面的改良</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><span class="line">  <span class="string">"test"</span>: <span class="string">"echo \"</span><span class="keyword">Error</span>: <span class="keyword">no</span> <span class="keyword">test</span> specified\<span class="string">" &amp;&amp; exit 1"</span>,</span><span class="line">  <span class="string">"webpack"</span>: <span class="string">"webpack"</span></span><span class="line">&#125;,</span><span class="line"><span class="string">"keywords"</span>: [],</span></pre></td></tr></table></figure><p>然后运行 npm run webpack</p></li></ul><h2 id="尝试-import-一个自己的文件"><a href="#尝试-import-一个自己的文件" class="headerlink" title="尝试 import 一个自己的文件"></a>尝试 import 一个自己的文件</h2><ul><li><p>创建一个 <code>foo.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><span class="line">    <span class="keyword">return</span> <span class="string">'tangkalun'</span></span><span class="line">&#125;</span></pre></td></tr></table></figure></li><li><p>然后在 <code>index.js</code> 加上 <code>import foo from &#39;./foo&#39;</code>，顺便 <code>console.log</code> 一下</p></li><li><p><code>npm run webpack</code></p></li></ul><h2 id="利用-webpack-压缩-JS-文件"><a href="#利用-webpack-压缩-JS-文件" class="headerlink" title="利用 webpack 压缩 JS 文件"></a>利用 webpack 压缩 JS 文件</h2><ul><li><p><a href="https://webpack.js.org/guides/production/" target="_blank" rel="external">webpack 自带的</a> 支持所有 <a href="https://github.com/mishoo/UglifyJS2#usage" target="_blank" rel="external">UglifyJS 选项</a></p></li><li><p>在 <code>webpack.config.js</code> 加上这样一句话，UglifyJS 的选项可以一个都不加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><span class="line"></span><span class="line"><span class="built_in">module</span>.exports = &#123;</span><span class="line">  <span class="comment">/*...*/</span></span><span class="line">  plugins:[</span><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin()</span><span class="line">  ]</span><span class="line">&#125;;</span></pre></td></tr></table></figure></li><li><p><code>npm run webpack</code></p></li><li><p>压完了</p></li></ul><h2 id="看看成果"><a href="#看看成果" class="headerlink" title="看看成果"></a>看看成果</h2><p><a href="https://github.com/FRANKIETANG/webpack-demo" target="_blank" rel="external">点击这里</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;摸到-webpack-的门把手&quot;&gt;&lt;a href=&quot;#摸到-webpack-的门把手&quot; class=&quot;headerlink&quot; title=&quot;摸到 webpack 的门把手&quot;&gt;&lt;/a&gt;摸到 webpack 的门把手&lt;/h1&gt;&lt;p&gt;之前接触过一阵子 webpack ，
      
    
    </summary>
    
    
      <category term="Black History" scheme="http://yoursite.com/tags/Black-History/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
</feed>
